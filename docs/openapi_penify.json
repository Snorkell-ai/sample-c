{
  "openapi": "3.1.0",
  "info": {
    "title": "Snorkell-Backend",
    "description": "This is a very custom OpenAPI schema",
    "version": "1.0.0"
  },
  "paths": {
    "/api/v1/users": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Users List",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "users_list_api_v1_users_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/User"
                  },
                  "type": "array",
                  "title": "Response Users List Api V1 Users Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/users\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/users\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/users' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/users\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/users',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/users'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/users\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/users HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/users\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/users\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/users\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/users\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/users',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/users',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/users',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/users')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/users\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/users\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/users', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/users');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/users',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/users');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/users' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/users\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/users\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/users\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/users\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/users\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/users\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/users' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/users'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/users\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      },
      "put": {
        "tags": [
          "users"
        ],
        "summary": "User Edit",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "user_edit_api_v1_users_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSingupResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Put, \"{{baseUrl}}/api/v1/users\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"birthday\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zipcode\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"imgUrl\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/users\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Put);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"firstName\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"lastName\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"birthday\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"  \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"zipcode\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"imgUrl\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request PUT '{{baseUrl}}/api/v1/users' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PUT\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/users\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"birthday\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zipcode\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"imgUrl\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/users',\n  options: Options(\n    method: 'PUT',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('PUT', Uri.parse('{{baseUrl}}/api/v1/users'));\nrequest.body = json.encode({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/users\"\n  method := \"PUT\"\n\n  payload := strings.NewReader(`{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "PUT /api/v1/users HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 290\n\n{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"PUT\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/users\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "var data = JSON.stringify({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"{{baseUrl}}/api/v1/users\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/users\",\n  \"method\": \"PUT\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"id\": \"<integer>\",\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"birthday\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"imgUrl\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"birthday\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zipcode\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"imgUrl\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users\")\n  .method(\"PUT\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.put(\"{{baseUrl}}/api/v1/users\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"birthday\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zipcode\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"imgUrl\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"birthday\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zipcode\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"imgUrl\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users\")\n  .put(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n});\n\nlet config = {\n  method: 'put',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/users',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'PUT',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/users',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'PUT',\n  'url': '{{baseUrl}}/api/v1/users',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"id\": \"<integer>\",\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"birthday\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"imgUrl\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('PUT', '{{baseUrl}}/api/v1/users')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"id\": \"<integer>\",\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"birthday\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"imgUrl\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/users\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"birthday\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zipcode\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"imgUrl\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"PUT\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"birthday\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zipcode\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"imgUrl\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/users\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `PUT uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '290'\n];\n$body = '{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}';\n$request = new Request('PUT', '{{baseUrl}}/api/v1/users', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/users');\n$request->setMethod(HTTP_Request2::METHOD_PUT);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"id\": \"<integer>\",\\n  \"email\": \"<string>\",\\n  \"firstName\": \"<string>\",\\n  \"lastName\": \"<string>\",\\n  \"birthday\": \"<date>\",\\n  \"gender\": \"<string>\",\\n  \"address\": \"<string>\",\\n  \"zipcode\": \"<string>\",\\n  \"city\": \"<string>\",\\n  \"country\": \"<string>\",\\n  \"lang\": \"<string>\",\\n  \"imgUrl\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/users',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PUT',\n  CURLOPT_POSTFIELDS =>'{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/users');\n$request->setRequestMethod('PUT');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"id`\": `\"<integer>`\",\n  `\"email`\": `\"<string>`\",\n  `\"firstName`\": `\"<string>`\",\n  `\"lastName`\": `\"<string>`\",\n  `\"birthday`\": `\"<date>`\",\n  `\"gender`\": `\"<string>`\",\n  `\"address`\": `\"<string>`\",\n  `\"zipcode`\": `\"<string>`\",\n  `\"city`\": `\"<string>`\",\n  `\"country`\": `\"<string>`\",\n  `\"lang`\": `\"<string>`\",\n  `\"imgUrl`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/users' -Method 'PUT' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/users\"\n\npayload = json.dumps({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"PUT\", \"/api/v1/users\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/users\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Put.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"id\": \"<integer>\",\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"birthday\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zipcode\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"imgUrl\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::PUT, \"{{baseUrl}}/api/v1/users\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"290\"\n)\nparams = \"{\n  \\\"id\\\": \\\"<integer>\\\",\n  \\\"email\\\": \\\"<string>\\\",\n  \\\"firstName\\\": \\\"<string>\\\",\n  \\\"lastName\\\": \\\"<string>\\\",\n  \\\"birthday\\\": \\\"<date>\\\",\n  \\\"gender\\\": \\\"<string>\\\",\n  \\\"address\\\": \\\"<string>\\\",\n  \\\"zipcode\\\": \\\"<string>\\\",\n  \\\"city\\\": \\\"<string>\\\",\n  \\\"country\\\": \\\"<string>\\\",\n  \\\"lang\\\": \\\"<string>\\\",\n  \\\"imgUrl\\\": \\\"<string>\\\"\n}\"\nres <- httpPUT(\"{{baseUrl}}/api/v1/users\", params, httpheader = headers, followlocation = TRUE)\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '290'\n)\n\nbody = '{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}';\n\nres <- VERB(\"PUT\", url = \"{{baseUrl}}/api/v1/users\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}'| http  --follow --timeout 3600 PUT '{{baseUrl}}/api/v1/users' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method PUT \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"id\": \"<integer>\",\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"birthday\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zipcode\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"imgUrl\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/users'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"birthday\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zipcode\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"imgUrl\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/users\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"PUT\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "User Create",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "user_create_api_v1_users_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/users\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/users\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"password\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"is_active\"\": false,\" + \"\\n\" +\n@\"  \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"  \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"phone\"\": {},\" + \"\\n\" +\n@\"  \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"  \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"count_repo_gen\"\": 0\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/users' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/users\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/users',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/users'));\nrequest.body = json.encode({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/users\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/users HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 552\n\n{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/users\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/users\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/users\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/users\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/users',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/users',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/users',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/users')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/users\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/users\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '552'\n];\n$body = '{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/users', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/users');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"email\": \"<string>\",\\n  \"password\": \"<string>\",\\n  \"first_name\": \"<string>\",\\n  \"last_name\": \"<string>\",\\n  \"is_active\": false,\\n  \"user_role\": \"VIEWER\",\\n  \"github_login_id\": \"<string>\",\\n  \"google_login_id\": \"<string>\",\\n  \"img_url\": \"<string>\",\\n  \"phone\": {},\\n  \"birthdate\": \"<date>\",\\n  \"gender\": \"<string>\",\\n  \"address\": \"<string>\",\\n  \"zip_code\": \"<string>\",\\n  \"city\": \"<string>\",\\n  \"country\": \"<string>\",\\n  \"lang\": \"<string>\",\\n  \"onboarding_channel\": \"<string>\",\\n  \"referred_by\": \"<integer>\",\\n  \"github_login_name\": \"<string>\",\\n  \"count_repo_gen\": 0\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/users',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/users');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"email`\": `\"<string>`\",\n  `\"password`\": `\"<string>`\",\n  `\"first_name`\": `\"<string>`\",\n  `\"last_name`\": `\"<string>`\",\n  `\"is_active`\": false,\n  `\"user_role`\": `\"VIEWER`\",\n  `\"github_login_id`\": `\"<string>`\",\n  `\"google_login_id`\": `\"<string>`\",\n  `\"img_url`\": `\"<string>`\",\n  `\"phone`\": {},\n  `\"birthdate`\": `\"<date>`\",\n  `\"gender`\": `\"<string>`\",\n  `\"address`\": `\"<string>`\",\n  `\"zip_code`\": `\"<string>`\",\n  `\"city`\": `\"<string>`\",\n  `\"country`\": `\"<string>`\",\n  `\"lang`\": `\"<string>`\",\n  `\"onboarding_channel`\": `\"<string>`\",\n  `\"referred_by`\": `\"<integer>`\",\n  `\"github_login_name`\": `\"<string>`\",\n  `\"count_repo_gen`\": 0\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/users' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/users\"\n\npayload = json.dumps({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": False,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": False,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/users\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/users\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"email\": \"<string>\",\n    \"password\": \"<string>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/users\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"552\"\n)\nparams = \"{\n  \\\"email\\\": \\\"<string>\\\",\n  \\\"password\\\": \\\"<string>\\\",\n  \\\"first_name\\\": \\\"<string>\\\",\n  \\\"last_name\\\": \\\"<string>\\\",\n  \\\"is_active\\\": false,\n  \\\"user_role\\\": \\\"VIEWER\\\",\n  \\\"github_login_id\\\": \\\"<string>\\\",\n  \\\"google_login_id\\\": \\\"<string>\\\",\n  \\\"img_url\\\": \\\"<string>\\\",\n  \\\"phone\\\": {},\n  \\\"birthdate\\\": \\\"<date>\\\",\n  \\\"gender\\\": \\\"<string>\\\",\n  \\\"address\\\": \\\"<string>\\\",\n  \\\"zip_code\\\": \\\"<string>\\\",\n  \\\"city\\\": \\\"<string>\\\",\n  \\\"country\\\": \\\"<string>\\\",\n  \\\"lang\\\": \\\"<string>\\\",\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\n  \\\"referred_by\\\": \\\"<integer>\\\",\n  \\\"github_login_name\\\": \\\"<string>\\\",\n  \\\"count_repo_gen\\\": 0\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/users\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '552'\n)\n\nbody = '{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/users\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/users' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"email\": \"<string>\",\n  \"password\": \"<string>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}' \\\n   '{{baseUrl}}/api/v1/users'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/users\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/user": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "User Me",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "user_me_api_v1_user_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "blob",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Blob"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/user?blob=false\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/user?blob=false\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/user?blob=false' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/user?blob=false\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/user?blob=false',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/user?blob=false'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/user?blob=false\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/user?blob=false HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/user?blob=false\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/user?blob=false\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/user?blob=false\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/user?blob=false\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/user?blob=false\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/user?blob=false\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/user?blob=false',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/user?blob=false',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/user?blob=false',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/user?blob=false')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/user?blob=false\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/user?blob=false\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/user?blob=false', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/user?blob=false');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/user?blob=false',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/user?blob=false');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/user?blob=false' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/user?blob=false\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/user?blob=false\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/user?blob=false\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/user?blob=false\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/user?blob=false\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/user?blob=false\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/user?blob=false' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/user?blob=false'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/user?blob=false\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/users/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "User Details",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "user_details_api_v1_users__user_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "User Delete",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "user_delete_api_v1_users__user_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response User Delete Api V1 Users  User Id  Delete"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/admin": {
      "put": {
        "tags": [
          "users"
        ],
        "summary": "User Update Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "user_update_admin_api_v1_users_admin_put",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Put, \"{{baseUrl}}/api/v1/users/admin\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0,\\n  \\\"password\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/users/admin\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Put);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"is_active\"\": false,\" + \"\\n\" +\n@\"  \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"  \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"phone\"\": {},\" + \"\\n\" +\n@\"  \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"  \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"  \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request PUT '{{baseUrl}}/api/v1/users/admin' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"PUT\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/users/admin\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0,\\n  \\\"password\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/users/admin',\n  options: Options(\n    method: 'PUT',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('PUT', Uri.parse('{{baseUrl}}/api/v1/users/admin'));\nrequest.body = json.encode({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/users/admin\"\n  method := \"PUT\"\n\n  payload := strings.NewReader(`{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "PUT /api/v1/users/admin HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 573\n\n{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"PUT\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/users/admin\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "var data = JSON.stringify({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"PUT\", \"{{baseUrl}}/api/v1/users/admin\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/users/admin\",\n  \"method\": \"PUT\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0,\\n  \\\"password\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users/admin\")\n  .method(\"PUT\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.put(\"{{baseUrl}}/api/v1/users/admin\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0,\\n  \\\"password\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0,\\n  \\\"password\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users/admin\")\n  .put(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n});\n\nlet config = {\n  method: 'put',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/users/admin',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'PUT',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/users/admin',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'PUT',\n  'url': '{{baseUrl}}/api/v1/users/admin',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('PUT', '{{baseUrl}}/api/v1/users/admin')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/users/admin\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0,\\n  \\\"password\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"PUT\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0,\\n  \\\"password\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/users/admin\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `PUT uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '573'\n];\n$body = '{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}';\n$request = new Request('PUT', '{{baseUrl}}/api/v1/users/admin', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/users/admin');\n$request->setMethod(HTTP_Request2::METHOD_PUT);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"email\": \"<string>\",\\n  \"id\": \"<integer>\",\\n  \"first_name\": \"<string>\",\\n  \"last_name\": \"<string>\",\\n  \"is_active\": false,\\n  \"user_role\": \"VIEWER\",\\n  \"github_login_id\": \"<string>\",\\n  \"google_login_id\": \"<string>\",\\n  \"img_url\": \"<string>\",\\n  \"phone\": {},\\n  \"birthdate\": \"<date>\",\\n  \"gender\": \"<string>\",\\n  \"address\": \"<string>\",\\n  \"zip_code\": \"<string>\",\\n  \"city\": \"<string>\",\\n  \"country\": \"<string>\",\\n  \"lang\": \"<string>\",\\n  \"onboarding_channel\": \"<string>\",\\n  \"referred_by\": \"<integer>\",\\n  \"github_login_name\": \"<string>\",\\n  \"count_repo_gen\": 0,\\n  \"password\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/users/admin',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'PUT',\n  CURLOPT_POSTFIELDS =>'{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/users/admin');\n$request->setRequestMethod('PUT');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"email`\": `\"<string>`\",\n  `\"id`\": `\"<integer>`\",\n  `\"first_name`\": `\"<string>`\",\n  `\"last_name`\": `\"<string>`\",\n  `\"is_active`\": false,\n  `\"user_role`\": `\"VIEWER`\",\n  `\"github_login_id`\": `\"<string>`\",\n  `\"google_login_id`\": `\"<string>`\",\n  `\"img_url`\": `\"<string>`\",\n  `\"phone`\": {},\n  `\"birthdate`\": `\"<date>`\",\n  `\"gender`\": `\"<string>`\",\n  `\"address`\": `\"<string>`\",\n  `\"zip_code`\": `\"<string>`\",\n  `\"city`\": `\"<string>`\",\n  `\"country`\": `\"<string>`\",\n  `\"lang`\": `\"<string>`\",\n  `\"onboarding_channel`\": `\"<string>`\",\n  `\"referred_by`\": `\"<integer>`\",\n  `\"github_login_name`\": `\"<string>`\",\n  `\"count_repo_gen`\": 0,\n  `\"password`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/users/admin' -Method 'PUT' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/users/admin\"\n\npayload = json.dumps({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": False,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"PUT\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": False,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"PUT\", \"/api/v1/users/admin\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/users/admin\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Put.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::PUT, \"{{baseUrl}}/api/v1/users/admin\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"573\"\n)\nparams = \"{\n  \\\"email\\\": \\\"<string>\\\",\n  \\\"id\\\": \\\"<integer>\\\",\n  \\\"first_name\\\": \\\"<string>\\\",\n  \\\"last_name\\\": \\\"<string>\\\",\n  \\\"is_active\\\": false,\n  \\\"user_role\\\": \\\"VIEWER\\\",\n  \\\"github_login_id\\\": \\\"<string>\\\",\n  \\\"google_login_id\\\": \\\"<string>\\\",\n  \\\"img_url\\\": \\\"<string>\\\",\n  \\\"phone\\\": {},\n  \\\"birthdate\\\": \\\"<date>\\\",\n  \\\"gender\\\": \\\"<string>\\\",\n  \\\"address\\\": \\\"<string>\\\",\n  \\\"zip_code\\\": \\\"<string>\\\",\n  \\\"city\\\": \\\"<string>\\\",\n  \\\"country\\\": \\\"<string>\\\",\n  \\\"lang\\\": \\\"<string>\\\",\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\n  \\\"referred_by\\\": \\\"<integer>\\\",\n  \\\"github_login_name\\\": \\\"<string>\\\",\n  \\\"count_repo_gen\\\": 0,\n  \\\"password\\\": \\\"<string>\\\"\n}\"\nres <- httpPUT(\"{{baseUrl}}/api/v1/users/admin\", params, httpheader = headers, followlocation = TRUE)\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '573'\n)\n\nbody = '{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}';\n\nres <- VERB(\"PUT\", url = \"{{baseUrl}}/api/v1/users/admin\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}'| http  --follow --timeout 3600 PUT '{{baseUrl}}/api/v1/users/admin' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method PUT \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"email\": \"<string>\",\n  \"id\": \"<integer>\",\n  \"first_name\": \"<string>\",\n  \"last_name\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0,\n  \"password\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/users/admin'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"first_name\\\": \\\"<string>\\\",\\n  \\\"last_name\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0,\\n  \\\"password\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/users/admin\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"PUT\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/users/{user_id}/redis/reset": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Reset Openai Usage",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "reset_openai_usage_api_v1_users__user_id__redis_reset_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/redis/ttl": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "User Ttl",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "user_ttl_api_v1_users__user_id__redis_ttl_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response User Ttl Api V1 Users  User Id  Redis Ttl Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{user_id}/redis/get": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Redis Get",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "redis_get_api_v1_users__user_id__redis_get_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Redis Get Api V1 Users  User Id  Redis Get Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/redis/get": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Redis Get All",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "redis_get_all_api_v1_users_redis_get_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/users/redis/get\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/users/redis/get\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/users/redis/get' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/users/redis/get\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/users/redis/get',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/users/redis/get'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/users/redis/get\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/users/redis/get HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/users/redis/get\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/users/redis/get\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/users/redis/get\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users/redis/get\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/users/redis/get\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/users/redis/get\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/users/redis/get',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/users/redis/get',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/users/redis/get',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/users/redis/get')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/users/redis/get\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/users/redis/get\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/users/redis/get', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/users/redis/get');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/users/redis/get',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/users/redis/get');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/users/redis/get' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/users/redis/get\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/users/redis/get\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/users/redis/get\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/users/redis/get\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/users/redis/get\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/users/redis/get\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/users/redis/get' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/users/redis/get'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/users/redis/get\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/apiToken/create": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Generate Api Token",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "generate_api_token_api_v1_apiToken_create_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiKeyResponseSchema"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/apiToken/create\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/apiToken/create\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/apiToken/create' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/apiToken/create\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/apiToken/create',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/apiToken/create'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/apiToken/create\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/apiToken/create HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/apiToken/create\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/apiToken/create\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/apiToken/create\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/apiToken/create\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/apiToken/create\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/apiToken/create\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/apiToken/create',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/apiToken/create',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/apiToken/create',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/apiToken/create')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/apiToken/create\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/apiToken/create\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/apiToken/create', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/apiToken/create');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/apiToken/create',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/apiToken/create');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/apiToken/create' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/apiToken/create\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/apiToken/create\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/apiToken/create\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/apiToken/create\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/apiToken/create\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/apiToken/create\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/apiToken/create' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/apiToken/create'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/apiToken/create\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/apiToken/get/all": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get Api Token",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_api_token_api_v1_apiToken_get_all_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserApiKeyResponseSchema"
                  },
                  "type": "array",
                  "title": "Response Get Api Token Api V1 Apitoken Get All Get"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/apiToken/get/all\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/apiToken/get/all\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/apiToken/get/all' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/apiToken/get/all\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/apiToken/get/all',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/apiToken/get/all'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/apiToken/get/all\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/apiToken/get/all HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/apiToken/get/all\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/apiToken/get/all\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/apiToken/get/all\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/apiToken/get/all\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/apiToken/get/all\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/apiToken/get/all\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/apiToken/get/all',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/apiToken/get/all',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/apiToken/get/all',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/apiToken/get/all')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/apiToken/get/all\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/apiToken/get/all\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/apiToken/get/all', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/apiToken/get/all');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/apiToken/get/all',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/apiToken/get/all');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/apiToken/get/all' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/apiToken/get/all\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/apiToken/get/all\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/apiToken/get/all\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/apiToken/get/all\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/apiToken/get/all\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/apiToken/get/all\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/apiToken/get/all' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/apiToken/get/all'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/apiToken/get/all\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/apiToken/{id}/delete": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Delete Api Token",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "delete_api_token_api_v1_apiToken__id__delete_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserApiKeyResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/apiToken/{id}/toggle": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Toggle Api Token",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "toggle_api_token_api_v1_apiToken__id__toggle_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/users/{id}/requestLog": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Request Log Api Token",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "request_log_api_token_api_v1_users__id__requestLog_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/v1/user/referred": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Referred By",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "referred_by_api_v1_user_referred_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/user/referred?user_id=%3Cinteger%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/user/referred?user_id=%3Cinteger%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/user/referred?user_id=<integer>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/user/referred?user_id=<integer>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/user/referred?user_id=%3Cinteger%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/user/referred?user_id=<integer> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/user/referred?user_id=%3Cinteger%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/user/referred?user_id=%3Cinteger%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/user/referred?user_id=<integer>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/user/referred?user_id=%3Cinteger%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/user/referred?user_id=<integer>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/user/referred?user_id=<integer>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/user/referred?user_id=%3Cinteger%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/user/referred?user_id=%3Cinteger%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/user/referred?user_id=<integer>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/user/referred?user_id=<integer>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/user/referred?user_id=%3Cinteger%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/user/referred?user_id=<integer>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/user/referred?user_id=<integer>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/user/referred?user_id=%3Cinteger%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/user/referred?user_id=<integer>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/user/referred?user_id=<integer>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/user/referred?user_id=<integer>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/user/referred?user_id=%3Cinteger%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/user/email/update/request": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Update Email",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "update_email_api_v1_user_email_update_request_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/user/email/update/request\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/user/email/update/request\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/user/email/update/request' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"email\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/user/email/update/request\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"email\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/user/email/update/request',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/user/email/update/request'));\nrequest.body = json.encode({\n  \"email\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/user/email/update/request\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"email\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/user/email/update/request HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 25\n\n{\n  \"email\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"email\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/user/email/update/request\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"email\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/user/email/update/request\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/user/email/update/request\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"email\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/user/email/update/request\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/user/email/update/request\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/user/email/update/request\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"email\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/user/email/update/request',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/user/email/update/request',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"email\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/user/email/update/request',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"email\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/user/email/update/request')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"email\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/user/email/update/request\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/user/email/update/request\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '25'\n];\n$body = '{\n  \"email\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/user/email/update/request', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/user/email/update/request');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"email\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/user/email/update/request',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"email\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/user/email/update/request');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"email\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"email`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/user/email/update/request' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/user/email/update/request\"\n\npayload = json.dumps({\n  \"email\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"email\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/user/email/update/request\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/user/email/update/request\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"email\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"email\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/user/email/update/request\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"25\"\n)\nparams = \"{\n  \\\"email\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/user/email/update/request\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '25'\n)\n\nbody = '{\n  \"email\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/user/email/update/request\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"email\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/user/email/update/request' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"email\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/user/email/update/request'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/user/email/update/request\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/user/email/update/verify": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Update Email Verify",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "update_email_verify_api_v1_user_email_update_verify_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySecurityCodeSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/user/email/update/verify\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/user/email/update/verify\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/user/email/update/verify' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/user/email/update/verify\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/user/email/update/verify',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/user/email/update/verify'));\nrequest.body = json.encode({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/user/email/update/verify\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/user/email/update/verify HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 47\n\n{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/user/email/update/verify\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/user/email/update/verify\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/user/email/update/verify\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/user/email/update/verify\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/user/email/update/verify\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/user/email/update/verify\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/user/email/update/verify',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/user/email/update/verify',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/user/email/update/verify',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/user/email/update/verify')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/user/email/update/verify\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/user/email/update/verify\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '47'\n];\n$body = '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/user/email/update/verify', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/user/email/update/verify');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"code\": \"<string>\",\\n  \"email\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/user/email/update/verify',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/user/email/update/verify');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"code`\": `\"<string>`\",\n  `\"email`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/user/email/update/verify' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/user/email/update/verify\"\n\npayload = json.dumps({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/user/email/update/verify\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/user/email/update/verify\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"code\": \"<string>\",\n    \"email\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/user/email/update/verify\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"47\"\n)\nparams = \"{\n  \\\"code\\\": \\\"<string>\\\",\n  \\\"email\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/user/email/update/verify\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '47'\n)\n\nbody = '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/user/email/update/verify\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/user/email/update/verify' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/user/email/update/verify'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/user/email/update/verify\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/health": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Basic",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "basic_api_v1_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/health\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/health\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/health' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/health\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/health',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/health'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/health\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/health HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/health\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/health\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/health\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/health\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/health\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/health\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/health',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/health',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/health',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/health')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/health\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/health\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/health', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/health');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/health',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/health');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/health' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/health\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/health\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/health\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/health\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/health\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/health\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/health' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/health'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/health\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      },
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Root",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "root_api_v1_health_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/health\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/health\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request POST '{{baseUrl}}/api/v1/health' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/health\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/health',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/health'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/health\"\n  method := \"POST\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/health HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/health\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/health\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/health\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/health\")\n  .method(\"POST\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/health\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"text/plain\".toMediaType()\nval body = \"\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/health\")\n  .post(body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/health',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/health',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/health',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/health')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/health\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/health\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('POST', '{{baseUrl}}/api/v1/health', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/health');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/health',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/health');\n$request->setRequestMethod('POST');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/health' -Method 'POST' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/health\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"POST\", \"/api/v1/health\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/health\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/health\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- postForm(\"{{baseUrl}}/api/v1/health\", .opts=list(httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/health\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 POST '{{baseUrl}}/api/v1/health' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/health'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/health\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"POST\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/health/all": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Health All",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "health_all_api_v1_health_all_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/health/all\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/health/all\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/health/all' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/health/all\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/health/all',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/health/all'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/health/all\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/health/all HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/health/all\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/health/all\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/health/all\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/health/all\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/health/all\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/health/all\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/health/all',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/health/all',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/health/all',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/health/all')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/health/all\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/health/all\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/health/all', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/health/all');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/health/all',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/health/all');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/health/all' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/health/all\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/health/all\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/health/all\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/health/all\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/health/all\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/health/all\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/health/all' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/health/all'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/health/all\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v2/db/init": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Db Init",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "db_init_api_v2_db_init_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v2/db/init\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v2/db/init\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v2/db/init' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v2/db/init\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v2/db/init',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v2/db/init'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v2/db/init\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v2/db/init HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v2/db/init\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v2/db/init\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v2/db/init\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v2/db/init\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v2/db/init\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v2/db/init\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v2/db/init',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v2/db/init',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v2/db/init',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v2/db/init')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v2/db/init\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v2/db/init\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v2/db/init', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v2/db/init');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v2/db/init',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v2/db/init');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v2/db/init' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v2/db/init\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v2/db/init\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v2/db/init\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v2/db/init\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v2/db/init\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v2/db/init\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v2/db/init' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v2/db/init'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v2/db/init\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/contact": {
      "post": {
        "tags": [
          "test"
        ],
        "summary": "Contact Us",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "contact_us_api_contact_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ContactUsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/contact\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"message\\\": \\\"\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/contact\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"\"\",\" + \"\\n\" +\n@\"  \"\"name\"\": \"\"\"\",\" + \"\\n\" +\n@\"  \"\"message\"\": \"\"\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/contact' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/contact\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"message\\\": \\\"\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/contact',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/contact'));\nrequest.body = json.encode({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/contact\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/contact HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 48\n\n{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/contact\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/contact\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/contact\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"email\": \"\",\n    \"name\": \"\",\n    \"message\": \"\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"message\\\": \\\"\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/contact\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/contact\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"message\\\": \\\"\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"message\\\": \\\"\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/contact\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/contact',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/contact',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/contact',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"email\": \"\",\n    \"name\": \"\",\n    \"message\": \"\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/contact')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"email\": \"\",\n    \"name\": \"\",\n    \"message\": \"\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/contact\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"message\\\": \\\"\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"message\\\": \\\"\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/contact\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '48'\n];\n$body = '{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/contact', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/contact');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"email\": \"\",\\n  \"name\": \"\",\\n  \"message\": \"\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/contact',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/contact');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"email`\": `\"`\",\n  `\"name`\": `\"`\",\n  `\"message`\": `\"`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/contact' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/contact\"\n\npayload = json.dumps({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/contact\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/contact\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"email\": \"\",\n    \"name\": \"\",\n    \"message\": \"\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/contact\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"48\"\n)\nparams = \"{\n  \\\"email\\\": \\\"\\\",\n  \\\"name\\\": \\\"\\\",\n  \\\"message\\\": \\\"\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/contact\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '48'\n)\n\nbody = '{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/contact\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/contact' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"email\": \"\",\n  \"name\": \"\",\n  \"message\": \"\"\n}' \\\n   '{{baseUrl}}/api/contact'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"email\\\": \\\"\\\",\\n  \\\"name\\\": \\\"\\\",\\n  \\\"message\\\": \\\"\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/contact\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/privacy-policy": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Privacy Policy",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "privacy_policy_api_privacy_policy_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/toc": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Toc",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "toc_api_toc_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/toc\");\nrequest.Headers.Add(\"Accept\", \"text/html\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/toc\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"text/html\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/toc' \\\n--header 'Accept: text/html'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/toc\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: text/html\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/toc',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/toc'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/toc\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"text/html\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/toc HTTP/1.1\nHost: {{baseUrl}}\nAccept: text/html",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"text/html\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/toc\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/toc\");\nxhr.setRequestHeader(\"Accept\", \"text/html\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/toc\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"text/html\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/toc\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"text/html\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/toc\")\n  .header(\"Accept\", \"text/html\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/toc\")\n  .addHeader(\"Accept\", \"text/html\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/toc',\n  headers: { \n    'Accept': 'text/html'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/toc',\n  'headers': {\n    'Accept': 'text/html'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/toc',\n  'headers': {\n    'Accept': 'text/html'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/toc')\n  .headers({\n    'Accept': 'text/html'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/toc\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"text/html\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/toc\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"text/html\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'text/html'\n];\n$request = new Request('GET', '{{baseUrl}}/api/toc', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/toc');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'text/html'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/toc',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: text/html'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/toc');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'text/html'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"text/html\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/toc' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/toc\"\n\npayload = {}\nheaders = {\n  'Accept': 'text/html'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'text/html'\n}\nconn.request(\"GET\", \"/api/toc\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/toc\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"text/html\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"text/html\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/toc\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"text/html\"\n)\nres <- getURL(\"{{baseUrl}}/api/toc\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'text/html'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/toc\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/toc' \\\n Accept:'text/html'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: text/html' \\\n   '{{baseUrl}}/api/toc'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/toc\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"text/html\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/refund-policy": {
      "get": {
        "tags": [
          "test"
        ],
        "summary": "Refund",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "refund_api_refund_policy_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "operationId": "login_api_login_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_api_login_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/login\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar collection = new List<KeyValuePair<string, string>>();\ncollection.Add(new(\"username\", \"<string>\"));\ncollection.Add(new(\"password\", \"<string>\"));\ncollection.Add(new(\"grant_type\", \"password\"));\ncollection.Add(new(\"scope\", \"\"));\ncollection.Add(new(\"client_id\", \"<string>\"));\ncollection.Add(new(\"client_secret\", \"<string>\"));\nvar content = new FormUrlEncodedContent(collection);\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/login\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nrequest.AddParameter(\"username\", \"<string>\");\nrequest.AddParameter(\"password\", \"<string>\");\nrequest.AddParameter(\"grant_type\", \"password\");\nrequest.AddParameter(\"scope\", \"\");\nrequest.AddParameter(\"client_id\", \"<string>\");\nrequest.AddParameter(\"client_secret\", \"<string>\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/login' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Accept: application/json' \\\n--data-urlencode 'username=<string>' \\\n--data-urlencode 'password=<string>' \\\n--data-urlencode 'grant_type=password' \\\n--data-urlencode 'scope=' \\\n--data-urlencode 'client_id=<string>' \\\n--data-urlencode 'client_secret=<string>'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/login\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/x-www-form-urlencoded\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/x-www-form-urlencoded',\n  'Accept': 'application/json'\n};\nvar data = {\n  'username': '<string>',\n  'password': '<string>',\n  'grant_type': 'password',\n  'scope': '',\n  'client_id': '<string>',\n  'client_secret': '<string>'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/login',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/x-www-form-urlencoded',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/login'));\nrequest.bodyFields = {\n  'username': '<string>',\n  'password': '<string>',\n  'grant_type': 'password',\n  'scope': '',\n  'client_id': '<string>',\n  'client_secret': '<string>'\n};\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/login\"\n  method := \"POST\"\n\n  payload := strings.NewReader(\"username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E\")\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/login HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/x-www-form-urlencoded\nAccept: application/json\nContent-Length: 120\n\nusername=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/x-www-form-urlencoded\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst urlencoded = new URLSearchParams();\nurlencoded.append(\"username\", \"<string>\");\nurlencoded.append(\"password\", \"<string>\");\nurlencoded.append(\"grant_type\", \"password\");\nurlencoded.append(\"scope\", \"\");\nurlencoded.append(\"client_id\", \"<string>\");\nurlencoded.append(\"client_secret\", \"<string>\");\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: urlencoded,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/login\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = \"username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E\";\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/login\");\nxhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/login\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/x-www-form-urlencoded\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": {\n    \"username\": \"<string>\",\n    \"password\": \"<string>\",\n    \"grant_type\": \"password\",\n    \"scope\": \"\",\n    \"client_id\": \"<string>\",\n    \"client_secret\": \"<string>\"\n  }\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/x-www-form-urlencoded\");\nRequestBody body = RequestBody.create(mediaType, \"username=<string>&password=<string>&grant_type=password&scope=&client_id=<string>&client_secret=<string>\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/login\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/login\")\n  .header(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .field(\"username\", \"<string>\")\n  .field(\"password\", \"<string>\")\n  .field(\"grant_type\", \"password\")\n  .field(\"scope\", \"\")\n  .field(\"client_id\", \"<string>\")\n  .field(\"client_secret\", \"<string>\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/x-www-form-urlencoded\".toMediaType()\nval body = \"username=<string>&password=<string>&grant_type=password&scope=&client_id=<string>&client_secret=<string>\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/login\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/x-www-form-urlencoded\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nconst qs = require('qs');\nlet data = qs.stringify({\n  'username': '<string>',\n  'password': '<string>',\n  'grant_type': 'password',\n  'scope': '',\n  'client_id': '<string>',\n  'client_secret': '<string>' \n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/login',\n  headers: { \n    'Content-Type': 'application/x-www-form-urlencoded', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar qs = require('querystring');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/login',\n  'headers': {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = qs.stringify({\n  'username': '<string>',\n  'password': '<string>',\n  'grant_type': 'password',\n  'scope': '',\n  'client_id': '<string>',\n  'client_secret': '<string>'\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/login',\n  'headers': {\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  form: {\n    'username': '<string>',\n    'password': '<string>',\n    'grant_type': 'password',\n    'scope': '',\n    'client_id': '<string>',\n    'client_secret': '<string>'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/login')\n  .headers({\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send('username=<string>')\n  .send('password=<string>')\n  .send('grant_type=password')\n  .send('scope=')\n  .send('client_id=<string>')\n  .send('client_secret=<string>')\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/login\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/x-www-form-urlencoded\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSMutableData *postData = [[NSMutableData alloc] initWithData:[@\"username=<string>\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&password=<string>\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&grant_type=password\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&scope=\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&client_id=<string>\" dataUsingEncoding:NSUTF8StringEncoding]];\n[postData appendData:[@\"&client_secret=<string>\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/login\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/x-www-form-urlencoded\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/x-www-form-urlencoded',\n  'Accept' => 'application/json',\n  'Content-Length' => '120'\n];\n$options = [\n'form_params' => [\n  'username' => '<string>',\n  'password' => '<string>',\n  'grant_type' => 'password',\n  'scope' => '',\n  'client_id' => '<string>',\n  'client_secret' => '<string>'\n]];\n$request = new Request('POST', '{{baseUrl}}/api/login', $headers);\n$res = $client->sendAsync($request, $options)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/login');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/x-www-form-urlencoded',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->addPostParameter(array(\n  'username' => '<string>',\n  'password' => '<string>',\n  'grant_type' => 'password',\n  'scope' => '',\n  'client_id' => '<string>',\n  'client_secret' => '<string>'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/login',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS => 'username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/x-www-form-urlencoded',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/login');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append(new http\\QueryString(array(\n  'username' => '<string>',\n  'password' => '<string>',\n  'grant_type' => 'password',\n  'scope' => '',\n  'client_id' => '<string>',\n  'client_secret' => '<string>')));$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/x-www-form-urlencoded',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/x-www-form-urlencoded\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = \"username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E\"\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/login' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/login\"\n\npayload = 'username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E'\nheaders = {\n  'Content-Type': 'application/x-www-form-urlencoded',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = 'username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E'\nheaders = {\n  'Content-Type': 'application/x-www-form-urlencoded',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/login\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/login\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/x-www-form-urlencoded\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = \"username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/x-www-form-urlencoded\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let mut params = std::collections::HashMap::new();\n    params.insert(\"username\", \"<string>\");\n    params.insert(\"password\", \"<string>\");\n    params.insert(\"grant_type\", \"password\");\n    params.insert(\"scope\", \"\");\n    params.insert(\"client_id\", \"<string>\");\n    params.insert(\"client_secret\", \"<string>\");\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/login\")\n        .headers(headers)\n        .form(&params);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/x-www-form-urlencoded\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"120\"\n)\nparams = c(\n  \"username\" = \"<string>\",\n  \"password\" = \"<string>\",\n  \"grant_type\" = \"password\",\n  \"scope\" = \"\",\n  \"client_id\" = \"<string>\",\n  \"client_secret\" = \"<string>\"\n)\nres <- postForm(\"{{baseUrl}}/api/login\", .params = params, .opts=list(httpheader = headers, followlocation = TRUE), style = \"post\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/x-www-form-urlencoded',\n  'Accept' = 'application/json',\n  'Content-Length' = '120'\n)\n\nbody = list(\n  'username' = '<string>',\n  'password' = '<string>',\n  'grant_type' = 'password',\n  'scope' = '',\n  'client_id' = '<string>',\n  'client_secret' = '<string>'\n)\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/login\", body = body, add_headers(headers), encode = 'form')\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --ignore-stdin --form --follow --timeout 3600 POST '{{baseUrl}}/api/login' \\\n 'username'='<string>' \\\n 'password'='<string>' \\\n 'grant_type'='password' \\\n 'scope'= \\\n 'client_id'='<string>' \\\n 'client_secret'='<string>' \\\n Content-Type:'application/x-www-form-urlencoded' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/x-www-form-urlencoded' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data 'username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E' \\\n   '{{baseUrl}}/api/login'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"username=%3Cstring%3E&password=%3Cstring%3E&grant_type=password&scope=&client_id=%3Cstring%3E&client_secret=%3Cstring%3E\"\nlet postData =  parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/login\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/x-www-form-urlencoded\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/refreshToken": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Refresh Token",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "refresh_token_api_refreshToken_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/refreshToken\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/refreshToken\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/refreshToken' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/refreshToken\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/refreshToken',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/refreshToken'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/refreshToken\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/refreshToken HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/refreshToken\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/refreshToken\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/refreshToken\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/refreshToken\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/refreshToken\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/refreshToken\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/refreshToken',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/refreshToken',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/refreshToken',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/refreshToken')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/refreshToken\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/refreshToken\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/refreshToken', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/refreshToken');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/refreshToken',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/refreshToken');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/refreshToken' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/refreshToken\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/refreshToken\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/refreshToken\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/refreshToken\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/refreshToken\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/refreshToken\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/refreshToken' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/refreshToken'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/refreshToken\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/apiKey/get/token": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get Token From Api Key",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_token_from_api_key_api_apiKey_get_token_get",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Api-Key"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/apiKey/get/token\");\nrequest.Headers.Add(\"api-key\", \"\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/apiKey/get/token\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"api-key\", \"\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/apiKey/get/token' \\\n--header 'api-key;' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/apiKey/get/token\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: \");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '',\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/apiKey/get/token',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '',\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/apiKey/get/token'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/apiKey/get/token\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/apiKey/get/token HTTP/1.1\nHost: {{baseUrl}}\napi-key: \nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"\");\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/apiKey/get/token\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/apiKey/get/token\");\nxhr.setRequestHeader(\"api-key\", \"\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/apiKey/get/token\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"\",\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/apiKey/get/token\")\n  .method(\"GET\", body)\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/apiKey/get/token\")\n  .header(\"api-key\", \"\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/apiKey/get/token\")\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/apiKey/get/token',\n  headers: { \n    'api-key': '', \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/apiKey/get/token',\n  'headers': {\n    'api-key': '',\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/apiKey/get/token',\n  'headers': {\n    'api-key': '',\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/apiKey/get/token')\n  .headers({\n    'api-key': '',\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/apiKey/get/token\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"\",\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/apiKey/get/token\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '',\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/apiKey/get/token', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/apiKey/get/token');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '',\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/apiKey/get/token',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: ',\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/apiKey/get/token');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '',\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"\")\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/apiKey/get/token' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/apiKey/get/token\"\n\npayload = {}\nheaders = {\n  'api-key': '',\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'api-key': '',\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/apiKey/get/token\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/apiKey/get/token\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"api-key\"] = \"\"\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/apiKey/get/token\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"\",\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/apiKey/get/token\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '',\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/apiKey/get/token\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/apiKey/get/token' \\\n api-key: \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'api-key: ' \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/apiKey/get/token'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/apiKey/get/token\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Signup",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "signup_api_signup_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserSignupRequestSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/signup\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/signup\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"firstName\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"lastName\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"password\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"is_active\"\": false,\" + \"\\n\" +\n@\"  \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"  \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"phone\"\": {},\" + \"\\n\" +\n@\"  \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"  \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"count_repo_gen\"\": 0\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/signup' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/signup\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/signup',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/signup'));\nrequest.body = json.encode({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/signup\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/signup HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 550\n\n{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/signup\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/signup\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/signup\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/signup\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/signup\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/signup\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/signup',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/signup',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/signup',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/signup')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/signup\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/signup\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '550'\n];\n$body = '{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}';\n$request = new Request('POST', '{{baseUrl}}/api/signup', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/signup');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"email\": \"<string>\",\\n  \"firstName\": \"<string>\",\\n  \"lastName\": \"<string>\",\\n  \"password\": \"<string>\",\\n  \"is_active\": false,\\n  \"user_role\": \"VIEWER\",\\n  \"github_login_id\": \"<string>\",\\n  \"google_login_id\": \"<string>\",\\n  \"img_url\": \"<string>\",\\n  \"phone\": {},\\n  \"birthdate\": \"<date>\",\\n  \"gender\": \"<string>\",\\n  \"address\": \"<string>\",\\n  \"zip_code\": \"<string>\",\\n  \"city\": \"<string>\",\\n  \"country\": \"<string>\",\\n  \"lang\": \"<string>\",\\n  \"onboarding_channel\": \"<string>\",\\n  \"referred_by\": \"<integer>\",\\n  \"github_login_name\": \"<string>\",\\n  \"count_repo_gen\": 0\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/signup',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/signup');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"email`\": `\"<string>`\",\n  `\"firstName`\": `\"<string>`\",\n  `\"lastName`\": `\"<string>`\",\n  `\"password`\": `\"<string>`\",\n  `\"is_active`\": false,\n  `\"user_role`\": `\"VIEWER`\",\n  `\"github_login_id`\": `\"<string>`\",\n  `\"google_login_id`\": `\"<string>`\",\n  `\"img_url`\": `\"<string>`\",\n  `\"phone`\": {},\n  `\"birthdate`\": `\"<date>`\",\n  `\"gender`\": `\"<string>`\",\n  `\"address`\": `\"<string>`\",\n  `\"zip_code`\": `\"<string>`\",\n  `\"city`\": `\"<string>`\",\n  `\"country`\": `\"<string>`\",\n  `\"lang`\": `\"<string>`\",\n  `\"onboarding_channel`\": `\"<string>`\",\n  `\"referred_by`\": `\"<integer>`\",\n  `\"github_login_name`\": `\"<string>`\",\n  `\"count_repo_gen`\": 0\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/signup' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/signup\"\n\npayload = json.dumps({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": False,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": False,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/signup\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/signup\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"email\": \"<string>\",\n    \"firstName\": \"<string>\",\n    \"lastName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/signup\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"550\"\n)\nparams = \"{\n  \\\"email\\\": \\\"<string>\\\",\n  \\\"firstName\\\": \\\"<string>\\\",\n  \\\"lastName\\\": \\\"<string>\\\",\n  \\\"password\\\": \\\"<string>\\\",\n  \\\"is_active\\\": false,\n  \\\"user_role\\\": \\\"VIEWER\\\",\n  \\\"github_login_id\\\": \\\"<string>\\\",\n  \\\"google_login_id\\\": \\\"<string>\\\",\n  \\\"img_url\\\": \\\"<string>\\\",\n  \\\"phone\\\": {},\n  \\\"birthdate\\\": \\\"<date>\\\",\n  \\\"gender\\\": \\\"<string>\\\",\n  \\\"address\\\": \\\"<string>\\\",\n  \\\"zip_code\\\": \\\"<string>\\\",\n  \\\"city\\\": \\\"<string>\\\",\n  \\\"country\\\": \\\"<string>\\\",\n  \\\"lang\\\": \\\"<string>\\\",\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\n  \\\"referred_by\\\": \\\"<integer>\\\",\n  \\\"github_login_name\\\": \\\"<string>\\\",\n  \\\"count_repo_gen\\\": 0\n}\"\nres <- postForm(\"{{baseUrl}}/api/signup\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '550'\n)\n\nbody = '{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/signup\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/signup' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"email\": \"<string>\",\n  \"firstName\": \"<string>\",\n  \"lastName\": \"<string>\",\n  \"password\": \"<string>\",\n  \"is_active\": false,\n  \"user_role\": \"VIEWER\",\n  \"github_login_id\": \"<string>\",\n  \"google_login_id\": \"<string>\",\n  \"img_url\": \"<string>\",\n  \"phone\": {},\n  \"birthdate\": \"<date>\",\n  \"gender\": \"<string>\",\n  \"address\": \"<string>\",\n  \"zip_code\": \"<string>\",\n  \"city\": \"<string>\",\n  \"country\": \"<string>\",\n  \"lang\": \"<string>\",\n  \"onboarding_channel\": \"<string>\",\n  \"referred_by\": \"<integer>\",\n  \"github_login_name\": \"<string>\",\n  \"count_repo_gen\": 0\n}' \\\n   '{{baseUrl}}/api/signup'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"firstName\\\": \\\"<string>\\\",\\n  \\\"lastName\\\": \\\"<string>\\\",\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": false,\\n  \\\"user_role\\\": \\\"VIEWER\\\",\\n  \\\"github_login_id\\\": \\\"<string>\\\",\\n  \\\"google_login_id\\\": \\\"<string>\\\",\\n  \\\"img_url\\\": \\\"<string>\\\",\\n  \\\"phone\\\": {},\\n  \\\"birthdate\\\": \\\"<date>\\\",\\n  \\\"gender\\\": \\\"<string>\\\",\\n  \\\"address\\\": \\\"<string>\\\",\\n  \\\"zip_code\\\": \\\"<string>\\\",\\n  \\\"city\\\": \\\"<string>\\\",\\n  \\\"country\\\": \\\"<string>\\\",\\n  \\\"lang\\\": \\\"<string>\\\",\\n  \\\"onboarding_channel\\\": \\\"<string>\\\",\\n  \\\"referred_by\\\": \\\"<integer>\\\",\\n  \\\"github_login_name\\\": \\\"<string>\\\",\\n  \\\"count_repo_gen\\\": 0\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/signup\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/forgotPassword": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Forgot Password",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "forgot_password_api_forgotPassword_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/forgotPassword\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/forgotPassword\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/forgotPassword' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"email\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/forgotPassword\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"email\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/forgotPassword',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/forgotPassword'));\nrequest.body = json.encode({\n  \"email\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/forgotPassword\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"email\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/forgotPassword HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 25\n\n{\n  \"email\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"email\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/forgotPassword\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"email\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/forgotPassword\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/forgotPassword\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"email\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/forgotPassword\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/forgotPassword\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/forgotPassword\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"email\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/forgotPassword',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/forgotPassword',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"email\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/forgotPassword',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"email\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/forgotPassword')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"email\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/forgotPassword\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/forgotPassword\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '25'\n];\n$body = '{\n  \"email\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/forgotPassword', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/forgotPassword');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"email\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/forgotPassword',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"email\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/forgotPassword');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"email\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"email`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/forgotPassword' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/forgotPassword\"\n\npayload = json.dumps({\n  \"email\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"email\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/forgotPassword\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/forgotPassword\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"email\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"email\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/forgotPassword\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"25\"\n)\nparams = \"{\n  \\\"email\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/forgotPassword\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '25'\n)\n\nbody = '{\n  \"email\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/forgotPassword\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"email\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/forgotPassword' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"email\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/forgotPassword'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"email\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/forgotPassword\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/verifySecurityCode": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Verify Security Code Request",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "verify_security_code_request_api_verifySecurityCode_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifySecurityCodeSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/verifySecurityCode\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/verifySecurityCode\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/verifySecurityCode' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/verifySecurityCode\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/verifySecurityCode',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/verifySecurityCode'));\nrequest.body = json.encode({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/verifySecurityCode\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/verifySecurityCode HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 47\n\n{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/verifySecurityCode\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/verifySecurityCode\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/verifySecurityCode\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/verifySecurityCode\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/verifySecurityCode\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/verifySecurityCode\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/verifySecurityCode',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/verifySecurityCode',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/verifySecurityCode',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/verifySecurityCode')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/verifySecurityCode\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/verifySecurityCode\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '47'\n];\n$body = '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/verifySecurityCode', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/verifySecurityCode');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"code\": \"<string>\",\\n  \"email\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/verifySecurityCode',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/verifySecurityCode');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"code`\": `\"<string>`\",\n  `\"email`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/verifySecurityCode' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/verifySecurityCode\"\n\npayload = json.dumps({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/verifySecurityCode\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/verifySecurityCode\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"code\": \"<string>\",\n    \"email\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/verifySecurityCode\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"47\"\n)\nparams = \"{\n  \\\"code\\\": \\\"<string>\\\",\n  \\\"email\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/verifySecurityCode\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '47'\n)\n\nbody = '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/verifySecurityCode\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/verifySecurityCode' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/verifySecurityCode'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/verifySecurityCode\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/setNewPassword": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Set New Password",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "set_new_password_api_setNewPassword_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyNewPasswordSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/setNewPassword\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/setNewPassword\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"newPassword\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/setNewPassword' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/setNewPassword\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/setNewPassword',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/setNewPassword'));\nrequest.body = json.encode({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/setNewPassword\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/setNewPassword HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 76\n\n{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/setNewPassword\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/setNewPassword\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/setNewPassword\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\",\n    \"newPassword\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/setNewPassword\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/setNewPassword\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/setNewPassword\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/setNewPassword',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/setNewPassword',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/setNewPassword',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\",\n    \"newPassword\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/setNewPassword')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"code\": \"<string>\",\n    \"email\": \"<string>\",\n    \"newPassword\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/setNewPassword\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/setNewPassword\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '76'\n];\n$body = '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/setNewPassword', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/setNewPassword');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"code\": \"<string>\",\\n  \"email\": \"<string>\",\\n  \"newPassword\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/setNewPassword',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/setNewPassword');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"code`\": `\"<string>`\",\n  `\"email`\": `\"<string>`\",\n  `\"newPassword`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/setNewPassword' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/setNewPassword\"\n\npayload = json.dumps({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/setNewPassword\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/setNewPassword\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"code\": \"<string>\",\n    \"email\": \"<string>\",\n    \"newPassword\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/setNewPassword\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"76\"\n)\nparams = \"{\n  \\\"code\\\": \\\"<string>\\\",\n  \\\"email\\\": \\\"<string>\\\",\n  \\\"newPassword\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/setNewPassword\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '76'\n)\n\nbody = '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/setNewPassword\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/setNewPassword' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"code\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/setNewPassword'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"code\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/setNewPassword\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/setNewPasswordFromOldPassword": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Set New Password From Old Password",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "set_new_password_from_old_password_api_setNewPasswordFromOldPassword_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyNewPasswordWithOldPasswordSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponseSchema"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/setNewPasswordFromOldPassword\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/setNewPasswordFromOldPassword\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"password\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"newPassword\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/setNewPasswordFromOldPassword' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/setNewPasswordFromOldPassword\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/setNewPasswordFromOldPassword',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/setNewPasswordFromOldPassword'));\nrequest.body = json.encode({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/setNewPasswordFromOldPassword\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/setNewPasswordFromOldPassword HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 80\n\n{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/setNewPasswordFromOldPassword\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/setNewPasswordFromOldPassword\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/setNewPasswordFromOldPassword\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"password\": \"<string>\",\n    \"email\": \"<string>\",\n    \"newPassword\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/setNewPasswordFromOldPassword\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/setNewPasswordFromOldPassword\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/setNewPasswordFromOldPassword\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/setNewPasswordFromOldPassword',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/setNewPasswordFromOldPassword',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/setNewPasswordFromOldPassword',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"password\": \"<string>\",\n    \"email\": \"<string>\",\n    \"newPassword\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/setNewPasswordFromOldPassword')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"password\": \"<string>\",\n    \"email\": \"<string>\",\n    \"newPassword\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/setNewPasswordFromOldPassword\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/setNewPasswordFromOldPassword\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '80'\n];\n$body = '{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/setNewPasswordFromOldPassword', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/setNewPasswordFromOldPassword');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"password\": \"<string>\",\\n  \"email\": \"<string>\",\\n  \"newPassword\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/setNewPasswordFromOldPassword',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/setNewPasswordFromOldPassword');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"password`\": `\"<string>`\",\n  `\"email`\": `\"<string>`\",\n  `\"newPassword`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/setNewPasswordFromOldPassword' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/setNewPasswordFromOldPassword\"\n\npayload = json.dumps({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/setNewPasswordFromOldPassword\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/setNewPasswordFromOldPassword\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"password\": \"<string>\",\n    \"email\": \"<string>\",\n    \"newPassword\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/setNewPasswordFromOldPassword\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"80\"\n)\nparams = \"{\n  \\\"password\\\": \\\"<string>\\\",\n  \\\"email\\\": \\\"<string>\\\",\n  \\\"newPassword\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/setNewPasswordFromOldPassword\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '80'\n)\n\nbody = '{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/setNewPasswordFromOldPassword\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/setNewPasswordFromOldPassword' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"password\": \"<string>\",\n  \"email\": \"<string>\",\n  \"newPassword\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/setNewPasswordFromOldPassword'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"password\\\": \\\"<string>\\\",\\n  \\\"email\\\": \\\"<string>\\\",\\n  \\\"newPassword\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/setNewPasswordFromOldPassword\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/activate": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Activate",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "activate_api_activate_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/activate?token=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/activate?token=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/activate?token=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/activate?token=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/activate?token=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/activate?token=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/activate?token=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/activate?token=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/activate?token=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/activate?token=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/activate?token=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/activate?token=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/activate?token=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/activate?token=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/activate?token=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/activate?token=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/activate?token=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/activate?token=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/activate?token=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/activate?token=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/activate?token=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/activate?token=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/activate?token=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/activate?token=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/activate?token=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/activate?token=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/activate?token=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/activate?token=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/activate?token=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/activate?token=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/activate?token=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/activate?token=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/activate?token=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/activate?token=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/generateActivationLink": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Generateactivationlink",
        "operationId": "generateActivationLink_api_generateActivationLink_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/oauth/google/login": {
      "get": {
        "tags": [
          "google_auth"
        ],
        "summary": "Login",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "login_api_oauth_google_login_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/google/login\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/google/login\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/google/login' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/google/login\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/google/login',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/google/login'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/google/login\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/google/login HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/google/login\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/google/login\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/google/login\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/google/login\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/google/login\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/google/login\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/google/login',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/google/login',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/google/login',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/google/login')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/google/login\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/google/login\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/google/login', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/google/login');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/google/login',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/google/login');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/google/login' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/google/login\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/google/login\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/google/login\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/google/login\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/google/login\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/google/login\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/google/login' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/google/login'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/google/login\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/google/callback": {
      "get": {
        "tags": [
          "google_auth"
        ],
        "summary": "Callback",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "callback_api_oauth_google_callback_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/google/callback\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/google/callback\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/google/callback' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/google/callback\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/google/callback',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/google/callback'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/google/callback\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/google/callback HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/google/callback\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/google/callback\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/google/callback\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/google/callback\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/google/callback\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/google/callback\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/google/callback',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/google/callback',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/google/callback',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/google/callback')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/google/callback\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/google/callback\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/google/callback', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/google/callback');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/google/callback',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/google/callback');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/google/callback' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/google/callback\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/google/callback\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/google/callback\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/google/callback\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/google/callback\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/google/callback\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/google/callback' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/google/callback'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/google/callback\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/google/connect": {
      "get": {
        "tags": [
          "google_auth"
        ],
        "summary": "Connect",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "connect_api_oauth_google_connect_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/google/connect\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/google/connect\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/google/connect' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/google/connect\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/google/connect',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/google/connect'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/google/connect\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/google/connect HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/google/connect\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/google/connect\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/google/connect\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/google/connect\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/google/connect\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/google/connect\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/google/connect',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/google/connect',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/google/connect',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/google/connect')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/google/connect\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/google/connect\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/google/connect', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/google/connect');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/google/connect',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/google/connect');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/google/connect' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/google/connect\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/google/connect\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/google/connect\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/google/connect\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/google/connect\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/google/connect\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/google/connect' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/google/connect'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/google/connect\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/github/login": {
      "get": {
        "tags": [
          "github_auth"
        ],
        "summary": "Auth",
        "operationId": "auth_api_oauth_github_login_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/github/login\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/github/login\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/github/login' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/github/login\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/github/login',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/github/login'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/github/login\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/github/login HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/github/login\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/github/login\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/github/login\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/login\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/github/login\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/login\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/github/login',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/github/login',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/github/login',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/github/login')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/github/login\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/github/login\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/github/login', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/github/login');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/github/login',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/github/login');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/github/login' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/github/login\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/github/login\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/github/login\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/github/login\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/github/login\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/github/login\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/github/login' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/github/login'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/github/login\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/github/callback": {
      "get": {
        "tags": [
          "github_auth"
        ],
        "summary": "Callback",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "callback_api_oauth_github_callback_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "State"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/github/callback?code=<string>&state=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/github/callback?code=<string>&state=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/github/callback?code=%3Cstring%3E&state=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/github/connect": {
      "get": {
        "tags": [
          "github_auth"
        ],
        "summary": "Connect",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "connect_api_oauth_github_connect_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/github/connect\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/github/connect\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/github/connect' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/github/connect\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/github/connect',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/github/connect'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/github/connect\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/github/connect HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/github/connect\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/github/connect\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/github/connect\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/connect\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/github/connect\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/connect\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/github/connect',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/github/connect',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/github/connect',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/github/connect')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/github/connect\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/github/connect\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/github/connect', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/github/connect');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/github/connect',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/github/connect');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/github/connect' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/github/connect\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/github/connect\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/github/connect\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/github/connect\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/github/connect\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/github/connect\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/github/connect' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/github/connect'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/github/connect\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/github/install": {
      "get": {
        "tags": [
          "github_auth"
        ],
        "summary": "Install",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "install_api_oauth_github_install_get",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Code"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/github/install?code=<string>&installation_id=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/github/install?code=<string>&installation_id=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/github/install?code=%3Cstring%3E&installation_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/github/user/create/admin": {
      "get": {
        "tags": [
          "github_auth"
        ],
        "summary": "Create Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "create_admin_api_oauth_github_user_create_admin_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "github_login_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Github Login Name"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=<string>&installation_id=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/github/user/create/admin?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/github/user/repo": {
      "get": {
        "tags": [
          "github_auth"
        ],
        "summary": "Get User Repo",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_user_repo_api_oauth_github_user_repo_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "github_login_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Github Login Name"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/github/user/repo?github_login_name=<string>&installation_id=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/github/user/repo?github_login_name=%3Cstring%3E&installation_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/oauth/github/experiment": {
      "get": {
        "tags": [
          "github_auth"
        ],
        "summary": "Experiment",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "experiment_api_oauth_github_experiment_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/oauth/github/experiment\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/oauth/github/experiment\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/oauth/github/experiment' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/oauth/github/experiment\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/oauth/github/experiment',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/oauth/github/experiment'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/oauth/github/experiment\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/oauth/github/experiment HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/oauth/github/experiment\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/oauth/github/experiment\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/oauth/github/experiment\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/experiment\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/oauth/github/experiment\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/oauth/github/experiment\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/oauth/github/experiment',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/oauth/github/experiment',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/oauth/github/experiment',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/oauth/github/experiment')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/oauth/github/experiment\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/oauth/github/experiment\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/oauth/github/experiment', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/oauth/github/experiment');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/oauth/github/experiment',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/oauth/github/experiment');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/oauth/github/experiment' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/oauth/github/experiment\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/oauth/github/experiment\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/oauth/github/experiment\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/oauth/github/experiment\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/oauth/github/experiment\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/oauth/github/experiment\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/oauth/github/experiment' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/oauth/github/experiment'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/oauth/github/experiment\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/bitbucket/registration": {
      "post": {
        "tags": [
          "grouped_auth",
          "bibucket_auth"
        ],
        "summary": "Install Bitbucket",
        "operationId": "install_bitbucket_api_bitbucket_registration_post",
        "parameters": [
          {
            "name": "x-forge-oauth-system",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "X-Forge-Oauth-System"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BitbucketAppInstallation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/bitbucket/registration\");\nrequest.Headers.Add(\"x-forge-oauth-system\", \"\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"id\\\": \\\"<string>\\\",\\n  \\\"app\\\": {\\n    \\\"id\\\": \\\"<string>\\\",\\n    \\\"version\\\": \\\"<string>\\\"\\n  },\\n  \\\"installerAccountId\\\": \\\"\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/bitbucket/registration\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"x-forge-oauth-system\", \"\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"app\"\": {\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"version\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"installerAccountId\"\": \"\"\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/bitbucket/registration' \\\n--header 'x-forge-oauth-system;' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/bitbucket/registration\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"x-forge-oauth-system: \");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"id\\\": \\\"<string>\\\",\\n  \\\"app\\\": {\\n    \\\"id\\\": \\\"<string>\\\",\\n    \\\"version\\\": \\\"<string>\\\"\\n  },\\n  \\\"installerAccountId\\\": \\\"\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'x-forge-oauth-system': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/bitbucket/registration',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'x-forge-oauth-system': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/bitbucket/registration'));\nrequest.body = json.encode({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/bitbucket/registration\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"x-forge-oauth-system\", \"\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/bitbucket/registration HTTP/1.1\nHost: {{baseUrl}}\nx-forge-oauth-system: \nContent-Type: application/json\nAccept: application/json\nContent-Length: 114\n\n{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"x-forge-oauth-system\", \"\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/bitbucket/registration\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/bitbucket/registration\");\nxhr.setRequestHeader(\"x-forge-oauth-system\", \"\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/bitbucket/registration\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"x-forge-oauth-system\": \"\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"id\": \"<string>\",\n    \"app\": {\n      \"id\": \"<string>\",\n      \"version\": \"<string>\"\n    },\n    \"installerAccountId\": \"\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"id\\\": \\\"<string>\\\",\\n  \\\"app\\\": {\\n    \\\"id\\\": \\\"<string>\\\",\\n    \\\"version\\\": \\\"<string>\\\"\\n  },\\n  \\\"installerAccountId\\\": \\\"\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/bitbucket/registration\")\n  .method(\"POST\", body)\n  .addHeader(\"x-forge-oauth-system\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/bitbucket/registration\")\n  .header(\"x-forge-oauth-system\", \"\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"id\\\": \\\"<string>\\\",\\n  \\\"app\\\": {\\n    \\\"id\\\": \\\"<string>\\\",\\n    \\\"version\\\": \\\"<string>\\\"\\n  },\\n  \\\"installerAccountId\\\": \\\"\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"id\\\": \\\"<string>\\\",\\n  \\\"app\\\": {\\n    \\\"id\\\": \\\"<string>\\\",\\n    \\\"version\\\": \\\"<string>\\\"\\n  },\\n  \\\"installerAccountId\\\": \\\"\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/bitbucket/registration\")\n  .post(body)\n  .addHeader(\"x-forge-oauth-system\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/bitbucket/registration',\n  headers: { \n    'x-forge-oauth-system': '', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/bitbucket/registration',\n  'headers': {\n    'x-forge-oauth-system': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/bitbucket/registration',\n  'headers': {\n    'x-forge-oauth-system': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"id\": \"<string>\",\n    \"app\": {\n      \"id\": \"<string>\",\n      \"version\": \"<string>\"\n    },\n    \"installerAccountId\": \"\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/bitbucket/registration')\n  .headers({\n    'x-forge-oauth-system': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"id\": \"<string>\",\n    \"app\": {\n      \"id\": \"<string>\",\n      \"version\": \"<string>\"\n    },\n    \"installerAccountId\": \"\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/bitbucket/registration\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"x-forge-oauth-system\": @\"\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"id\\\": \\\"<string>\\\",\\n  \\\"app\\\": {\\n    \\\"id\\\": \\\"<string>\\\",\\n    \\\"version\\\": \\\"<string>\\\"\\n  },\\n  \\\"installerAccountId\\\": \\\"\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"id\\\": \\\"<string>\\\",\\n  \\\"app\\\": {\\n    \\\"id\\\": \\\"<string>\\\",\\n    \\\"version\\\": \\\"<string>\\\"\\n  },\\n  \\\"installerAccountId\\\": \\\"\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/bitbucket/registration\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"x-forge-oauth-system\" \"\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'x-forge-oauth-system' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '114'\n];\n$body = '{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/bitbucket/registration', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/bitbucket/registration');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'x-forge-oauth-system' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"id\": \"<string>\",\\n  \"app\": {\\n    \"id\": \"<string>\",\\n    \"version\": \"<string>\"\\n  },\\n  \"installerAccountId\": \"\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/bitbucket/registration',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'x-forge-oauth-system: ',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/bitbucket/registration');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'x-forge-oauth-system' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"x-forge-oauth-system\", \"\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"id`\": `\"<string>`\",\n  `\"app`\": {\n    `\"id`\": `\"<string>`\",\n    `\"version`\": `\"<string>`\"\n  },\n  `\"installerAccountId`\": `\"`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/bitbucket/registration' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/bitbucket/registration\"\n\npayload = json.dumps({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n})\nheaders = {\n  'x-forge-oauth-system': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n})\nheaders = {\n  'x-forge-oauth-system': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/bitbucket/registration\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/bitbucket/registration\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"x-forge-oauth-system\"] = \"\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"x-forge-oauth-system\", \"\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"id\": \"<string>\",\n    \"app\": {\n        \"id\": \"<string>\",\n        \"version\": \"<string>\"\n    },\n    \"installerAccountId\": \"\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/bitbucket/registration\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"x-forge-oauth-system\" = \"\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"114\"\n)\nparams = \"{\n  \\\"id\\\": \\\"<string>\\\",\n  \\\"app\\\": {\n    \\\"id\\\": \\\"<string>\\\",\n    \\\"version\\\": \\\"<string>\\\"\n  },\n  \\\"installerAccountId\\\": \\\"\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/bitbucket/registration\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'x-forge-oauth-system' = '',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '114'\n)\n\nbody = '{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/bitbucket/registration\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/bitbucket/registration' \\\n x-forge-oauth-system: \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'x-forge-oauth-system: ' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"id\": \"<string>\",\n  \"app\": {\n    \"id\": \"<string>\",\n    \"version\": \"<string>\"\n  },\n  \"installerAccountId\": \"\"\n}' \\\n   '{{baseUrl}}/api/bitbucket/registration'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"id\\\": \\\"<string>\\\",\\n  \\\"app\\\": {\\n    \\\"id\\\": \\\"<string>\\\",\\n    \\\"version\\\": \\\"<string>\\\"\\n  },\\n  \\\"installerAccountId\\\": \\\"\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/bitbucket/registration\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"\", forHTTPHeaderField: \"x-forge-oauth-system\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/bitbucket/generate/diff/doc": {
      "post": {
        "tags": [
          "grouped_auth",
          "bibucket_auth"
        ],
        "summary": "Root",
        "operationId": "root_api_bitbucket_generate_diff_doc_post",
        "parameters": [
          {
            "name": "x-forge-oauth-system",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "X-Forge-Oauth-System"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BitbucketEvent"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/bitbucket/generate/diff/doc\");\nrequest.Headers.Add(\"x-forge-oauth-system\", \"\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"actor\\\": {\\n    \\\"type\\\": \\\"<string>\\\",\\n    \\\"accountId\\\": \\\"<string>\\\",\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"project\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"workspace\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"pullrequest\\\": {\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"state\\\": \\\"<string>\\\",\\n    \\\"source\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"destination\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"mergeCommit\\\": {\\n      \\\"hash\\\": \\\"<string>\\\"\\n    }\\n  },\\n  \\\"eventType\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/bitbucket/generate/diff/doc\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"x-forge-oauth-system\", \"\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"actor\"\": {\" + \"\\n\" +\n@\"    \"\"type\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"accountId\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"uuid\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"repository\"\": {\" + \"\\n\" +\n@\"    \"\"uuid\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"project\"\": {\" + \"\\n\" +\n@\"    \"\"uuid\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"workspace\"\": {\" + \"\\n\" +\n@\"    \"\"uuid\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"pullrequest\"\": {\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"state\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"source\"\": {\" + \"\\n\" +\n@\"      \"\"branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"      \"\"commit\"\": {\" + \"\\n\" +\n@\"        \"\"hash\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"      }\" + \"\\n\" +\n@\"    },\" + \"\\n\" +\n@\"    \"\"destination\"\": {\" + \"\\n\" +\n@\"      \"\"branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"      \"\"commit\"\": {\" + \"\\n\" +\n@\"        \"\"hash\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"      }\" + \"\\n\" +\n@\"    },\" + \"\\n\" +\n@\"    \"\"mergeCommit\"\": {\" + \"\\n\" +\n@\"      \"\"hash\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"    }\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"eventType\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/bitbucket/generate/diff/doc' \\\n--header 'x-forge-oauth-system;' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/bitbucket/generate/diff/doc\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"x-forge-oauth-system: \");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"actor\\\": {\\n    \\\"type\\\": \\\"<string>\\\",\\n    \\\"accountId\\\": \\\"<string>\\\",\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"project\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"workspace\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"pullrequest\\\": {\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"state\\\": \\\"<string>\\\",\\n    \\\"source\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"destination\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"mergeCommit\\\": {\\n      \\\"hash\\\": \\\"<string>\\\"\\n    }\\n  },\\n  \\\"eventType\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'x-forge-oauth-system': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/bitbucket/generate/diff/doc',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'x-forge-oauth-system': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/bitbucket/generate/diff/doc'));\nrequest.body = json.encode({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/bitbucket/generate/diff/doc\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"x-forge-oauth-system\", \"\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/bitbucket/generate/diff/doc HTTP/1.1\nHost: {{baseUrl}}\nx-forge-oauth-system: \nContent-Type: application/json\nAccept: application/json\nContent-Length: 594\n\n{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"x-forge-oauth-system\", \"\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/bitbucket/generate/diff/doc\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/bitbucket/generate/diff/doc\");\nxhr.setRequestHeader(\"x-forge-oauth-system\", \"\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/bitbucket/generate/diff/doc\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"x-forge-oauth-system\": \"\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"actor\": {\n      \"type\": \"<string>\",\n      \"accountId\": \"<string>\",\n      \"uuid\": \"<string>\"\n    },\n    \"repository\": {\n      \"uuid\": \"<string>\"\n    },\n    \"project\": {\n      \"uuid\": \"<string>\"\n    },\n    \"workspace\": {\n      \"uuid\": \"<string>\"\n    },\n    \"pullrequest\": {\n      \"id\": \"<integer>\",\n      \"state\": \"<string>\",\n      \"source\": {\n        \"branch\": \"<string>\",\n        \"commit\": {\n          \"hash\": \"<string>\"\n        }\n      },\n      \"destination\": {\n        \"branch\": \"<string>\",\n        \"commit\": {\n          \"hash\": \"<string>\"\n        }\n      },\n      \"mergeCommit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"eventType\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"actor\\\": {\\n    \\\"type\\\": \\\"<string>\\\",\\n    \\\"accountId\\\": \\\"<string>\\\",\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"project\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"workspace\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"pullrequest\\\": {\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"state\\\": \\\"<string>\\\",\\n    \\\"source\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"destination\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"mergeCommit\\\": {\\n      \\\"hash\\\": \\\"<string>\\\"\\n    }\\n  },\\n  \\\"eventType\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/bitbucket/generate/diff/doc\")\n  .method(\"POST\", body)\n  .addHeader(\"x-forge-oauth-system\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/bitbucket/generate/diff/doc\")\n  .header(\"x-forge-oauth-system\", \"\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"actor\\\": {\\n    \\\"type\\\": \\\"<string>\\\",\\n    \\\"accountId\\\": \\\"<string>\\\",\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"project\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"workspace\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"pullrequest\\\": {\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"state\\\": \\\"<string>\\\",\\n    \\\"source\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"destination\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"mergeCommit\\\": {\\n      \\\"hash\\\": \\\"<string>\\\"\\n    }\\n  },\\n  \\\"eventType\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"actor\\\": {\\n    \\\"type\\\": \\\"<string>\\\",\\n    \\\"accountId\\\": \\\"<string>\\\",\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"project\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"workspace\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"pullrequest\\\": {\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"state\\\": \\\"<string>\\\",\\n    \\\"source\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"destination\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"mergeCommit\\\": {\\n      \\\"hash\\\": \\\"<string>\\\"\\n    }\\n  },\\n  \\\"eventType\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/bitbucket/generate/diff/doc\")\n  .post(body)\n  .addHeader(\"x-forge-oauth-system\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/bitbucket/generate/diff/doc',\n  headers: { \n    'x-forge-oauth-system': '', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/bitbucket/generate/diff/doc',\n  'headers': {\n    'x-forge-oauth-system': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/bitbucket/generate/diff/doc',\n  'headers': {\n    'x-forge-oauth-system': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"actor\": {\n      \"type\": \"<string>\",\n      \"accountId\": \"<string>\",\n      \"uuid\": \"<string>\"\n    },\n    \"repository\": {\n      \"uuid\": \"<string>\"\n    },\n    \"project\": {\n      \"uuid\": \"<string>\"\n    },\n    \"workspace\": {\n      \"uuid\": \"<string>\"\n    },\n    \"pullrequest\": {\n      \"id\": \"<integer>\",\n      \"state\": \"<string>\",\n      \"source\": {\n        \"branch\": \"<string>\",\n        \"commit\": {\n          \"hash\": \"<string>\"\n        }\n      },\n      \"destination\": {\n        \"branch\": \"<string>\",\n        \"commit\": {\n          \"hash\": \"<string>\"\n        }\n      },\n      \"mergeCommit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"eventType\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/bitbucket/generate/diff/doc')\n  .headers({\n    'x-forge-oauth-system': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"actor\": {\n      \"type\": \"<string>\",\n      \"accountId\": \"<string>\",\n      \"uuid\": \"<string>\"\n    },\n    \"repository\": {\n      \"uuid\": \"<string>\"\n    },\n    \"project\": {\n      \"uuid\": \"<string>\"\n    },\n    \"workspace\": {\n      \"uuid\": \"<string>\"\n    },\n    \"pullrequest\": {\n      \"id\": \"<integer>\",\n      \"state\": \"<string>\",\n      \"source\": {\n        \"branch\": \"<string>\",\n        \"commit\": {\n          \"hash\": \"<string>\"\n        }\n      },\n      \"destination\": {\n        \"branch\": \"<string>\",\n        \"commit\": {\n          \"hash\": \"<string>\"\n        }\n      },\n      \"mergeCommit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"eventType\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/bitbucket/generate/diff/doc\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"x-forge-oauth-system\": @\"\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"actor\\\": {\\n    \\\"type\\\": \\\"<string>\\\",\\n    \\\"accountId\\\": \\\"<string>\\\",\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"project\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"workspace\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"pullrequest\\\": {\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"state\\\": \\\"<string>\\\",\\n    \\\"source\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"destination\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"mergeCommit\\\": {\\n      \\\"hash\\\": \\\"<string>\\\"\\n    }\\n  },\\n  \\\"eventType\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"actor\\\": {\\n    \\\"type\\\": \\\"<string>\\\",\\n    \\\"accountId\\\": \\\"<string>\\\",\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"project\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"workspace\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"pullrequest\\\": {\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"state\\\": \\\"<string>\\\",\\n    \\\"source\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"destination\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"mergeCommit\\\": {\\n      \\\"hash\\\": \\\"<string>\\\"\\n    }\\n  },\\n  \\\"eventType\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/bitbucket/generate/diff/doc\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"x-forge-oauth-system\" \"\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'x-forge-oauth-system' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '594'\n];\n$body = '{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/bitbucket/generate/diff/doc', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/bitbucket/generate/diff/doc');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'x-forge-oauth-system' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"actor\": {\\n    \"type\": \"<string>\",\\n    \"accountId\": \"<string>\",\\n    \"uuid\": \"<string>\"\\n  },\\n  \"repository\": {\\n    \"uuid\": \"<string>\"\\n  },\\n  \"project\": {\\n    \"uuid\": \"<string>\"\\n  },\\n  \"workspace\": {\\n    \"uuid\": \"<string>\"\\n  },\\n  \"pullrequest\": {\\n    \"id\": \"<integer>\",\\n    \"state\": \"<string>\",\\n    \"source\": {\\n      \"branch\": \"<string>\",\\n      \"commit\": {\\n        \"hash\": \"<string>\"\\n      }\\n    },\\n    \"destination\": {\\n      \"branch\": \"<string>\",\\n      \"commit\": {\\n        \"hash\": \"<string>\"\\n      }\\n    },\\n    \"mergeCommit\": {\\n      \"hash\": \"<string>\"\\n    }\\n  },\\n  \"eventType\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/bitbucket/generate/diff/doc',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'x-forge-oauth-system: ',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/bitbucket/generate/diff/doc');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'x-forge-oauth-system' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"x-forge-oauth-system\", \"\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"actor`\": {\n    `\"type`\": `\"<string>`\",\n    `\"accountId`\": `\"<string>`\",\n    `\"uuid`\": `\"<string>`\"\n  },\n  `\"repository`\": {\n    `\"uuid`\": `\"<string>`\"\n  },\n  `\"project`\": {\n    `\"uuid`\": `\"<string>`\"\n  },\n  `\"workspace`\": {\n    `\"uuid`\": `\"<string>`\"\n  },\n  `\"pullrequest`\": {\n    `\"id`\": `\"<integer>`\",\n    `\"state`\": `\"<string>`\",\n    `\"source`\": {\n      `\"branch`\": `\"<string>`\",\n      `\"commit`\": {\n        `\"hash`\": `\"<string>`\"\n      }\n    },\n    `\"destination`\": {\n      `\"branch`\": `\"<string>`\",\n      `\"commit`\": {\n        `\"hash`\": `\"<string>`\"\n      }\n    },\n    `\"mergeCommit`\": {\n      `\"hash`\": `\"<string>`\"\n    }\n  },\n  `\"eventType`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/bitbucket/generate/diff/doc' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/bitbucket/generate/diff/doc\"\n\npayload = json.dumps({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n})\nheaders = {\n  'x-forge-oauth-system': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n})\nheaders = {\n  'x-forge-oauth-system': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/bitbucket/generate/diff/doc\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/bitbucket/generate/diff/doc\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"x-forge-oauth-system\"] = \"\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"x-forge-oauth-system\", \"\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"actor\": {\n        \"type\": \"<string>\",\n        \"accountId\": \"<string>\",\n        \"uuid\": \"<string>\"\n    },\n    \"repository\": {\n        \"uuid\": \"<string>\"\n    },\n    \"project\": {\n        \"uuid\": \"<string>\"\n    },\n    \"workspace\": {\n        \"uuid\": \"<string>\"\n    },\n    \"pullrequest\": {\n        \"id\": \"<integer>\",\n        \"state\": \"<string>\",\n        \"source\": {\n            \"branch\": \"<string>\",\n            \"commit\": {\n                \"hash\": \"<string>\"\n            }\n        },\n        \"destination\": {\n            \"branch\": \"<string>\",\n            \"commit\": {\n                \"hash\": \"<string>\"\n            }\n        },\n        \"mergeCommit\": {\n            \"hash\": \"<string>\"\n        }\n    },\n    \"eventType\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/bitbucket/generate/diff/doc\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"x-forge-oauth-system\" = \"\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"594\"\n)\nparams = \"{\n  \\\"actor\\\": {\n    \\\"type\\\": \\\"<string>\\\",\n    \\\"accountId\\\": \\\"<string>\\\",\n    \\\"uuid\\\": \\\"<string>\\\"\n  },\n  \\\"repository\\\": {\n    \\\"uuid\\\": \\\"<string>\\\"\n  },\n  \\\"project\\\": {\n    \\\"uuid\\\": \\\"<string>\\\"\n  },\n  \\\"workspace\\\": {\n    \\\"uuid\\\": \\\"<string>\\\"\n  },\n  \\\"pullrequest\\\": {\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"state\\\": \\\"<string>\\\",\n    \\\"source\\\": {\n      \\\"branch\\\": \\\"<string>\\\",\n      \\\"commit\\\": {\n        \\\"hash\\\": \\\"<string>\\\"\n      }\n    },\n    \\\"destination\\\": {\n      \\\"branch\\\": \\\"<string>\\\",\n      \\\"commit\\\": {\n        \\\"hash\\\": \\\"<string>\\\"\n      }\n    },\n    \\\"mergeCommit\\\": {\n      \\\"hash\\\": \\\"<string>\\\"\n    }\n  },\n  \\\"eventType\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/bitbucket/generate/diff/doc\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'x-forge-oauth-system' = '',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '594'\n)\n\nbody = '{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/bitbucket/generate/diff/doc\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/bitbucket/generate/diff/doc' \\\n x-forge-oauth-system: \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'x-forge-oauth-system: ' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"actor\": {\n    \"type\": \"<string>\",\n    \"accountId\": \"<string>\",\n    \"uuid\": \"<string>\"\n  },\n  \"repository\": {\n    \"uuid\": \"<string>\"\n  },\n  \"project\": {\n    \"uuid\": \"<string>\"\n  },\n  \"workspace\": {\n    \"uuid\": \"<string>\"\n  },\n  \"pullrequest\": {\n    \"id\": \"<integer>\",\n    \"state\": \"<string>\",\n    \"source\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"destination\": {\n      \"branch\": \"<string>\",\n      \"commit\": {\n        \"hash\": \"<string>\"\n      }\n    },\n    \"mergeCommit\": {\n      \"hash\": \"<string>\"\n    }\n  },\n  \"eventType\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/bitbucket/generate/diff/doc'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"actor\\\": {\\n    \\\"type\\\": \\\"<string>\\\",\\n    \\\"accountId\\\": \\\"<string>\\\",\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"repository\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"project\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"workspace\\\": {\\n    \\\"uuid\\\": \\\"<string>\\\"\\n  },\\n  \\\"pullrequest\\\": {\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"state\\\": \\\"<string>\\\",\\n    \\\"source\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"destination\\\": {\\n      \\\"branch\\\": \\\"<string>\\\",\\n      \\\"commit\\\": {\\n        \\\"hash\\\": \\\"<string>\\\"\\n      }\\n    },\\n    \\\"mergeCommit\\\": {\\n      \\\"hash\\\": \\\"<string>\\\"\\n    }\\n  },\\n  \\\"eventType\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/bitbucket/generate/diff/doc\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"\", forHTTPHeaderField: \"x-forge-oauth-system\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/transactions": {
      "get": {
        "tags": [
          "grouped_payment",
          "common_payment"
        ],
        "summary": "Get All Transactions",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_all_transactions_api_transactions_get",
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PaymentInfo"
                  },
                  "title": "Response Get All Transactions Api Transactions Get"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/transactions?token=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/transactions?token=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/transactions?token=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/transactions?token=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/transactions?token=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/transactions?token=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/transactions?token=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/transactions?token=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/transactions?token=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/transactions?token=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/transactions?token=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/transactions?token=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/transactions?token=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/transactions?token=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/transactions?token=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/transactions?token=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/transactions?token=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/transactions?token=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/transactions?token=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/transactions?token=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/transactions?token=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/transactions?token=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/transactions?token=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/transactions?token=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/transactions?token=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/transactions?token=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/transactions?token=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/transactions?token=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/transactions?token=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/transactions?token=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/transactions?token=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/transactions?token=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/transactions?token=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/transactions?token=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/payment": {
      "get": {
        "tags": [
          "grouped_payment",
          "stripe_payment"
        ],
        "summary": "Initiate Payment",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "initiate_payment_api_payment_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/payment\");\nrequest.Headers.Add(\"Accept\", \"text/html\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/payment\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"text/html\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/payment' \\\n--header 'Accept: text/html'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/payment\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: text/html\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/payment',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/payment'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/payment\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"text/html\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/payment HTTP/1.1\nHost: {{baseUrl}}\nAccept: text/html",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"text/html\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/payment\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/payment\");\nxhr.setRequestHeader(\"Accept\", \"text/html\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/payment\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"text/html\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/payment\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"text/html\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/payment\")\n  .header(\"Accept\", \"text/html\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/payment\")\n  .addHeader(\"Accept\", \"text/html\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/payment',\n  headers: { \n    'Accept': 'text/html'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/payment',\n  'headers': {\n    'Accept': 'text/html'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/payment',\n  'headers': {\n    'Accept': 'text/html'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/payment')\n  .headers({\n    'Accept': 'text/html'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/payment\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"text/html\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/payment\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"text/html\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'text/html'\n];\n$request = new Request('GET', '{{baseUrl}}/api/payment', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/payment');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'text/html'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/payment',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: text/html'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/payment');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'text/html'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"text/html\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/payment' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/payment\"\n\npayload = {}\nheaders = {\n  'Accept': 'text/html'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'text/html'\n}\nconn.request(\"GET\", \"/api/payment\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/payment\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"text/html\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"text/html\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/payment\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"text/html\"\n)\nres <- getURL(\"{{baseUrl}}/api/payment\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'text/html'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/payment\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/payment' \\\n Accept:'text/html'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: text/html' \\\n   '{{baseUrl}}/api/payment'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/payment\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"text/html\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/payment/callback": {
      "post": {
        "tags": [
          "grouped_payment",
          "stripe_payment"
        ],
        "summary": "Handle Payment Callback",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "handle_payment_callback_api_payment_callback_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/payment/callback\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/payment/callback\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request POST '{{baseUrl}}/api/payment/callback' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/payment/callback\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/payment/callback',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/payment/callback'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/payment/callback\"\n  method := \"POST\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/payment/callback HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/payment/callback\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/payment/callback\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/payment/callback\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/payment/callback\")\n  .method(\"POST\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/payment/callback\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"text/plain\".toMediaType()\nval body = \"\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/payment/callback\")\n  .post(body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/payment/callback',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/payment/callback',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/payment/callback',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/payment/callback')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/payment/callback\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/payment/callback\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('POST', '{{baseUrl}}/api/payment/callback', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/payment/callback');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/payment/callback',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/payment/callback');\n$request->setRequestMethod('POST');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/payment/callback' -Method 'POST' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/payment/callback\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"POST\", \"/api/payment/callback\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/payment/callback\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/payment/callback\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- postForm(\"{{baseUrl}}/api/payment/callback\", .opts=list(httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/payment/callback\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 POST '{{baseUrl}}/api/payment/callback' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/payment/callback'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/payment/callback\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"POST\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/stripe/create-checkout-session": {
      "get": {
        "tags": [
          "grouped_payment",
          "stripe_payment"
        ],
        "summary": "Create Checkout Session",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "create_checkout_session_api_stripe_create_checkout_session_get",
        "parameters": [
          {
            "name": "product_price_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Product Price Id"
            }
          },
          {
            "name": "token",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/stripe/checkout": {
      "get": {
        "tags": [
          "grouped_payment",
          "stripe_payment"
        ],
        "summary": "Strip Checkout",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "strip_checkout_api_stripe_checkout_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/stripe/checkout\");\nrequest.Headers.Add(\"Accept\", \"text/html\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/stripe/checkout\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"text/html\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/stripe/checkout' \\\n--header 'Accept: text/html'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/stripe/checkout\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: text/html\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/stripe/checkout',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/stripe/checkout'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/stripe/checkout\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"text/html\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/stripe/checkout HTTP/1.1\nHost: {{baseUrl}}\nAccept: text/html",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"text/html\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/stripe/checkout\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/stripe/checkout\");\nxhr.setRequestHeader(\"Accept\", \"text/html\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/stripe/checkout\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"text/html\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/checkout\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"text/html\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/stripe/checkout\")\n  .header(\"Accept\", \"text/html\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/checkout\")\n  .addHeader(\"Accept\", \"text/html\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/stripe/checkout',\n  headers: { \n    'Accept': 'text/html'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/stripe/checkout',\n  'headers': {\n    'Accept': 'text/html'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/stripe/checkout',\n  'headers': {\n    'Accept': 'text/html'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/stripe/checkout')\n  .headers({\n    'Accept': 'text/html'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/stripe/checkout\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"text/html\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/stripe/checkout\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"text/html\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'text/html'\n];\n$request = new Request('GET', '{{baseUrl}}/api/stripe/checkout', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/stripe/checkout');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'text/html'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/stripe/checkout',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: text/html'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/stripe/checkout');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'text/html'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"text/html\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/stripe/checkout' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/stripe/checkout\"\n\npayload = {}\nheaders = {\n  'Accept': 'text/html'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'text/html'\n}\nconn.request(\"GET\", \"/api/stripe/checkout\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/stripe/checkout\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"text/html\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"text/html\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/stripe/checkout\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"text/html\"\n)\nres <- getURL(\"{{baseUrl}}/api/stripe/checkout\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'text/html'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/stripe/checkout\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/stripe/checkout' \\\n Accept:'text/html'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: text/html' \\\n   '{{baseUrl}}/api/stripe/checkout'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/stripe/checkout\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"text/html\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/stripe/success": {
      "get": {
        "tags": [
          "grouped_payment",
          "stripe_payment"
        ],
        "summary": "Strip Success",
        "operationId": "strip_success_api_stripe_success_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/stripe/success\");\nrequest.Headers.Add(\"Accept\", \"text/html\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/stripe/success\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"text/html\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/stripe/success' \\\n--header 'Accept: text/html'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/stripe/success\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: text/html\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/stripe/success',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/stripe/success'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/stripe/success\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"text/html\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/stripe/success HTTP/1.1\nHost: {{baseUrl}}\nAccept: text/html",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"text/html\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/stripe/success\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/stripe/success\");\nxhr.setRequestHeader(\"Accept\", \"text/html\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/stripe/success\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"text/html\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/success\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"text/html\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/stripe/success\")\n  .header(\"Accept\", \"text/html\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/success\")\n  .addHeader(\"Accept\", \"text/html\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/stripe/success',\n  headers: { \n    'Accept': 'text/html'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/stripe/success',\n  'headers': {\n    'Accept': 'text/html'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/stripe/success',\n  'headers': {\n    'Accept': 'text/html'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/stripe/success')\n  .headers({\n    'Accept': 'text/html'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/stripe/success\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"text/html\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/stripe/success\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"text/html\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'text/html'\n];\n$request = new Request('GET', '{{baseUrl}}/api/stripe/success', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/stripe/success');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'text/html'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/stripe/success',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: text/html'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/stripe/success');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'text/html'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"text/html\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/stripe/success' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/stripe/success\"\n\npayload = {}\nheaders = {\n  'Accept': 'text/html'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'text/html'\n}\nconn.request(\"GET\", \"/api/stripe/success\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/stripe/success\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"text/html\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"text/html\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/stripe/success\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"text/html\"\n)\nres <- getURL(\"{{baseUrl}}/api/stripe/success\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'text/html'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/stripe/success\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/stripe/success' \\\n Accept:'text/html'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: text/html' \\\n   '{{baseUrl}}/api/stripe/success'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/stripe/success\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"text/html\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/stripe/cancel": {
      "get": {
        "tags": [
          "grouped_payment",
          "stripe_payment"
        ],
        "summary": "Strip Cancel",
        "operationId": "strip_cancel_api_stripe_cancel_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/stripe/cancel\");\nrequest.Headers.Add(\"Accept\", \"text/html\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/stripe/cancel\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"text/html\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/stripe/cancel' \\\n--header 'Accept: text/html'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/stripe/cancel\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: text/html\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/stripe/cancel',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/stripe/cancel'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/stripe/cancel\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"text/html\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/stripe/cancel HTTP/1.1\nHost: {{baseUrl}}\nAccept: text/html",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"text/html\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/stripe/cancel\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/stripe/cancel\");\nxhr.setRequestHeader(\"Accept\", \"text/html\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/stripe/cancel\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"text/html\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/cancel\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"text/html\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/stripe/cancel\")\n  .header(\"Accept\", \"text/html\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/cancel\")\n  .addHeader(\"Accept\", \"text/html\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/stripe/cancel',\n  headers: { \n    'Accept': 'text/html'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/stripe/cancel',\n  'headers': {\n    'Accept': 'text/html'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/stripe/cancel',\n  'headers': {\n    'Accept': 'text/html'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/stripe/cancel')\n  .headers({\n    'Accept': 'text/html'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/stripe/cancel\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"text/html\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/stripe/cancel\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"text/html\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'text/html'\n];\n$request = new Request('GET', '{{baseUrl}}/api/stripe/cancel', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/stripe/cancel');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'text/html'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/stripe/cancel',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: text/html'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/stripe/cancel');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'text/html'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"text/html\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/stripe/cancel' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/stripe/cancel\"\n\npayload = {}\nheaders = {\n  'Accept': 'text/html'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'text/html'\n}\nconn.request(\"GET\", \"/api/stripe/cancel\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/stripe/cancel\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"text/html\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"text/html\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/stripe/cancel\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"text/html\"\n)\nres <- getURL(\"{{baseUrl}}/api/stripe/cancel\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'text/html'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/stripe/cancel\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/stripe/cancel' \\\n Accept:'text/html'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: text/html' \\\n   '{{baseUrl}}/api/stripe/cancel'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/stripe/cancel\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"text/html\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/stripe/fail": {
      "get": {
        "tags": [
          "grouped_payment",
          "stripe_payment"
        ],
        "summary": "Strip Fail",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "strip_fail_api_stripe_fail_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/stripe/fail\");\nrequest.Headers.Add(\"Accept\", \"text/html\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/stripe/fail\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"text/html\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/stripe/fail' \\\n--header 'Accept: text/html'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/stripe/fail\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: text/html\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/stripe/fail',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'text/html'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/stripe/fail'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/stripe/fail\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"text/html\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/stripe/fail HTTP/1.1\nHost: {{baseUrl}}\nAccept: text/html",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"text/html\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/stripe/fail\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/stripe/fail\");\nxhr.setRequestHeader(\"Accept\", \"text/html\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/stripe/fail\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"text/html\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/fail\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"text/html\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/stripe/fail\")\n  .header(\"Accept\", \"text/html\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/fail\")\n  .addHeader(\"Accept\", \"text/html\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/stripe/fail',\n  headers: { \n    'Accept': 'text/html'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/stripe/fail',\n  'headers': {\n    'Accept': 'text/html'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/stripe/fail',\n  'headers': {\n    'Accept': 'text/html'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/stripe/fail')\n  .headers({\n    'Accept': 'text/html'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/stripe/fail\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"text/html\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/stripe/fail\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"text/html\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'text/html'\n];\n$request = new Request('GET', '{{baseUrl}}/api/stripe/fail', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/stripe/fail');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'text/html'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/stripe/fail',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: text/html'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/stripe/fail');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'text/html'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"text/html\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/stripe/fail' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/stripe/fail\"\n\npayload = {}\nheaders = {\n  'Accept': 'text/html'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'text/html'\n}\nconn.request(\"GET\", \"/api/stripe/fail\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/stripe/fail\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"text/html\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"text/html\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/stripe/fail\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"text/html\"\n)\nres <- getURL(\"{{baseUrl}}/api/stripe/fail\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'text/html'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/stripe/fail\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/stripe/fail' \\\n Accept:'text/html'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: text/html' \\\n   '{{baseUrl}}/api/stripe/fail'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/stripe/fail\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"text/html\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/stripe/webhook": {
      "post": {
        "tags": [
          "grouped_payment",
          "stripe_payment"
        ],
        "summary": "Webhook",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "webhook_api_stripe_webhook_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/stripe/webhook\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/stripe/webhook\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request POST '{{baseUrl}}/api/stripe/webhook' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/stripe/webhook\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/stripe/webhook',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/stripe/webhook'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/stripe/webhook\"\n  method := \"POST\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/stripe/webhook HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/stripe/webhook\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/stripe/webhook\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/stripe/webhook\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/webhook\")\n  .method(\"POST\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/stripe/webhook\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"text/plain\".toMediaType()\nval body = \"\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/stripe/webhook\")\n  .post(body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/stripe/webhook',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/stripe/webhook',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/stripe/webhook',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/stripe/webhook')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/stripe/webhook\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/stripe/webhook\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('POST', '{{baseUrl}}/api/stripe/webhook', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/stripe/webhook');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/stripe/webhook',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/stripe/webhook');\n$request->setRequestMethod('POST');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/stripe/webhook' -Method 'POST' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/stripe/webhook\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"POST\", \"/api/stripe/webhook\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/stripe/webhook\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/stripe/webhook\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- postForm(\"{{baseUrl}}/api/stripe/webhook\", .opts=list(httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/stripe/webhook\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 POST '{{baseUrl}}/api/stripe/webhook' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/stripe/webhook'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/stripe/webhook\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"POST\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/cashfree/checkout": {
      "get": {
        "tags": [
          "grouped_payment",
          "cashfree_payment"
        ],
        "summary": "Create Cashfree Checkout Session",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "create_cashfree_checkout_session_api_cashfree_checkout_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Product Id"
            }
          },
          {
            "name": "repo_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Repo Ids"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/cashfree/checkout?product_id=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/cashfree/checkout?product_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/cashfree/checkout?product_id=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/cashfree/checkout?product_id=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/cashfree/checkout?product_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/cashfree/checkout?product_id=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/cashfree/checkout?product_id=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/cashfree/checkout?product_id=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/cashfree/checkout?product_id=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/cashfree/checkout?product_id=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/cashfree/checkout?product_id=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/cashfree/checkout?product_id=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/cashfree/checkout?product_id=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/cashfree/checkout?product_id=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/cashfree/checkout?product_id=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/cashfree/checkout?product_id=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/cashfree/checkout?product_id=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/cashfree/checkout?product_id=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/cashfree/checkout?product_id=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/cashfree/checkout?product_id=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/cashfree/checkout?product_id=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/cashfree/checkout?product_id=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/cashfree/checkout?product_id=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/cashfree/checkout?product_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/cashfree/subscription": {
      "get": {
        "tags": [
          "grouped_payment",
          "cashfree_payment"
        ],
        "summary": "Create Cashfree Subscription Session",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "create_cashfree_subscription_session_api_cashfree_subscription_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "product_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Product Id"
            }
          },
          {
            "name": "repo_ids",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [],
              "title": "Repo Ids"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/cashfree/subscription?product_id=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/cashfree/subscription?product_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/cashfree/subscription?product_id=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/cashfree/subscription?product_id=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/cashfree/subscription?product_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/cashfree/subscription?product_id=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/cashfree/subscription?product_id=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/cashfree/subscription?product_id=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/cashfree/subscription?product_id=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/cashfree/subscription?product_id=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/cashfree/subscription?product_id=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/cashfree/subscription?product_id=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/cashfree/subscription?product_id=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/cashfree/subscription?product_id=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/cashfree/subscription?product_id=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/cashfree/subscription?product_id=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/cashfree/subscription?product_id=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/cashfree/subscription?product_id=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/cashfree/subscription?product_id=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/cashfree/subscription?product_id=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/cashfree/subscription?product_id=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/cashfree/subscription?product_id=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/cashfree/subscription?product_id=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/cashfree/subscription?product_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/cashfree/callback": {
      "get": {
        "tags": [
          "grouped_payment",
          "cashfree_payment"
        ],
        "summary": "Create Cashfree Callback",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "create_cashfree_callback_api_cashfree_callback_get",
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Signature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/cashfree/callback?signature=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/cashfree/callback?signature=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/cashfree/callback?signature=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/cashfree/callback?signature=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/cashfree/callback?signature=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/cashfree/callback?signature=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/cashfree/callback?signature=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/cashfree/callback?signature=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/cashfree/callback?signature=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/cashfree/callback?signature=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/cashfree/callback?signature=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/callback?signature=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/cashfree/callback?signature=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/callback?signature=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/cashfree/callback?signature=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/cashfree/callback?signature=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/cashfree/callback?signature=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/cashfree/callback?signature=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/cashfree/callback?signature=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/cashfree/callback?signature=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/cashfree/callback?signature=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/cashfree/callback?signature=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/cashfree/callback?signature=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/cashfree/callback?signature=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/cashfree/callback?signature=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/cashfree/callback?signature=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/cashfree/callback?signature=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/cashfree/callback?signature=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/cashfree/callback?signature=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/cashfree/callback?signature=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/cashfree/callback?signature=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/cashfree/callback?signature=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/cashfree/callback?signature=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/cashfree/callback?signature=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/cashfree/sub/callback": {
      "get": {
        "tags": [
          "grouped_payment",
          "cashfree_payment"
        ],
        "summary": "Create Cashfree Sub Callback",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "create_cashfree_sub_callback_api_cashfree_sub_callback_get",
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Signature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/cashfree/sub/callback?signature=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/cashfree/sub/callback?signature=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/cashfree/sub/callback?signature=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/cashfree/sub/callback?signature=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/cashfree/sub/callback?signature=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/cashfree/sub/callback?signature=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/cashfree/sub/callback?signature=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      },
      "post": {
        "tags": [
          "grouped_payment",
          "cashfree_payment"
        ],
        "summary": "Create Cashfree Sub Callback",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "create_cashfree_sub_callback_api_cashfree_sub_callback_post",
        "parameters": [
          {
            "name": "signature",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Signature"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request POST '{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/cashfree/sub/callback?signature=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\"\n  method := \"POST\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/cashfree/sub/callback?signature=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n  .method(\"POST\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"text/plain\".toMediaType()\nval body = \"\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n  .post(body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/cashfree/sub/callback?signature=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/cashfree/sub/callback?signature=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('POST', '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/cashfree/sub/callback?signature=<string>');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/cashfree/sub/callback?signature=<string>');\n$request->setRequestMethod('POST');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>' -Method 'POST' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"POST\", \"/api/cashfree/sub/callback?signature=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- postForm(\"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\", .opts=list(httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/cashfree/sub/callback?signature=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 POST '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/cashfree/sub/callback?signature=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/cashfree/sub/callback?signature=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"POST\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/conversionRates": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Conversionrates",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "conversionRates_api_v1_analytics_conversionRates_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/v1/analytics/usage": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Usage",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "usage_api_v1_analytics_usage_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/usage\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/usage\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/usage' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/usage\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/usage',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/usage'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/usage\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/usage HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/usage\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/usage\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/usage\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/usage\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/usage',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/usage',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/usage',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/usage')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/usage\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/usage\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/usage', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/usage');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/usage',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/usage');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/usage' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/usage\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/usage\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/usage\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/usage\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/usage\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/usage\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/usage' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/usage'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/usage\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/usage/doc/gen": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Usage Doc Gen",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "usage_doc_gen_api_v1_analytics_usage_doc_gen_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/usage/doc/gen\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/usage/doc/gen' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/usage/doc/gen',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/usage/doc/gen'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/usage/doc/gen HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/usage/doc/gen\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/doc/gen\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/usage/doc/gen\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/doc/gen\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/usage/doc/gen',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/usage/doc/gen',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/usage/doc/gen',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/usage/doc/gen')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/usage/doc/gen\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/usage/doc/gen', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/usage/doc/gen');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/usage/doc/gen',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/usage/doc/gen');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/usage/doc/gen' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/usage/doc/gen\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/usage/doc/gen\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/usage/doc/gen\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/usage/doc/gen' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/usage/doc/gen'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/usage/doc/gen\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/usage/admin/doc/gen": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Usage Doc Gen Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "usage_doc_gen_admin_api_v1_analytics_usage_admin_doc_gen_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/usage/admin/doc/gen?user_id=<integer> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=<integer>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/usage/admin/doc/gen?user_id=%3Cinteger%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/usage/admin": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Usage Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "usage_admin_api_v1_analytics_usage_admin_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/usage/admin?user_id=<integer> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/usage/admin?user_id=<integer>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/usage/admin?user_id=%3Cinteger%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/openai/toggle": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Open Ai Toggle",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "open_ai_toggle_api_v1_analytics_openai_toggle_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/openai/toggle\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/openai/toggle\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/openai/toggle' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/openai/toggle\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/openai/toggle',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/openai/toggle'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/openai/toggle\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/openai/toggle HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/openai/toggle\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/openai/toggle\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/openai/toggle\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/openai/toggle\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/openai/toggle\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/openai/toggle\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/openai/toggle',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/openai/toggle',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/openai/toggle',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/openai/toggle')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/openai/toggle\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/openai/toggle\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/openai/toggle', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/openai/toggle');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/openai/toggle',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/openai/toggle');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/openai/toggle' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/openai/toggle\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/openai/toggle\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/openai/toggle\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/openai/toggle\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/openai/toggle\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/openai/toggle\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/openai/toggle' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/openai/toggle'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/openai/toggle\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/report": {
      "post": {
        "tags": [
          "analytics"
        ],
        "summary": "Report",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "report_api_v1_analytics_report_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "title": "Data"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/analytics/report\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/report\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/report' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/report\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/report',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/analytics/report'));\nrequest.body = json.encode({});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/report\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/analytics/report HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 2\n\n{}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/report\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/analytics/report\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/report\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({}),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/report\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/analytics/report\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/report\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/report',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/report',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/analytics/report',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({})\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/analytics/report')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({}))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/report\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/report\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '2'\n];\n$body = '{}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/analytics/report', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/report');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/report',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/report');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/report' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/analytics/report\"\n\npayload = json.dumps({})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/analytics/report\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/report\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/analytics/report\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"2\"\n)\nparams = \"{}\"\nres <- postForm(\"{{baseUrl}}/api/v1/analytics/report\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '2'\n)\n\nbody = '{}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/analytics/report\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/analytics/report' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{}' \\\n   '{{baseUrl}}/api/v1/analytics/report'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/report\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/redis/get": {
      "post": {
        "tags": [
          "analytics"
        ],
        "summary": "Redis Get",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "redis_get_api_v1_analytics_redis_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/analytics/redis/get\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/redis/get\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"key\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"value\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"ttl\"\": \"\"<integer>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/redis/get' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/redis/get\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/redis/get',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/analytics/redis/get'));\nrequest.body = json.encode({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/redis/get\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/analytics/redis/get HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 68\n\n{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/redis/get\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/analytics/redis/get\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/redis/get\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"ttl\": \"<integer>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/redis/get\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/analytics/redis/get\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/redis/get\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/redis/get',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/redis/get',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/analytics/redis/get',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"ttl\": \"<integer>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/analytics/redis/get')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"ttl\": \"<integer>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/redis/get\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/redis/get\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '68'\n];\n$body = '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/analytics/redis/get', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/redis/get');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"key\": \"<string>\",\\n  \"value\": \"<string>\",\\n  \"ttl\": \"<integer>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/redis/get',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/redis/get');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"key`\": `\"<string>`\",\n  `\"value`\": `\"<string>`\",\n  `\"ttl`\": `\"<integer>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/redis/get' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/analytics/redis/get\"\n\npayload = json.dumps({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/analytics/redis/get\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/redis/get\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"ttl\": \"<integer>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/analytics/redis/get\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"68\"\n)\nparams = \"{\n  \\\"key\\\": \\\"<string>\\\",\n  \\\"value\\\": \\\"<string>\\\",\n  \\\"ttl\\\": \\\"<integer>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/analytics/redis/get\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '68'\n)\n\nbody = '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/analytics/redis/get\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/analytics/redis/get' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}' \\\n   '{{baseUrl}}/api/v1/analytics/redis/get'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/redis/get\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/redis/set": {
      "post": {
        "tags": [
          "analytics"
        ],
        "summary": "Redis Set",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "redis_set_api_v1_analytics_redis_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RedisSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/analytics/redis/set\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/redis/set\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"key\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"value\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"ttl\"\": \"\"<integer>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/redis/set' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/redis/set\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/redis/set',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/analytics/redis/set'));\nrequest.body = json.encode({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/redis/set\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/analytics/redis/set HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 68\n\n{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/redis/set\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/analytics/redis/set\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/redis/set\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"ttl\": \"<integer>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/redis/set\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/analytics/redis/set\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/redis/set\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/redis/set',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/redis/set',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/analytics/redis/set',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"ttl\": \"<integer>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/analytics/redis/set')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"ttl\": \"<integer>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/redis/set\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/redis/set\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '68'\n];\n$body = '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/analytics/redis/set', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/redis/set');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"key\": \"<string>\",\\n  \"value\": \"<string>\",\\n  \"ttl\": \"<integer>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/redis/set',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/redis/set');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"key`\": `\"<string>`\",\n  `\"value`\": `\"<string>`\",\n  `\"ttl`\": `\"<integer>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/redis/set' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/analytics/redis/set\"\n\npayload = json.dumps({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/analytics/redis/set\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/redis/set\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"key\": \"<string>\",\n    \"value\": \"<string>\",\n    \"ttl\": \"<integer>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/analytics/redis/set\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"68\"\n)\nparams = \"{\n  \\\"key\\\": \\\"<string>\\\",\n  \\\"value\\\": \\\"<string>\\\",\n  \\\"ttl\\\": \\\"<integer>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/analytics/redis/set\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '68'\n)\n\nbody = '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/analytics/redis/set\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/analytics/redis/set' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"key\": \"<string>\",\n  \"value\": \"<string>\",\n  \"ttl\": \"<integer>\"\n}' \\\n   '{{baseUrl}}/api/v1/analytics/redis/set'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"key\\\": \\\"<string>\\\",\\n  \\\"value\\\": \\\"<string>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/redis/set\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/flag/get": {
      "post": {
        "tags": [
          "analytics"
        ],
        "summary": "Flag Get",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "flag_get_api_v1_analytics_flag_get_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlagSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/analytics/flag/get\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/flag/get\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"key\"\": \"\"FETCH_GITHUB_TOKEN_FROM_REDIS\"\",\" + \"\\n\" +\n@\"  \"\"value\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"  \"\"ttl\"\": \"\"<integer>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/flag/get' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/flag/get\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/flag/get',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/analytics/flag/get'));\nrequest.body = json.encode({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/flag/get\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/analytics/flag/get HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 90\n\n{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/flag/get\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/analytics/flag/get\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/flag/get\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n    \"value\": \"<boolean>\",\n    \"ttl\": \"<integer>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/flag/get\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/analytics/flag/get\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/flag/get\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/flag/get',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/flag/get',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/analytics/flag/get',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n    \"value\": \"<boolean>\",\n    \"ttl\": \"<integer>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/analytics/flag/get')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n    \"value\": \"<boolean>\",\n    \"ttl\": \"<integer>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/flag/get\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/flag/get\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '90'\n];\n$body = '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/analytics/flag/get', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/flag/get');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\\n  \"value\": \"<boolean>\",\\n  \"ttl\": \"<integer>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/flag/get',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/flag/get');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"key`\": `\"FETCH_GITHUB_TOKEN_FROM_REDIS`\",\n  `\"value`\": `\"<boolean>`\",\n  `\"ttl`\": `\"<integer>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/flag/get' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/analytics/flag/get\"\n\npayload = json.dumps({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/analytics/flag/get\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/flag/get\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n    \"value\": \"<boolean>\",\n    \"ttl\": \"<integer>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/analytics/flag/get\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"90\"\n)\nparams = \"{\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\n  \\\"value\\\": \\\"<boolean>\\\",\n  \\\"ttl\\\": \\\"<integer>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/analytics/flag/get\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '90'\n)\n\nbody = '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/analytics/flag/get\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/analytics/flag/get' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}' \\\n   '{{baseUrl}}/api/v1/analytics/flag/get'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/flag/get\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/flag/set": {
      "post": {
        "tags": [
          "analytics"
        ],
        "summary": "Flag Set",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "flag_set_api_v1_analytics_flag_set_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FlagSchema"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/analytics/flag/set\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/flag/set\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"key\"\": \"\"FETCH_GITHUB_TOKEN_FROM_REDIS\"\",\" + \"\\n\" +\n@\"  \"\"value\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"  \"\"ttl\"\": \"\"<integer>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/flag/set' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/flag/set\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/flag/set',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/analytics/flag/set'));\nrequest.body = json.encode({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/flag/set\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/analytics/flag/set HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 90\n\n{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/flag/set\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/analytics/flag/set\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/flag/set\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n    \"value\": \"<boolean>\",\n    \"ttl\": \"<integer>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/flag/set\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/analytics/flag/set\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/flag/set\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/flag/set',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/flag/set',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/analytics/flag/set',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n    \"value\": \"<boolean>\",\n    \"ttl\": \"<integer>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/analytics/flag/set')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n    \"value\": \"<boolean>\",\n    \"ttl\": \"<integer>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/flag/set\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/flag/set\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '90'\n];\n$body = '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/analytics/flag/set', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/flag/set');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\\n  \"value\": \"<boolean>\",\\n  \"ttl\": \"<integer>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/flag/set',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/flag/set');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"key`\": `\"FETCH_GITHUB_TOKEN_FROM_REDIS`\",\n  `\"value`\": `\"<boolean>`\",\n  `\"ttl`\": `\"<integer>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/flag/set' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/analytics/flag/set\"\n\npayload = json.dumps({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/analytics/flag/set\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/flag/set\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n    \"value\": \"<boolean>\",\n    \"ttl\": \"<integer>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/analytics/flag/set\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"90\"\n)\nparams = \"{\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\n  \\\"value\\\": \\\"<boolean>\\\",\n  \\\"ttl\\\": \\\"<integer>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/analytics/flag/set\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '90'\n)\n\nbody = '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/analytics/flag/set\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/analytics/flag/set' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"key\": \"FETCH_GITHUB_TOKEN_FROM_REDIS\",\n  \"value\": \"<boolean>\",\n  \"ttl\": \"<integer>\"\n}' \\\n   '{{baseUrl}}/api/v1/analytics/flag/set'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"key\\\": \\\"FETCH_GITHUB_TOKEN_FROM_REDIS\\\",\\n  \\\"value\\\": \\\"<boolean>\\\",\\n  \\\"ttl\\\": \\\"<integer>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/flag/set\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/flag/get/all": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Flag Get All",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "flag_get_all_api_v1_analytics_flag_get_all_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/flag/get/all\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/flag/get/all\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/flag/get/all' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/flag/get/all\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/flag/get/all',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/flag/get/all'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/flag/get/all\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/flag/get/all HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/flag/get/all\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/flag/get/all\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/flag/get/all\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/flag/get/all\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/flag/get/all\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/flag/get/all\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/flag/get/all',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/flag/get/all',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/flag/get/all',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/flag/get/all')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/flag/get/all\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/flag/get/all\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/flag/get/all', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/flag/get/all');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/flag/get/all',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/flag/get/all');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/flag/get/all' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/flag/get/all\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/flag/get/all\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/flag/get/all\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/flag/get/all\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/flag/get/all\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/flag/get/all\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/flag/get/all' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/flag/get/all'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/flag/get/all\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/usage/count": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get User Count",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_user_count_api_v1_analytics_usage_count_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/usage/count\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/usage/count\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/usage/count' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/usage/count\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/usage/count',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/usage/count'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/usage/count\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/usage/count HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/usage/count\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/usage/count\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/usage/count\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/count\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/usage/count\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/count\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/usage/count',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/usage/count',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/usage/count',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/usage/count')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/usage/count\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/usage/count\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/usage/count', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/usage/count');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/usage/count',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/usage/count');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/usage/count' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/usage/count\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/usage/count\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/usage/count\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/usage/count\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/usage/count\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/usage/count\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/usage/count' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/usage/count'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/usage/count\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/usage/reset": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Reset User Count",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "reset_user_count_api_v1_analytics_usage_reset_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/usage/reset\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/usage/reset\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/usage/reset' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/usage/reset\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/usage/reset',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/usage/reset'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/usage/reset\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/usage/reset HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/usage/reset\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/usage/reset\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/usage/reset\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/reset\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/usage/reset\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/reset\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/usage/reset',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/usage/reset',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/usage/reset',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/usage/reset')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/usage/reset\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/usage/reset\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/usage/reset', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/usage/reset');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/usage/reset',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/usage/reset');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/usage/reset' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/usage/reset\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/usage/reset\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/usage/reset\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/usage/reset\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/usage/reset\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/usage/reset\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/usage/reset' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/usage/reset'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/usage/reset\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/usage/githubApp": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get Github Stats",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_github_stats_api_v1_analytics_usage_githubApp_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Orgname"
            }
          },
          {
            "name": "repoName",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Reponame"
            }
          },
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=<string>&repoName=<string>&id=<integer>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/usage/githubApp?orgName=%3Cstring%3E&repoName=%3Cstring%3E&id=%3Cinteger%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/redis/toggle/set": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Update Toggle Set",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "update_toggle_set_api_v1_analytics_redis_toggle_set_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Userid"
            }
          },
          {
            "name": "setType",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Settype"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=<integer>&setType=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/redis/toggle/set?userId=%3Cinteger%3E&setType=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/redis/get/set": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Get Toggle Set",
        "operationId": "get_toggle_set_api_v1_analytics_redis_get_set_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "setType",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Settype"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/redis/get/set?setType=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/redis/get/set?setType=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/redis/get/set?setType=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/redis/get/set?setType=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/redis/get/set?setType=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/redis/get/set?setType=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/unsub/user": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Add Unsub User",
        "operationId": "add_unsub_user_api_v1_analytics_unsub_user_get",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/unsub/user?email=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/unsub/user?email=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/unsub/user?email=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/unsub/user?email=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/unsub/user?email=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/unsub/user?email=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/unsub/user?email=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/unsub/user?email=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/unsub/user?email=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/unsub/user?email=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/unsub/user?email=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/unsub/user?email=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/unsub/user?email=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/analytics/unsub/list": {
      "get": {
        "tags": [
          "analytics"
        ],
        "summary": "Unsub List",
        "operationId": "unsub_list_api_v1_analytics_unsub_list_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/analytics/unsub/list\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/analytics/unsub/list\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/analytics/unsub/list' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/analytics/unsub/list\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/analytics/unsub/list',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/analytics/unsub/list'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/analytics/unsub/list\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/analytics/unsub/list HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/analytics/unsub/list\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/analytics/unsub/list\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/analytics/unsub/list\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/unsub/list\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/analytics/unsub/list\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/analytics/unsub/list\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/analytics/unsub/list',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/analytics/unsub/list',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/analytics/unsub/list',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/analytics/unsub/list')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/analytics/unsub/list\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/analytics/unsub/list\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/analytics/unsub/list', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/analytics/unsub/list');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/analytics/unsub/list',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/analytics/unsub/list');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/analytics/unsub/list' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/analytics/unsub/list\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/analytics/unsub/list\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/analytics/unsub/list\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/analytics/unsub/list\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/analytics/unsub/list\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/analytics/unsub/list\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/analytics/unsub/list' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/analytics/unsub/list'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/analytics/unsub/list\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/webhook": {
      "post": {
        "tags": [
          "github_app"
        ],
        "summary": "Handle Webhook",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "handle_webhook_api_app_github_webhook_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/app/github/webhook\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/webhook\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request POST '{{baseUrl}}/api/app/github/webhook' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/webhook\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/webhook',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/app/github/webhook'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/webhook\"\n  method := \"POST\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/app/github/webhook HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/webhook\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/app/github/webhook\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/webhook\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/webhook\")\n  .method(\"POST\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/app/github/webhook\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"text/plain\".toMediaType()\nval body = \"\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/webhook\")\n  .post(body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/webhook',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/webhook',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/app/github/webhook',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/app/github/webhook')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/webhook\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/webhook\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('POST', '{{baseUrl}}/api/app/github/webhook', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/webhook');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/webhook',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/webhook');\n$request->setRequestMethod('POST');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/webhook' -Method 'POST' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/webhook\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"POST\", \"/api/app/github/webhook\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/webhook\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/app/github/webhook\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- postForm(\"{{baseUrl}}/api/app/github/webhook\", .opts=list(httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/app/github/webhook\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 POST '{{baseUrl}}/api/app/github/webhook' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/webhook'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/webhook\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"POST\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/get/experimental": {
      "post": {
        "tags": [
          "github_app"
        ],
        "summary": "Run Pubsub Experiment",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "run_pubsub_experiment_api_app_github_get_experimental_post",
        "parameters": [
          {
            "name": "snorkell-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Snorkell-Api-Key"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergedPullRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/app/github/get/experimental\");\nrequest.Headers.Add(\"snorkell-api-key\", \"<string>\");\nrequest.Headers.Add(\"api-key\", \"\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/get/experimental\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"snorkell-api-key\", \"<string>\");\nrequest.AddHeader(\"api-key\", \"\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"api_token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"full_repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"AZUREDEVOPS\"\",\" + \"\\n\" +\n@\"  \"\"git_app\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"PREMIUM\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {}\" + \"\\n\" +\n@\"  }\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/get/experimental' \\\n--header 'snorkell-api-key: <string>' \\\n--header 'api-key;' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/get/experimental\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"snorkell-api-key: <string>\");\n  headers = curl_slist_append(headers, \"api-key: \");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'snorkell-api-key': '<string>',\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/get/experimental',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'snorkell-api-key': '<string>',\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/app/github/get/experimental'));\nrequest.body = json.encode({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/get/experimental\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"snorkell-api-key\", \"<string>\")\n  req.Header.Add(\"api-key\", \"\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/app/github/get/experimental HTTP/1.1\nHost: {{baseUrl}}\nsnorkell-api-key: <string>\napi-key: \nContent-Type: application/json\nAccept: application/json\nContent-Length: 2161\n\n{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"snorkell-api-key\", \"<string>\");\nmyHeaders.append(\"api-key\", \"\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/get/experimental\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/app/github/get/experimental\");\nxhr.setRequestHeader(\"snorkell-api-key\", \"<string>\");\nxhr.setRequestHeader(\"api-key\", \"\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/get/experimental\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"snorkell-api-key\": \"<string>\",\n    \"api-key\": \"\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/get/experimental\")\n  .method(\"POST\", body)\n  .addHeader(\"snorkell-api-key\", \"<string>\")\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/app/github/get/experimental\")\n  .header(\"snorkell-api-key\", \"<string>\")\n  .header(\"api-key\", \"\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/get/experimental\")\n  .post(body)\n  .addHeader(\"snorkell-api-key\", \"<string>\")\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/get/experimental',\n  headers: { \n    'snorkell-api-key': '<string>', \n    'api-key': '', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/get/experimental',\n  'headers': {\n    'snorkell-api-key': '<string>',\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/app/github/get/experimental',\n  'headers': {\n    'snorkell-api-key': '<string>',\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/app/github/get/experimental')\n  .headers({\n    'snorkell-api-key': '<string>',\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/get/experimental\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"snorkell-api-key\": @\"<string>\",\n  @\"api-key\": @\"\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/get/experimental\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"snorkell-api-key\" \"<string>\"\n    |> fun h -> Header.add h \"api-key\" \"\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'snorkell-api-key' => '<string>',\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '2161'\n];\n$body = '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}';\n$request = new Request('POST', '{{baseUrl}}/api/app/github/get/experimental', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/get/experimental');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'snorkell-api-key' => '<string>',\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"api_token\": \"<string>\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"installation_id\": \"<string>\",\\n  \"organization_name\": \"<string>\",\\n  \"repo_name\": \"<string>\",\\n  \"full_repo_name\": \"<string>\",\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"vendor\": \"AZUREDEVOPS\",\\n  \"git_app\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"PREMIUM\",\\n    \"netlify\": {}\\n  }\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/get/experimental',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'snorkell-api-key: <string>',\n    'api-key: ',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/get/experimental');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'snorkell-api-key' => '<string>',\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"snorkell-api-key\", \"<string>\")\n$headers.Add(\"api-key\", \"\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"api_token`\": `\"<string>`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"installation_id`\": `\"<string>`\",\n  `\"organization_name`\": `\"<string>`\",\n  `\"repo_name`\": `\"<string>`\",\n  `\"full_repo_name`\": `\"<string>`\",\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"vendor`\": `\"AZUREDEVOPS`\",\n  `\"git_app`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"PREMIUM`\",\n    `\"netlify`\": {}\n  }\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/get/experimental' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/app/github/get/experimental\"\n\npayload = json.dumps({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\nheaders = {\n  'snorkell-api-key': '<string>',\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\nheaders = {\n  'snorkell-api-key': '<string>',\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/app/github/get/experimental\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/get/experimental\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"snorkell-api-key\"] = \"<string>\"\nrequest[\"api-key\"] = \"\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"snorkell-api-key\", \"<string>\".parse()?);\n    headers.insert(\"api-key\", \"\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"PREMIUM\",\n        \"netlify\": {}\n    }\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/app/github/get/experimental\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"snorkell-api-key\" = \"<string>\",\n  \"api-key\" = \"\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"2161\"\n)\nparams = \"{\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"api_token\\\": \\\"<string>\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"installation_id\\\": \\\"<string>\\\",\n  \\\"organization_name\\\": \\\"<string>\\\",\n  \\\"repo_name\\\": \\\"<string>\\\",\n  \\\"full_repo_name\\\": \\\"<string>\\\",\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\n  \\\"git_app\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\n    \\\"netlify\\\": {}\n  }\n}\"\nres <- postForm(\"{{baseUrl}}/api/app/github/get/experimental\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'snorkell-api-key' = '<string>',\n  'api-key' = '',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '2161'\n)\n\nbody = '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/app/github/get/experimental\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/app/github/get/experimental' \\\n snorkell-api-key:'<string>' \\\n api-key: \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'snorkell-api-key: <string>' \\\n  --header 'api-key: ' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}' \\\n   '{{baseUrl}}/api/app/github/get/experimental'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/get/experimental\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"snorkell-api-key\")\nrequest.addValue(\"\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/get/repositories": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Get All Repositories",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_all_repositories_api_app_github_get_repositories_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/get/repositories\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/get/repositories\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/get/repositories' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/get/repositories\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/get/repositories',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/get/repositories'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/get/repositories\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/get/repositories HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/get/repositories\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/get/repositories\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/get/repositories\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/get/repositories\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/get/repositories\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/get/repositories\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/get/repositories',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/get/repositories',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/get/repositories',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/get/repositories')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/get/repositories\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/get/repositories\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/get/repositories', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/get/repositories');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/get/repositories',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/get/repositories');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/get/repositories' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/get/repositories\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/get/repositories\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/get/repositories\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/get/repositories\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/get/repositories\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/get/repositories\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/get/repositories' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/get/repositories'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/get/repositories\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/get/repositories/admin": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Get All Repositories Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_all_repositories_admin_api_app_github_get_repositories_admin_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "login_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Login Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/get/repositories/admin?login_id=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/get/repositories/admin?login_id=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/get/repositories/admin?login_id=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/get/repositories/admin?login_id=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/get/repositories/admin?login_id=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/get/repositories/admin?login_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/migrate/repositories/admin": {
      "post": {
        "tags": [
          "github_app"
        ],
        "summary": "Migrate All Repositories",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "migrate_all_repositories_api_app_github_migrate_repositories_admin_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/app/github/migrate/repositories/admin\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/migrate/repositories/admin\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request POST '{{baseUrl}}/api/app/github/migrate/repositories/admin' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/migrate/repositories/admin\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/migrate/repositories/admin',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/app/github/migrate/repositories/admin'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/migrate/repositories/admin\"\n  method := \"POST\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/app/github/migrate/repositories/admin HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/migrate/repositories/admin\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/app/github/migrate/repositories/admin\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/migrate/repositories/admin\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/migrate/repositories/admin\")\n  .method(\"POST\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/app/github/migrate/repositories/admin\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"text/plain\".toMediaType()\nval body = \"\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/migrate/repositories/admin\")\n  .post(body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/migrate/repositories/admin',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/migrate/repositories/admin',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/app/github/migrate/repositories/admin',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/app/github/migrate/repositories/admin')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/migrate/repositories/admin\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/migrate/repositories/admin\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('POST', '{{baseUrl}}/api/app/github/migrate/repositories/admin', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/migrate/repositories/admin');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/migrate/repositories/admin',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/migrate/repositories/admin');\n$request->setRequestMethod('POST');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/migrate/repositories/admin' -Method 'POST' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/migrate/repositories/admin\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"POST\", \"/api/app/github/migrate/repositories/admin\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/migrate/repositories/admin\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/app/github/migrate/repositories/admin\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- postForm(\"{{baseUrl}}/api/app/github/migrate/repositories/admin\", .opts=list(httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/app/github/migrate/repositories/admin\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 POST '{{baseUrl}}/api/app/github/migrate/repositories/admin' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/migrate/repositories/admin'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/migrate/repositories/admin\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"POST\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/install/repositories/admin": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Install All Repositories",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "install_all_repositories_api_app_github_install_repositories_admin_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "login_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Login Id"
            }
          },
          {
            "name": "should_install",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false,
              "title": "Should Install"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/install/repositories/admin?login_id=<string>&should_install=false HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/install/repositories/admin?login_id=<string>&should_install=false'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/install/repositories/admin?login_id=%3Cstring%3E&should_install=false\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/install/selected/repository/admin": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Install All Repositories Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "install_all_repositories_admin_api_app_github_install_selected_repository_admin_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "org_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          },
          {
            "name": "repo_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Repo Name"
            }
          },
          {
            "name": "user_github_login_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User Github Login Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/install/selected/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/delete/repository": {
      "delete": {
        "tags": [
          "github_app"
        ],
        "summary": "Delete All Repositories",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "delete_all_repositories_api_app_github_delete_repository_delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "title": "Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Delete, \"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Delete);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request DELETE '{{baseUrl}}/api/app/github/delete/repository?id=%3Cinteger%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/delete/repository?id=%3Cinteger%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/delete/repository?id=<integer>',\n  options: Options(\n    method: 'DELETE',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('DELETE', Uri.parse('{{baseUrl}}/api/app/github/delete/repository?id=<integer>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/delete/repository?id=%3Cinteger%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "DELETE /api/app/github/delete/repository?id=<integer> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"DELETE\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"{{baseUrl}}/api/app/github/delete/repository?id=%3Cinteger%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\")\n  .method(\"DELETE\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.delete(\"{{baseUrl}}/api/app/github/delete/repository?id=%3Cinteger%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"text/plain\".toMediaType()\nval body = \"\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\")\n  .method(\"DELETE\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'delete',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/delete/repository?id=<integer>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'DELETE',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/delete/repository?id=%3Cinteger%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'DELETE',\n  'url': '{{baseUrl}}/api/app/github/delete/repository?id=<integer>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('DELETE', '{{baseUrl}}/api/app/github/delete/repository?id=<integer>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/delete/repository?id=%3Cinteger%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/delete/repository?id=%3Cinteger%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `DELETE uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('DELETE', '{{baseUrl}}/api/app/github/delete/repository?id=<integer>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/delete/repository?id=<integer>');\n$request->setMethod(HTTP_Request2::METHOD_DELETE);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/delete/repository?id=%3Cinteger%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'DELETE',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/delete/repository?id=<integer>');\n$request->setRequestMethod('DELETE');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/delete/repository?id=<integer>' -Method 'DELETE' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"DELETE\", \"/api/app/github/delete/repository?id=%3Cinteger%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::DELETE, \"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- httpDELETE(\"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\", httpheader = headers, followlocation = TRUE)\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"DELETE\", url = \"{{baseUrl}}/api/app/github/delete/repository?id=<integer>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 DELETE '{{baseUrl}}/api/app/github/delete/repository?id=<integer>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method DELETE \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/delete/repository?id=<integer>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/delete/repository?id=%3Cinteger%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/delete/repository/admin": {
      "delete": {
        "tags": [
          "github_app"
        ],
        "summary": "Delete All Repositories Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "delete_all_repositories_admin_api_app_github_delete_repository_admin_delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "org_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          },
          {
            "name": "repo_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Repo Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Delete, \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Delete);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff --request DELETE '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"DELETE\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  options: Options(\n    method: 'DELETE',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('DELETE', Uri.parse('{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\"\n  method := \"DELETE\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "DELETE /api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"DELETE\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"DELETE\", \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\",\n  \"method\": \"DELETE\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n  .method(\"DELETE\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.delete(\"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"text/plain\".toMediaType()\nval body = \"\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n  .method(\"DELETE\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'delete',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'DELETE',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'DELETE',\n  'url': '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('DELETE', '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"DELETE\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `DELETE uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('DELETE', '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>');\n$request->setMethod(HTTP_Request2::METHOD_DELETE);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'DELETE',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>');\n$request->setRequestMethod('DELETE');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>' -Method 'DELETE' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"DELETE\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"DELETE\", \"/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Delete.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::DELETE, \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- httpDELETE(\"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\", httpheader = headers, followlocation = TRUE)\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"DELETE\", url = \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 DELETE '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method DELETE \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/delete/repository/admin?org_name=<string>&installation_id=<string>&repo_name=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/delete/repository/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"DELETE\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/generate/documentation/status": {
      "post": {
        "tags": [
          "github_app"
        ],
        "summary": "Get Status Of Documentation Gen",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_status_of_documentation_gen_api_app_github_generate_documentation_status_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergedPullRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/app/github/generate/documentation/status\");\nrequest.Headers.Add(\"api-key\", \"\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/generate/documentation/status\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"api_token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"full_repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"AZUREDEVOPS\"\",\" + \"\\n\" +\n@\"  \"\"git_app\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"PREMIUM\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {}\" + \"\\n\" +\n@\"  }\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/generate/documentation/status' \\\n--header 'api-key;' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/generate/documentation/status\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: \");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/generate/documentation/status',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/app/github/generate/documentation/status'));\nrequest.body = json.encode({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/generate/documentation/status\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/app/github/generate/documentation/status HTTP/1.1\nHost: {{baseUrl}}\napi-key: \nContent-Type: application/json\nAccept: application/json\nContent-Length: 2161\n\n{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/generate/documentation/status\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/app/github/generate/documentation/status\");\nxhr.setRequestHeader(\"api-key\", \"\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/generate/documentation/status\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/generate/documentation/status\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/app/github/generate/documentation/status\")\n  .header(\"api-key\", \"\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/generate/documentation/status\")\n  .post(body)\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/generate/documentation/status',\n  headers: { \n    'api-key': '', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/generate/documentation/status',\n  'headers': {\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/app/github/generate/documentation/status',\n  'headers': {\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/app/github/generate/documentation/status')\n  .headers({\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/generate/documentation/status\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/generate/documentation/status\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '2161'\n];\n$body = '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}';\n$request = new Request('POST', '{{baseUrl}}/api/app/github/generate/documentation/status', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/generate/documentation/status');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"api_token\": \"<string>\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"installation_id\": \"<string>\",\\n  \"organization_name\": \"<string>\",\\n  \"repo_name\": \"<string>\",\\n  \"full_repo_name\": \"<string>\",\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"vendor\": \"AZUREDEVOPS\",\\n  \"git_app\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"PREMIUM\",\\n    \"netlify\": {}\\n  }\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/generate/documentation/status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: ',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/generate/documentation/status');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"api_token`\": `\"<string>`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"installation_id`\": `\"<string>`\",\n  `\"organization_name`\": `\"<string>`\",\n  `\"repo_name`\": `\"<string>`\",\n  `\"full_repo_name`\": `\"<string>`\",\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"vendor`\": `\"AZUREDEVOPS`\",\n  `\"git_app`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"PREMIUM`\",\n    `\"netlify`\": {}\n  }\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/generate/documentation/status' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/app/github/generate/documentation/status\"\n\npayload = json.dumps({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\nheaders = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\nheaders = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/app/github/generate/documentation/status\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/generate/documentation/status\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"PREMIUM\",\n        \"netlify\": {}\n    }\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/app/github/generate/documentation/status\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"2161\"\n)\nparams = \"{\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"api_token\\\": \\\"<string>\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"installation_id\\\": \\\"<string>\\\",\n  \\\"organization_name\\\": \\\"<string>\\\",\n  \\\"repo_name\\\": \\\"<string>\\\",\n  \\\"full_repo_name\\\": \\\"<string>\\\",\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\n  \\\"git_app\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\n    \\\"netlify\\\": {}\n  }\n}\"\nres <- postForm(\"{{baseUrl}}/api/app/github/generate/documentation/status\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '2161'\n)\n\nbody = '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/app/github/generate/documentation/status\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/app/github/generate/documentation/status' \\\n api-key: \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: ' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}' \\\n   '{{baseUrl}}/api/app/github/generate/documentation/status'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/generate/documentation/status\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/generate/documentation": {
      "post": {
        "tags": [
          "github_app"
        ],
        "summary": "Generate Documentation",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "generate_documentation_api_app_github_generate_documentation_post",
        "parameters": [
          {
            "name": "response_class",
            "in": "query",
            "required": false,
            "schema": {
              "title": "Response Class"
            }
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergedPullRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\");\nrequest.Headers.Add(\"api-key\", \"\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"api_token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"full_repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"AZUREDEVOPS\"\",\" + \"\\n\" +\n@\"  \"\"git_app\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"PREMIUM\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {}\" + \"\\n\" +\n@\"  }\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/generate/documentation?title=Response%20Class' \\\n--header 'api-key;' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/generate/documentation?title=Response%20Class\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: \");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/generate/documentation?title=Response Class',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/app/github/generate/documentation?title=Response Class'));\nrequest.body = json.encode({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/generate/documentation?title=Response%20Class\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/app/github/generate/documentation?title=Response Class HTTP/1.1\nHost: {{baseUrl}}\napi-key: \nContent-Type: application/json\nAccept: application/json\nContent-Length: 2161\n\n{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/app/github/generate/documentation?title=Response%20Class\");\nxhr.setRequestHeader(\"api-key\", \"\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/app/github/generate/documentation?title=Response%20Class\")\n  .header(\"api-key\", \"\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\")\n  .post(body)\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/generate/documentation?title=Response Class',\n  headers: { \n    'api-key': '', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/generate/documentation?title=Response%20Class',\n  'headers': {\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/app/github/generate/documentation?title=Response Class',\n  'headers': {\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/app/github/generate/documentation?title=Response Class')\n  .headers({\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"PREMIUM\",\n      \"netlify\": {}\n    }\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/generate/documentation?title=Response%20Class\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/generate/documentation?title=Response%20Class\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '2161'\n];\n$body = '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}';\n$request = new Request('POST', '{{baseUrl}}/api/app/github/generate/documentation?title=Response Class', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/generate/documentation?title=Response Class');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"api_token\": \"<string>\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"installation_id\": \"<string>\",\\n  \"organization_name\": \"<string>\",\\n  \"repo_name\": \"<string>\",\\n  \"full_repo_name\": \"<string>\",\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"vendor\": \"AZUREDEVOPS\",\\n  \"git_app\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"PREMIUM\",\\n    \"netlify\": {}\\n  }\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/generate/documentation?title=Response%20Class',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: ',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/generate/documentation?title=Response Class');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"api_token`\": `\"<string>`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"installation_id`\": `\"<string>`\",\n  `\"organization_name`\": `\"<string>`\",\n  `\"repo_name`\": `\"<string>`\",\n  `\"full_repo_name`\": `\"<string>`\",\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"vendor`\": `\"AZUREDEVOPS`\",\n  `\"git_app`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"PREMIUM`\",\n    `\"netlify`\": {}\n  }\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/generate/documentation?title=Response Class' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\"\n\npayload = json.dumps({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\nheaders = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\nheaders = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/app/github/generate/documentation?title=Response%20Class\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"api_token\": \"<string>\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"installation_id\": \"<string>\",\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"full_repo_name\": \"<string>\",\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"vendor\": \"AZUREDEVOPS\",\n    \"git_app\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"PREMIUM\",\n        \"netlify\": {}\n    }\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"2161\"\n)\nparams = \"{\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"api_token\\\": \\\"<string>\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"installation_id\\\": \\\"<string>\\\",\n  \\\"organization_name\\\": \\\"<string>\\\",\n  \\\"repo_name\\\": \\\"<string>\\\",\n  \\\"full_repo_name\\\": \\\"<string>\\\",\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\n  \\\"git_app\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\n    \\\"netlify\\\": {}\n  }\n}\"\nres <- postForm(\"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '2161'\n)\n\nbody = '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/app/github/generate/documentation?title=Response Class\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/app/github/generate/documentation?title=Response Class' \\\n api-key: \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: ' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"api_token\": \"<string>\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"installation_id\": \"<string>\",\n  \"organization_name\": \"<string>\",\n  \"repo_name\": \"<string>\",\n  \"full_repo_name\": \"<string>\",\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"vendor\": \"AZUREDEVOPS\",\n  \"git_app\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"PREMIUM\",\n    \"netlify\": {}\n  }\n}' \\\n   '{{baseUrl}}/api/app/github/generate/documentation?title=Response Class'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"api_token\\\": \\\"<string>\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"installation_id\\\": \\\"<string>\\\",\\n  \\\"organization_name\\\": \\\"<string>\\\",\\n  \\\"repo_name\\\": \\\"<string>\\\",\\n  \\\"full_repo_name\\\": \\\"<string>\\\",\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"vendor\\\": \\\"AZUREDEVOPS\\\",\\n  \\\"git_app\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"PREMIUM\\\",\\n    \\\"netlify\\\": {}\\n  }\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/generate/documentation?title=Response%20Class\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/modified-functions": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Get Modified Functions",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_modified_functions_api_app_github_modified_functions_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/app/github/report/errors": {
      "post": {
        "tags": [
          "github_app"
        ],
        "summary": "Report Errors",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "report_errors_api_app_github_report_errors_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_report_errors_api_app_github_report_errors_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/app/github/report/errors\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"message\\\": \\\"<string>\\\",\\n  \\\"repo_details\\\": {}\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/report/errors\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_details\"\": {}\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/report/errors' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/report/errors\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"message\\\": \\\"<string>\\\",\\n  \\\"repo_details\\\": {}\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/report/errors',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/app/github/report/errors'));\nrequest.body = json.encode({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/report/errors\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/app/github/report/errors HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 49\n\n{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/report/errors\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/app/github/report/errors\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/report/errors\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"message\": \"<string>\",\n    \"repo_details\": {}\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"message\\\": \\\"<string>\\\",\\n  \\\"repo_details\\\": {}\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/report/errors\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/app/github/report/errors\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"message\\\": \\\"<string>\\\",\\n  \\\"repo_details\\\": {}\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"message\\\": \\\"<string>\\\",\\n  \\\"repo_details\\\": {}\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/report/errors\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/report/errors',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/report/errors',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/app/github/report/errors',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"message\": \"<string>\",\n    \"repo_details\": {}\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/app/github/report/errors')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"message\": \"<string>\",\n    \"repo_details\": {}\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/report/errors\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"message\\\": \\\"<string>\\\",\\n  \\\"repo_details\\\": {}\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"message\\\": \\\"<string>\\\",\\n  \\\"repo_details\\\": {}\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/report/errors\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '49'\n];\n$body = '{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}';\n$request = new Request('POST', '{{baseUrl}}/api/app/github/report/errors', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/report/errors');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"message\": \"<string>\",\\n  \"repo_details\": {}\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/report/errors',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/report/errors');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"message`\": `\"<string>`\",\n  `\"repo_details`\": {}\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/report/errors' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/app/github/report/errors\"\n\npayload = json.dumps({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/app/github/report/errors\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/report/errors\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"message\": \"<string>\",\n    \"repo_details\": {}\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/app/github/report/errors\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"49\"\n)\nparams = \"{\n  \\\"message\\\": \\\"<string>\\\",\n  \\\"repo_details\\\": {}\n}\"\nres <- postForm(\"{{baseUrl}}/api/app/github/report/errors\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '49'\n)\n\nbody = '{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/app/github/report/errors\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/app/github/report/errors' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"message\": \"<string>\",\n  \"repo_details\": {}\n}' \\\n   '{{baseUrl}}/api/app/github/report/errors'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"message\\\": \\\"<string>\\\",\\n  \\\"repo_details\\\": {}\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/report/errors\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/list": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Get User Count",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_user_count_api_app_github_list_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Orgname"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/list?orgName=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/list?orgName=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/list?orgName=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/list?orgName=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/list?orgName=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/list?orgName=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/list?orgName=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/list?orgName=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/list?orgName=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/list?orgName=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/list?orgName=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/list?orgName=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/list?orgName=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/list?orgName=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/list?orgName=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/list?orgName=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/list?orgName=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/list?orgName=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/list?orgName=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/list?orgName=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/list?orgName=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/list?orgName=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/list?orgName=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/list?orgName=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/list?orgName=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/list?orgName=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/list?orgName=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/list?orgName=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/list?orgName=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/list?orgName=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/list?orgName=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/list?orgName=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/list?orgName=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/list?orgName=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/get/repo": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Get Single Repo",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_single_repo_api_app_github_get_repo_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "orgName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "title": "Orgname"
            }
          },
          {
            "name": "repoName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "minLength": 1,
              "title": "Reponame"
            }
          },
          {
            "name": "vendor",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/GitVendor"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/get/repo?orgName=<string>&repoName=<string>&vendor=AZUREDEVOPS'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/get/repo?orgName=%3Cstring%3E&repoName=%3Cstring%3E&vendor=AZUREDEVOPS\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/start/repo/documentation/admin": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Start Repo Documentation Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "start_repo_documentation_admin_api_app_github_start_repo_documentation_admin_get",
        "parameters": [
          {
            "name": "org_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          },
          {
            "name": "repo_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Repo Name"
            }
          },
          {
            "name": "user_github_login_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "User Github Login Id"
            }
          },
          {
            "name": "request-source",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Request-Source"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\");\nrequest.Headers.Add(\"request-source\", \"\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"request-source\", \"\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E' \\\n--header 'request-source;' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"request-source: \");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'request-source': '',\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'request-source': '',\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"request-source\", \"\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string> HTTP/1.1\nHost: {{baseUrl}}\nrequest-source: \nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"request-source\", \"\");\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\");\nxhr.setRequestHeader(\"request-source\", \"\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"request-source\": \"\",\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"request-source\", \"\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\")\n  .header(\"request-source\", \"\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n  .addHeader(\"request-source\", \"\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>',\n  headers: { \n    'request-source': '', \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E',\n  'headers': {\n    'request-source': '',\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>',\n  'headers': {\n    'request-source': '',\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>')\n  .headers({\n    'request-source': '',\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"request-source\": @\"\",\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"request-source\" \"\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'request-source' => '',\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'request-source' => '',\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'request-source: ',\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'request-source' => '',\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"request-source\", \"\")\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\"\n\npayload = {}\nheaders = {\n  'request-source': '',\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'request-source': '',\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"request-source\"] = \"\"\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"request-source\", \"\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"request-source\" = \"\",\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'request-source' = '',\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>' \\\n request-source: \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'request-source: ' \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=<string>&installation_id=<string>&repo_name=<string>&user_github_login_id=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/start/repo/documentation/admin?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E&user_github_login_id=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"\", forHTTPHeaderField: \"request-source\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/start/repo/documentation": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Start Repo Documentation",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "start_repo_documentation_api_app_github_start_repo_documentation_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "org_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          },
          {
            "name": "repo_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Repo Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/start/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/start/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/status/repo/documentation": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Status Repo Documentation",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "status_repo_documentation_api_app_github_status_repo_documentation_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "org_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          },
          {
            "name": "repo_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Repo Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/status/repo/documentation?org_name=<string>&installation_id=<string>&repo_name=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/status/repo/documentation?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/upgrade/premium": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Upgrade Premium",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "upgrade_premium_api_app_github_upgrade_premium_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "org_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Org Name"
            }
          },
          {
            "name": "installation_id",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          },
          {
            "name": "repo_name",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Repo Name"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/upgrade/premium?org_name=<string>&installation_id=<string>&repo_name=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/upgrade/premium?org_name=%3Cstring%3E&installation_id=%3Cstring%3E&repo_name=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/reconcile/user": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Reconcile Github User Id",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "reconcile_github_user_id_api_app_github_reconcile_user_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/reconcile/user\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/reconcile/user\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/reconcile/user' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/reconcile/user\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/reconcile/user',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/reconcile/user'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/reconcile/user\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/reconcile/user HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/reconcile/user\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/reconcile/user\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/reconcile/user\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/reconcile/user\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/reconcile/user\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/reconcile/user\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/reconcile/user',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/reconcile/user',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/reconcile/user',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/reconcile/user')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/reconcile/user\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/reconcile/user\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/reconcile/user', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/reconcile/user');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/reconcile/user',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/reconcile/user');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/reconcile/user' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/reconcile/user\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/reconcile/user\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/reconcile/user\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/reconcile/user\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/reconcile/user\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/reconcile/user\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/reconcile/user' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/reconcile/user'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/reconcile/user\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/app/github/fetch-token": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": " Fetch Token",
        "operationId": "_fetch_token_api_app_github_fetch_token_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "installation_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/app/github/raise_pr": {
      "get": {
        "tags": [
          "github_app"
        ],
        "summary": "Raise Pr",
        "operationId": "raise_pr_api_app_github_raise_pr_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "installation_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Installation Id"
            }
          },
          {
            "name": "owner",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Owner"
            }
          },
          {
            "name": "repo",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Repo"
            }
          },
          {
            "name": "main",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Main"
            }
          },
          {
            "name": "target_branch",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Target Branch"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string> HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/app/github/raise_pr?installation_id=<string>&owner=<string>&repo=<string>&main=<string>&target_branch=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/app/github/raise_pr?installation_id=%3Cstring%3E&owner=%3Cstring%3E&repo=%3Cstring%3E&main=%3Cstring%3E&target_branch=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/coupon/get/all": {
      "get": {
        "tags": [
          "coupon"
        ],
        "summary": "Get Coupon",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_coupon_api_v1_coupon_get_all_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/coupon/get/all\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/coupon/get/all\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/coupon/get/all' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/coupon/get/all\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/coupon/get/all',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/coupon/get/all'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/coupon/get/all\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/coupon/get/all HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/coupon/get/all\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/coupon/get/all\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/coupon/get/all\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/get/all\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/coupon/get/all\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/get/all\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/coupon/get/all',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/coupon/get/all',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/coupon/get/all',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/coupon/get/all')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/coupon/get/all\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/coupon/get/all\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/coupon/get/all', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/coupon/get/all');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/coupon/get/all',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/coupon/get/all');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/coupon/get/all' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/coupon/get/all\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/coupon/get/all\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/coupon/get/all\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/coupon/get/all\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/coupon/get/all\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/coupon/get/all\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/coupon/get/all' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/coupon/get/all'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/coupon/get/all\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/coupon/get/all/admin": {
      "get": {
        "tags": [
          "coupon"
        ],
        "summary": "Get Coupon All Admin",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "get_coupon_all_admin_api_v1_coupon_get_all_admin_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/api/v1/coupon/get/all/admin\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/coupon/get/all/admin\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/coupon/get/all/admin' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/coupon/get/all/admin\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/coupon/get/all/admin',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/api/v1/coupon/get/all/admin'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/coupon/get/all/admin\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /api/v1/coupon/get/all/admin HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/coupon/get/all/admin\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/api/v1/coupon/get/all/admin\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/coupon/get/all/admin\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/get/all/admin\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/api/v1/coupon/get/all/admin\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/get/all/admin\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/coupon/get/all/admin',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/coupon/get/all/admin',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/api/v1/coupon/get/all/admin',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/api/v1/coupon/get/all/admin')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/coupon/get/all/admin\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/coupon/get/all/admin\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/api/v1/coupon/get/all/admin', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/coupon/get/all/admin');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/coupon/get/all/admin',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/coupon/get/all/admin');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/coupon/get/all/admin' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/api/v1/coupon/get/all/admin\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/api/v1/coupon/get/all/admin\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/coupon/get/all/admin\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/api/v1/coupon/get/all/admin\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/api/v1/coupon/get/all/admin\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/api/v1/coupon/get/all/admin\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/api/v1/coupon/get/all/admin' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/api/v1/coupon/get/all/admin'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/coupon/get/all/admin\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/coupon/create": {
      "post": {
        "tags": [
          "coupon"
        ],
        "summary": "Create",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "create_api_v1_coupon_create_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Coupon"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/coupon/create\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/coupon/create\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"coupon_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"is_active\"\": true,\" + \"\\n\" +\n@\"  \"\"is_deleted\"\": false,\" + \"\\n\" +\n@\"  \"\"is_used\"\": false,\" + \"\\n\" +\n@\"  \"\"used_at\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"  \"\"amount\"\": 0,\" + \"\\n\" +\n@\"  \"\"used_source\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"currency\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"coupon_type\"\": \"\"JOINING\"\",\" + \"\\n\" +\n@\"  \"\"coupon_state\"\": \"\"PAYMENT_ACTIVE\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/coupon/create' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/coupon/create\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/coupon/create',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/coupon/create'));\nrequest.body = json.encode({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/coupon/create\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/coupon/create HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 299\n\n{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/coupon/create\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/coupon/create\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/coupon/create\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"user_id\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"coupon_code\": \"<string>\",\n    \"is_active\": true,\n    \"is_deleted\": false,\n    \"is_used\": false,\n    \"used_at\": \"<date>\",\n    \"amount\": 0,\n    \"used_source\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"coupon_type\": \"JOINING\",\n    \"coupon_state\": \"PAYMENT_ACTIVE\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/create\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/coupon/create\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/create\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/coupon/create',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/coupon/create',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/coupon/create',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"user_id\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"coupon_code\": \"<string>\",\n    \"is_active\": true,\n    \"is_deleted\": false,\n    \"is_used\": false,\n    \"used_at\": \"<date>\",\n    \"amount\": 0,\n    \"used_source\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"coupon_type\": \"JOINING\",\n    \"coupon_state\": \"PAYMENT_ACTIVE\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/coupon/create')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"user_id\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"coupon_code\": \"<string>\",\n    \"is_active\": true,\n    \"is_deleted\": false,\n    \"is_used\": false,\n    \"used_at\": \"<date>\",\n    \"amount\": 0,\n    \"used_source\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"coupon_type\": \"JOINING\",\n    \"coupon_state\": \"PAYMENT_ACTIVE\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/coupon/create\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/coupon/create\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '299'\n];\n$body = '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/coupon/create', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/coupon/create');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"user_id\": \"<integer>\",\\n  \"id\": \"<integer>\",\\n  \"coupon_code\": \"<string>\",\\n  \"is_active\": true,\\n  \"is_deleted\": false,\\n  \"is_used\": false,\\n  \"used_at\": \"<date>\",\\n  \"amount\": 0,\\n  \"used_source\": \"<string>\",\\n  \"currency\": \"<string>\",\\n  \"coupon_type\": \"JOINING\",\\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/coupon/create',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/coupon/create');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"user_id`\": `\"<integer>`\",\n  `\"id`\": `\"<integer>`\",\n  `\"coupon_code`\": `\"<string>`\",\n  `\"is_active`\": true,\n  `\"is_deleted`\": false,\n  `\"is_used`\": false,\n  `\"used_at`\": `\"<date>`\",\n  `\"amount`\": 0,\n  `\"used_source`\": `\"<string>`\",\n  `\"currency`\": `\"<string>`\",\n  `\"coupon_type`\": `\"JOINING`\",\n  `\"coupon_state`\": `\"PAYMENT_ACTIVE`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/coupon/create' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/coupon/create\"\n\npayload = json.dumps({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": True,\n  \"is_deleted\": False,\n  \"is_used\": False,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": True,\n  \"is_deleted\": False,\n  \"is_used\": False,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/coupon/create\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/coupon/create\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"user_id\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"coupon_code\": \"<string>\",\n    \"is_active\": true,\n    \"is_deleted\": false,\n    \"is_used\": false,\n    \"used_at\": \"<date>\",\n    \"amount\": 0,\n    \"used_source\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"coupon_type\": \"JOINING\",\n    \"coupon_state\": \"PAYMENT_ACTIVE\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/coupon/create\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"299\"\n)\nparams = \"{\n  \\\"user_id\\\": \\\"<integer>\\\",\n  \\\"id\\\": \\\"<integer>\\\",\n  \\\"coupon_code\\\": \\\"<string>\\\",\n  \\\"is_active\\\": true,\n  \\\"is_deleted\\\": false,\n  \\\"is_used\\\": false,\n  \\\"used_at\\\": \\\"<date>\\\",\n  \\\"amount\\\": 0,\n  \\\"used_source\\\": \\\"<string>\\\",\n  \\\"currency\\\": \\\"<string>\\\",\n  \\\"coupon_type\\\": \\\"JOINING\\\",\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/coupon/create\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '299'\n)\n\nbody = '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/coupon/create\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/coupon/create' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}' \\\n   '{{baseUrl}}/api/v1/coupon/create'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/coupon/create\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/coupon/update": {
      "post": {
        "tags": [
          "coupon"
        ],
        "summary": "Update",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "update_api_v1_coupon_update_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Coupon"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/coupon/update\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/coupon/update\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"  \"\"coupon_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"is_active\"\": true,\" + \"\\n\" +\n@\"  \"\"is_deleted\"\": false,\" + \"\\n\" +\n@\"  \"\"is_used\"\": false,\" + \"\\n\" +\n@\"  \"\"used_at\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"  \"\"amount\"\": 0,\" + \"\\n\" +\n@\"  \"\"used_source\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"currency\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"coupon_type\"\": \"\"JOINING\"\",\" + \"\\n\" +\n@\"  \"\"coupon_state\"\": \"\"PAYMENT_ACTIVE\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/coupon/update' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/coupon/update\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/coupon/update',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/coupon/update'));\nrequest.body = json.encode({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/coupon/update\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/coupon/update HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 299\n\n{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/coupon/update\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/coupon/update\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/coupon/update\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"user_id\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"coupon_code\": \"<string>\",\n    \"is_active\": true,\n    \"is_deleted\": false,\n    \"is_used\": false,\n    \"used_at\": \"<date>\",\n    \"amount\": 0,\n    \"used_source\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"coupon_type\": \"JOINING\",\n    \"coupon_state\": \"PAYMENT_ACTIVE\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/update\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/coupon/update\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/update\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/coupon/update',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/coupon/update',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/coupon/update',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"user_id\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"coupon_code\": \"<string>\",\n    \"is_active\": true,\n    \"is_deleted\": false,\n    \"is_used\": false,\n    \"used_at\": \"<date>\",\n    \"amount\": 0,\n    \"used_source\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"coupon_type\": \"JOINING\",\n    \"coupon_state\": \"PAYMENT_ACTIVE\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/coupon/update')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"user_id\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"coupon_code\": \"<string>\",\n    \"is_active\": true,\n    \"is_deleted\": false,\n    \"is_used\": false,\n    \"used_at\": \"<date>\",\n    \"amount\": 0,\n    \"used_source\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"coupon_type\": \"JOINING\",\n    \"coupon_state\": \"PAYMENT_ACTIVE\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/coupon/update\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/coupon/update\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '299'\n];\n$body = '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/coupon/update', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/coupon/update');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"user_id\": \"<integer>\",\\n  \"id\": \"<integer>\",\\n  \"coupon_code\": \"<string>\",\\n  \"is_active\": true,\\n  \"is_deleted\": false,\\n  \"is_used\": false,\\n  \"used_at\": \"<date>\",\\n  \"amount\": 0,\\n  \"used_source\": \"<string>\",\\n  \"currency\": \"<string>\",\\n  \"coupon_type\": \"JOINING\",\\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/coupon/update',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/coupon/update');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"user_id`\": `\"<integer>`\",\n  `\"id`\": `\"<integer>`\",\n  `\"coupon_code`\": `\"<string>`\",\n  `\"is_active`\": true,\n  `\"is_deleted`\": false,\n  `\"is_used`\": false,\n  `\"used_at`\": `\"<date>`\",\n  `\"amount`\": 0,\n  `\"used_source`\": `\"<string>`\",\n  `\"currency`\": `\"<string>`\",\n  `\"coupon_type`\": `\"JOINING`\",\n  `\"coupon_state`\": `\"PAYMENT_ACTIVE`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/coupon/update' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/coupon/update\"\n\npayload = json.dumps({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": True,\n  \"is_deleted\": False,\n  \"is_used\": False,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": True,\n  \"is_deleted\": False,\n  \"is_used\": False,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/coupon/update\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/coupon/update\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"user_id\": \"<integer>\",\n    \"id\": \"<integer>\",\n    \"coupon_code\": \"<string>\",\n    \"is_active\": true,\n    \"is_deleted\": false,\n    \"is_used\": false,\n    \"used_at\": \"<date>\",\n    \"amount\": 0,\n    \"used_source\": \"<string>\",\n    \"currency\": \"<string>\",\n    \"coupon_type\": \"JOINING\",\n    \"coupon_state\": \"PAYMENT_ACTIVE\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/coupon/update\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"299\"\n)\nparams = \"{\n  \\\"user_id\\\": \\\"<integer>\\\",\n  \\\"id\\\": \\\"<integer>\\\",\n  \\\"coupon_code\\\": \\\"<string>\\\",\n  \\\"is_active\\\": true,\n  \\\"is_deleted\\\": false,\n  \\\"is_used\\\": false,\n  \\\"used_at\\\": \\\"<date>\\\",\n  \\\"amount\\\": 0,\n  \\\"used_source\\\": \\\"<string>\\\",\n  \\\"currency\\\": \\\"<string>\\\",\n  \\\"coupon_type\\\": \\\"JOINING\\\",\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/coupon/update\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '299'\n)\n\nbody = '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/coupon/update\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/coupon/update' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"user_id\": \"<integer>\",\n  \"id\": \"<integer>\",\n  \"coupon_code\": \"<string>\",\n  \"is_active\": true,\n  \"is_deleted\": false,\n  \"is_used\": false,\n  \"used_at\": \"<date>\",\n  \"amount\": 0,\n  \"used_source\": \"<string>\",\n  \"currency\": \"<string>\",\n  \"coupon_type\": \"JOINING\",\n  \"coupon_state\": \"PAYMENT_ACTIVE\"\n}' \\\n   '{{baseUrl}}/api/v1/coupon/update'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"user_id\\\": \\\"<integer>\\\",\\n  \\\"id\\\": \\\"<integer>\\\",\\n  \\\"coupon_code\\\": \\\"<string>\\\",\\n  \\\"is_active\\\": true,\\n  \\\"is_deleted\\\": false,\\n  \\\"is_used\\\": false,\\n  \\\"used_at\\\": \\\"<date>\\\",\\n  \\\"amount\\\": 0,\\n  \\\"used_source\\\": \\\"<string>\\\",\\n  \\\"currency\\\": \\\"<string>\\\",\\n  \\\"coupon_type\\\": \\\"JOINING\\\",\\n  \\\"coupon_state\\\": \\\"PAYMENT_ACTIVE\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/coupon/update\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/coupon/redeem": {
      "post": {
        "tags": [
          "coupon"
        ],
        "summary": "Redeem",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "redeem_api_v1_coupon_redeem_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_redeem_api_v1_coupon_redeem_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/coupon/redeem\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"redeem_type\\\": \\\"<string>\\\",\\n  \\\"redeem_id\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/coupon/redeem\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"redeem_type\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"redeem_id\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/coupon/redeem' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/coupon/redeem\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"redeem_type\\\": \\\"<string>\\\",\\n  \\\"redeem_id\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/coupon/redeem',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/coupon/redeem'));\nrequest.body = json.encode({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/coupon/redeem\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/coupon/redeem HTTP/1.1\nHost: {{baseUrl}}\nContent-Type: application/json\nAccept: application/json\nContent-Length: 58\n\n{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/coupon/redeem\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/coupon/redeem\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/coupon/redeem\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"redeem_type\": \"<string>\",\n    \"redeem_id\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"redeem_type\\\": \\\"<string>\\\",\\n  \\\"redeem_id\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/redeem\")\n  .method(\"POST\", body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/coupon/redeem\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"redeem_type\\\": \\\"<string>\\\",\\n  \\\"redeem_id\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"redeem_type\\\": \\\"<string>\\\",\\n  \\\"redeem_id\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/coupon/redeem\")\n  .post(body)\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/coupon/redeem',\n  headers: { \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/coupon/redeem',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/coupon/redeem',\n  'headers': {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"redeem_type\": \"<string>\",\n    \"redeem_id\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/coupon/redeem')\n  .headers({\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"redeem_type\": \"<string>\",\n    \"redeem_id\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/coupon/redeem\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"redeem_type\\\": \\\"<string>\\\",\\n  \\\"redeem_id\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"redeem_type\\\": \\\"<string>\\\",\\n  \\\"redeem_id\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/coupon/redeem\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '58'\n];\n$body = '{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/coupon/redeem', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/coupon/redeem');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"redeem_type\": \"<string>\",\\n  \"redeem_id\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/coupon/redeem',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/coupon/redeem');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"redeem_type`\": `\"<string>`\",\n  `\"redeem_id`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/coupon/redeem' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/coupon/redeem\"\n\npayload = json.dumps({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n})\nheaders = {\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/coupon/redeem\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/coupon/redeem\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"redeem_type\": \"<string>\",\n    \"redeem_id\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/coupon/redeem\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"58\"\n)\nparams = \"{\n  \\\"redeem_type\\\": \\\"<string>\\\",\n  \\\"redeem_id\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/coupon/redeem\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '58'\n)\n\nbody = '{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/coupon/redeem\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/coupon/redeem' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"redeem_type\": \"<string>\",\n  \"redeem_id\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/coupon/redeem'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"redeem_type\\\": \\\"<string>\\\",\\n  \\\"redeem_id\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/coupon/redeem\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/generate/diff/doc": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Generate Diff Docs",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "generate_diff_docs_api_v1_git_generate_diff_doc_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/generate/diff/doc\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/generate/diff/doc\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/generate/diff/doc' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/generate/diff/doc\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/generate/diff/doc',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/generate/diff/doc'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/generate/diff/doc\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/generate/diff/doc HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/generate/diff/doc\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/generate/diff/doc\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/generate/diff/doc\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/diff/doc\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/generate/diff/doc\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/diff/doc\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/generate/diff/doc',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/generate/diff/doc',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/generate/diff/doc',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/generate/diff/doc')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/generate/diff/doc\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/generate/diff/doc\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/generate/diff/doc', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/generate/diff/doc');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/generate/diff/doc',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/generate/diff/doc');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/generate/diff/doc' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/generate/diff/doc\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/generate/diff/doc\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/generate/diff/doc\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/generate/diff/doc\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/generate/diff/doc\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/generate/diff/doc\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/generate/diff/doc' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/generate/diff/doc'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/generate/diff/doc\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/generate/diff/doc/status": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Status Diff Docs",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "status_diff_docs_api_v1_git_generate_diff_doc_status_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/generate/diff/doc/status\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/generate/diff/doc/status' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/generate/diff/doc/status',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/generate/diff/doc/status'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/generate/diff/doc/status HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/generate/diff/doc/status\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/diff/doc/status\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/generate/diff/doc/status\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/diff/doc/status\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/generate/diff/doc/status',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/generate/diff/doc/status',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/generate/diff/doc/status',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/generate/diff/doc/status')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/generate/diff/doc/status\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/generate/diff/doc/status', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/generate/diff/doc/status');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/generate/diff/doc/status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/generate/diff/doc/status');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/generate/diff/doc/status' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/generate/diff/doc/status\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/generate/diff/doc/status\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/generate/diff/doc/status\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/generate/diff/doc/status' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/generate/diff/doc/status'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/generate/diff/doc/status\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/generate/arch/doc": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Generate Arch Docs",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "generate_arch_docs_api_v1_git_generate_arch_doc_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/generate/arch/doc\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/generate/arch/doc\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/generate/arch/doc' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/generate/arch/doc\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/generate/arch/doc',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/generate/arch/doc'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/generate/arch/doc\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/generate/arch/doc HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/generate/arch/doc\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/generate/arch/doc\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/generate/arch/doc\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/arch/doc\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/generate/arch/doc\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/arch/doc\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/generate/arch/doc',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/generate/arch/doc',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/generate/arch/doc',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/generate/arch/doc')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/generate/arch/doc\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/generate/arch/doc\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/generate/arch/doc', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/generate/arch/doc');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/generate/arch/doc',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/generate/arch/doc');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/generate/arch/doc' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/generate/arch/doc\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/generate/arch/doc\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/generate/arch/doc\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/generate/arch/doc\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/generate/arch/doc\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/generate/arch/doc\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/generate/arch/doc' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/generate/arch/doc'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/generate/arch/doc\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/generate/arch/doc/status": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Status Html Docs",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "status_html_docs_api_v1_git_generate_arch_doc_status_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/generate/arch/doc/status\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/generate/arch/doc/status' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/generate/arch/doc/status',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/generate/arch/doc/status'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/generate/arch/doc/status HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/generate/arch/doc/status\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/arch/doc/status\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/generate/arch/doc/status\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/arch/doc/status\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/generate/arch/doc/status',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/generate/arch/doc/status',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/generate/arch/doc/status',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/generate/arch/doc/status')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/generate/arch/doc/status\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/generate/arch/doc/status', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/generate/arch/doc/status');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/generate/arch/doc/status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/generate/arch/doc/status');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/generate/arch/doc/status' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/generate/arch/doc/status\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/generate/arch/doc/status\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/generate/arch/doc/status\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/generate/arch/doc/status' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/generate/arch/doc/status'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/generate/arch/doc/status\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/generate/repo/doc": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Generate Docs",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "generate_docs_api_v1_git_generate_repo_doc_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/generate/repo/doc\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/generate/repo/doc\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/generate/repo/doc' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/generate/repo/doc\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/generate/repo/doc',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/generate/repo/doc'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/generate/repo/doc\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/generate/repo/doc HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/generate/repo/doc\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/generate/repo/doc\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/generate/repo/doc\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/repo/doc\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/generate/repo/doc\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/repo/doc\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/generate/repo/doc',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/generate/repo/doc',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/generate/repo/doc',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/generate/repo/doc')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/generate/repo/doc\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/generate/repo/doc\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/generate/repo/doc', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/generate/repo/doc');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/generate/repo/doc',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/generate/repo/doc');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/generate/repo/doc' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/generate/repo/doc\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/generate/repo/doc\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/generate/repo/doc\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/generate/repo/doc\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/generate/repo/doc\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/generate/repo/doc\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/generate/repo/doc' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/generate/repo/doc'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/generate/repo/doc\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/generate/repo/doc/status": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Status Docs",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "status_docs_api_v1_git_generate_repo_doc_status_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/generate/repo/doc/status\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/generate/repo/doc/status' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/generate/repo/doc/status',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/generate/repo/doc/status'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/generate/repo/doc/status HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/generate/repo/doc/status\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/repo/doc/status\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/generate/repo/doc/status\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/repo/doc/status\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/generate/repo/doc/status',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/generate/repo/doc/status',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/generate/repo/doc/status',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/generate/repo/doc/status')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/generate/repo/doc/status\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/generate/repo/doc/status', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/generate/repo/doc/status');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/generate/repo/doc/status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/generate/repo/doc/status');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/generate/repo/doc/status' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/generate/repo/doc/status\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/generate/repo/doc/status\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/generate/repo/doc/status\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/generate/repo/doc/status' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/generate/repo/doc/status'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/generate/repo/doc/status\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/generate/api/doc": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Generate Api Doc",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "generate_api_doc_api_v1_git_generate_api_doc_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/generate/api/doc\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/generate/api/doc\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/generate/api/doc' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/generate/api/doc\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/generate/api/doc',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/generate/api/doc'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/generate/api/doc\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/generate/api/doc HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/generate/api/doc\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/generate/api/doc\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/generate/api/doc\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/api/doc\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/generate/api/doc\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/api/doc\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/generate/api/doc',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/generate/api/doc',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/generate/api/doc',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/generate/api/doc')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/generate/api/doc\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/generate/api/doc\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/generate/api/doc', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/generate/api/doc');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/generate/api/doc',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/generate/api/doc');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/generate/api/doc' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/generate/api/doc\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/generate/api/doc\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/generate/api/doc\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/generate/api/doc\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/generate/api/doc\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/generate/api/doc\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/generate/api/doc' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/generate/api/doc'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/generate/api/doc\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/generate/api/doc/status": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Status Api Docs",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "status_api_docs_api_v1_git_generate_api_doc_status_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/generate/api/doc/status\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/generate/api/doc/status\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/generate/api/doc/status' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/generate/api/doc/status\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/generate/api/doc/status',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/generate/api/doc/status'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/generate/api/doc/status\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/generate/api/doc/status HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/generate/api/doc/status\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/generate/api/doc/status\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/generate/api/doc/status\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/api/doc/status\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/generate/api/doc/status\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/generate/api/doc/status\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/generate/api/doc/status',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/generate/api/doc/status',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/generate/api/doc/status',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/generate/api/doc/status')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/generate/api/doc/status\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/generate/api/doc/status\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/generate/api/doc/status', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/generate/api/doc/status');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/generate/api/doc/status',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/generate/api/doc/status');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/generate/api/doc/status' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/generate/api/doc/status\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/generate/api/doc/status\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/generate/api/doc/status\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/generate/api/doc/status\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/generate/api/doc/status\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/generate/api/doc/status\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/generate/api/doc/status' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/generate/api/doc/status'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/generate/api/doc/status\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/git/unlock/context": {
      "post": {
        "tags": [
          "git_doc_gen_new"
        ],
        "summary": "Unlock Context",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "unlock_context_api_v1_git_unlock_context_post",
        "parameters": [
          {
            "name": "contextType",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The type of context to unlock.",
              "title": "Contexttype"
            },
            "description": "The type of context to unlock."
          },
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DocGenRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\");\nrequest.Headers.Add(\"api-key\", \"<string>\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"<string>\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"  \"\"git_repo\"\": {\" + \"\\n\" +\n@\"    \"\"organization_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"installation_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"organization_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"repo_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_private\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_installed\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"is_deleted\"\": \"\"<boolean>\"\",\" + \"\\n\" +\n@\"    \"\"time_created\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"vendor\"\": \"\"GITHUB\"\",\" + \"\\n\" +\n@\"    \"\"time_updated\"\": \"\"<dateTime>\"\",\" + \"\\n\" +\n@\"    \"\"user_id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"token\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"plan_type\"\": \"\"FREE\"\",\" + \"\\n\" +\n@\"    \"\"netlify\"\": {},\" + \"\\n\" +\n@\"    \"\"repo_url_with_token\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"base_branch\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"commit_sha\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"head_branch_details\"\": {\" + \"\\n\" +\n@\"    \"\"name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"sha\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"user\"\": {\" + \"\\n\" +\n@\"    \"\"email\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"id\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"first_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"last_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"is_active\"\": false,\" + \"\\n\" +\n@\"    \"\"user_role\"\": \"\"VIEWER\"\",\" + \"\\n\" +\n@\"    \"\"github_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"google_login_id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"img_url\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"phone\"\": {},\" + \"\\n\" +\n@\"    \"\"birthdate\"\": \"\"<date>\"\",\" + \"\\n\" +\n@\"    \"\"gender\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"address\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"zip_code\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"city\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"country\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"lang\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"onboarding_channel\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"referred_by\"\": \"\"<integer>\"\",\" + \"\\n\" +\n@\"    \"\"github_login_name\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"    \"\"count_repo_gen\"\": 0,\" + \"\\n\" +\n@\"    \"\"password\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"  },\" + \"\\n\" +\n@\"  \"\"commit_message\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"repo_access_key\"\": \"\"<string>\"\"\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/git/unlock/context?contextType=%3Cstring%3E' \\\n--header 'api-key: <string>' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/git/unlock/context?contextType=%3Cstring%3E\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: <string>\");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>'));\nrequest.body = json.encode({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/git/unlock/context?contextType=%3Cstring%3E\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"<string>\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/git/unlock/context?contextType=<string> HTTP/1.1\nHost: {{baseUrl}}\napi-key: <string>\nContent-Type: application/json\nAccept: application/json\nContent-Length: 1449\n\n{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"<string>\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/git/unlock/context?contextType=%3Cstring%3E\");\nxhr.setRequestHeader(\"api-key\", \"<string>\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"<string>\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/git/unlock/context?contextType=%3Cstring%3E\")\n  .header(\"api-key\", \"<string>\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\")\n  .post(body)\n  .addHeader(\"api-key\", \"<string>\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>',\n  headers: { \n    'api-key': '<string>', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/git/unlock/context?contextType=%3Cstring%3E',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>',\n  'headers': {\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>')\n  .headers({\n    'api-key': '<string>',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n      \"organization_name\": \"<string>\",\n      \"repo_name\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"github_login_id\": \"<string>\",\n      \"installation_id\": \"<string>\",\n      \"organization_id\": \"<string>\",\n      \"repo_id\": \"<string>\",\n      \"is_active\": \"<boolean>\",\n      \"is_private\": \"<boolean>\",\n      \"is_installed\": \"<boolean>\",\n      \"is_deleted\": \"<boolean>\",\n      \"time_created\": \"<dateTime>\",\n      \"vendor\": \"GITHUB\",\n      \"time_updated\": \"<dateTime>\",\n      \"user_id\": \"<integer>\",\n      \"token\": \"<string>\",\n      \"plan_type\": \"FREE\",\n      \"netlify\": {},\n      \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n      \"name\": \"<string>\",\n      \"sha\": \"<string>\"\n    },\n    \"user\": {\n      \"email\": \"<string>\",\n      \"id\": \"<integer>\",\n      \"first_name\": \"<string>\",\n      \"last_name\": \"<string>\",\n      \"is_active\": false,\n      \"user_role\": \"VIEWER\",\n      \"github_login_id\": \"<string>\",\n      \"google_login_id\": \"<string>\",\n      \"img_url\": \"<string>\",\n      \"phone\": {},\n      \"birthdate\": \"<date>\",\n      \"gender\": \"<string>\",\n      \"address\": \"<string>\",\n      \"zip_code\": \"<string>\",\n      \"city\": \"<string>\",\n      \"country\": \"<string>\",\n      \"lang\": \"<string>\",\n      \"onboarding_channel\": \"<string>\",\n      \"referred_by\": \"<integer>\",\n      \"github_login_name\": \"<string>\",\n      \"count_repo_gen\": 0,\n      \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/git/unlock/context?contextType=%3Cstring%3E\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"<string>\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/git/unlock/context?contextType=%3Cstring%3E\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"<string>\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '1449'\n];\n$body = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"vendor\": \"GITHUB\",\\n  \"git_repo\": {\\n    \"organization_name\": \"<string>\",\\n    \"repo_name\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"github_login_id\": \"<string>\",\\n    \"installation_id\": \"<string>\",\\n    \"organization_id\": \"<string>\",\\n    \"repo_id\": \"<string>\",\\n    \"is_active\": \"<boolean>\",\\n    \"is_private\": \"<boolean>\",\\n    \"is_installed\": \"<boolean>\",\\n    \"is_deleted\": \"<boolean>\",\\n    \"time_created\": \"<dateTime>\",\\n    \"vendor\": \"GITHUB\",\\n    \"time_updated\": \"<dateTime>\",\\n    \"user_id\": \"<integer>\",\\n    \"token\": \"<string>\",\\n    \"plan_type\": \"FREE\",\\n    \"netlify\": {},\\n    \"repo_url_with_token\": \"<string>\"\\n  },\\n  \"base_branch\": \"<string>\",\\n  \"commit_sha\": \"<string>\",\\n  \"head_branch_details\": {\\n    \"name\": \"<string>\",\\n    \"sha\": \"<string>\"\\n  },\\n  \"user\": {\\n    \"email\": \"<string>\",\\n    \"id\": \"<integer>\",\\n    \"first_name\": \"<string>\",\\n    \"last_name\": \"<string>\",\\n    \"is_active\": false,\\n    \"user_role\": \"VIEWER\",\\n    \"github_login_id\": \"<string>\",\\n    \"google_login_id\": \"<string>\",\\n    \"img_url\": \"<string>\",\\n    \"phone\": {},\\n    \"birthdate\": \"<date>\",\\n    \"gender\": \"<string>\",\\n    \"address\": \"<string>\",\\n    \"zip_code\": \"<string>\",\\n    \"city\": \"<string>\",\\n    \"country\": \"<string>\",\\n    \"lang\": \"<string>\",\\n    \"onboarding_channel\": \"<string>\",\\n    \"referred_by\": \"<integer>\",\\n    \"github_login_name\": \"<string>\",\\n    \"count_repo_gen\": 0,\\n    \"password\": \"<string>\"\\n  },\\n  \"commit_message\": \"<string>\",\\n  \"repo_access_key\": \"<string>\"\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/git/unlock/context?contextType=%3Cstring%3E',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: <string>',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '<string>',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"<string>\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"vendor`\": `\"GITHUB`\",\n  `\"git_repo`\": {\n    `\"organization_name`\": `\"<string>`\",\n    `\"repo_name`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"installation_id`\": `\"<string>`\",\n    `\"organization_id`\": `\"<string>`\",\n    `\"repo_id`\": `\"<string>`\",\n    `\"is_active`\": `\"<boolean>`\",\n    `\"is_private`\": `\"<boolean>`\",\n    `\"is_installed`\": `\"<boolean>`\",\n    `\"is_deleted`\": `\"<boolean>`\",\n    `\"time_created`\": `\"<dateTime>`\",\n    `\"vendor`\": `\"GITHUB`\",\n    `\"time_updated`\": `\"<dateTime>`\",\n    `\"user_id`\": `\"<integer>`\",\n    `\"token`\": `\"<string>`\",\n    `\"plan_type`\": `\"FREE`\",\n    `\"netlify`\": {},\n    `\"repo_url_with_token`\": `\"<string>`\"\n  },\n  `\"base_branch`\": `\"<string>`\",\n  `\"commit_sha`\": `\"<string>`\",\n  `\"head_branch_details`\": {\n    `\"name`\": `\"<string>`\",\n    `\"sha`\": `\"<string>`\"\n  },\n  `\"user`\": {\n    `\"email`\": `\"<string>`\",\n    `\"id`\": `\"<integer>`\",\n    `\"first_name`\": `\"<string>`\",\n    `\"last_name`\": `\"<string>`\",\n    `\"is_active`\": false,\n    `\"user_role`\": `\"VIEWER`\",\n    `\"github_login_id`\": `\"<string>`\",\n    `\"google_login_id`\": `\"<string>`\",\n    `\"img_url`\": `\"<string>`\",\n    `\"phone`\": {},\n    `\"birthdate`\": `\"<date>`\",\n    `\"gender`\": `\"<string>`\",\n    `\"address`\": `\"<string>`\",\n    `\"zip_code`\": `\"<string>`\",\n    `\"city`\": `\"<string>`\",\n    `\"country`\": `\"<string>`\",\n    `\"lang`\": `\"<string>`\",\n    `\"onboarding_channel`\": `\"<string>`\",\n    `\"referred_by`\": `\"<integer>`\",\n    `\"github_login_name`\": `\"<string>`\",\n    `\"count_repo_gen`\": 0,\n    `\"password`\": `\"<string>`\"\n  },\n  `\"commit_message`\": `\"<string>`\",\n  `\"repo_access_key`\": `\"<string>`\"\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\"\n\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": False,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\nheaders = {\n  'api-key': '<string>',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/git/unlock/context?contextType=%3Cstring%3E\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"<string>\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"<string>\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"vendor\": \"GITHUB\",\n    \"git_repo\": {\n        \"organization_name\": \"<string>\",\n        \"repo_name\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"github_login_id\": \"<string>\",\n        \"installation_id\": \"<string>\",\n        \"organization_id\": \"<string>\",\n        \"repo_id\": \"<string>\",\n        \"is_active\": \"<boolean>\",\n        \"is_private\": \"<boolean>\",\n        \"is_installed\": \"<boolean>\",\n        \"is_deleted\": \"<boolean>\",\n        \"time_created\": \"<dateTime>\",\n        \"vendor\": \"GITHUB\",\n        \"time_updated\": \"<dateTime>\",\n        \"user_id\": \"<integer>\",\n        \"token\": \"<string>\",\n        \"plan_type\": \"FREE\",\n        \"netlify\": {},\n        \"repo_url_with_token\": \"<string>\"\n    },\n    \"base_branch\": \"<string>\",\n    \"commit_sha\": \"<string>\",\n    \"head_branch_details\": {\n        \"name\": \"<string>\",\n        \"sha\": \"<string>\"\n    },\n    \"user\": {\n        \"email\": \"<string>\",\n        \"id\": \"<integer>\",\n        \"first_name\": \"<string>\",\n        \"last_name\": \"<string>\",\n        \"is_active\": false,\n        \"user_role\": \"VIEWER\",\n        \"github_login_id\": \"<string>\",\n        \"google_login_id\": \"<string>\",\n        \"img_url\": \"<string>\",\n        \"phone\": {},\n        \"birthdate\": \"<date>\",\n        \"gender\": \"<string>\",\n        \"address\": \"<string>\",\n        \"zip_code\": \"<string>\",\n        \"city\": \"<string>\",\n        \"country\": \"<string>\",\n        \"lang\": \"<string>\",\n        \"onboarding_channel\": \"<string>\",\n        \"referred_by\": \"<integer>\",\n        \"github_login_name\": \"<string>\",\n        \"count_repo_gen\": 0,\n        \"password\": \"<string>\"\n    },\n    \"commit_message\": \"<string>\",\n    \"repo_access_key\": \"<string>\"\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"<string>\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"1449\"\n)\nparams = \"{\n  \\\"vendor\\\": \\\"GITHUB\\\",\n  \\\"git_repo\\\": {\n    \\\"organization_name\\\": \\\"<string>\\\",\n    \\\"repo_name\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"installation_id\\\": \\\"<string>\\\",\n    \\\"organization_id\\\": \\\"<string>\\\",\n    \\\"repo_id\\\": \\\"<string>\\\",\n    \\\"is_active\\\": \\\"<boolean>\\\",\n    \\\"is_private\\\": \\\"<boolean>\\\",\n    \\\"is_installed\\\": \\\"<boolean>\\\",\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\n    \\\"time_created\\\": \\\"<dateTime>\\\",\n    \\\"vendor\\\": \\\"GITHUB\\\",\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\n    \\\"user_id\\\": \\\"<integer>\\\",\n    \\\"token\\\": \\\"<string>\\\",\n    \\\"plan_type\\\": \\\"FREE\\\",\n    \\\"netlify\\\": {},\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\n  },\n  \\\"base_branch\\\": \\\"<string>\\\",\n  \\\"commit_sha\\\": \\\"<string>\\\",\n  \\\"head_branch_details\\\": {\n    \\\"name\\\": \\\"<string>\\\",\n    \\\"sha\\\": \\\"<string>\\\"\n  },\n  \\\"user\\\": {\n    \\\"email\\\": \\\"<string>\\\",\n    \\\"id\\\": \\\"<integer>\\\",\n    \\\"first_name\\\": \\\"<string>\\\",\n    \\\"last_name\\\": \\\"<string>\\\",\n    \\\"is_active\\\": false,\n    \\\"user_role\\\": \\\"VIEWER\\\",\n    \\\"github_login_id\\\": \\\"<string>\\\",\n    \\\"google_login_id\\\": \\\"<string>\\\",\n    \\\"img_url\\\": \\\"<string>\\\",\n    \\\"phone\\\": {},\n    \\\"birthdate\\\": \\\"<date>\\\",\n    \\\"gender\\\": \\\"<string>\\\",\n    \\\"address\\\": \\\"<string>\\\",\n    \\\"zip_code\\\": \\\"<string>\\\",\n    \\\"city\\\": \\\"<string>\\\",\n    \\\"country\\\": \\\"<string>\\\",\n    \\\"lang\\\": \\\"<string>\\\",\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\n    \\\"referred_by\\\": \\\"<integer>\\\",\n    \\\"github_login_name\\\": \\\"<string>\\\",\n    \\\"count_repo_gen\\\": 0,\n    \\\"password\\\": \\\"<string>\\\"\n  },\n  \\\"commit_message\\\": \\\"<string>\\\",\n  \\\"repo_access_key\\\": \\\"<string>\\\"\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '<string>',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '1449'\n)\n\nbody = '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>' \\\n api-key:'<string>' \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: <string>' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"vendor\": \"GITHUB\",\n  \"git_repo\": {\n    \"organization_name\": \"<string>\",\n    \"repo_name\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"github_login_id\": \"<string>\",\n    \"installation_id\": \"<string>\",\n    \"organization_id\": \"<string>\",\n    \"repo_id\": \"<string>\",\n    \"is_active\": \"<boolean>\",\n    \"is_private\": \"<boolean>\",\n    \"is_installed\": \"<boolean>\",\n    \"is_deleted\": \"<boolean>\",\n    \"time_created\": \"<dateTime>\",\n    \"vendor\": \"GITHUB\",\n    \"time_updated\": \"<dateTime>\",\n    \"user_id\": \"<integer>\",\n    \"token\": \"<string>\",\n    \"plan_type\": \"FREE\",\n    \"netlify\": {},\n    \"repo_url_with_token\": \"<string>\"\n  },\n  \"base_branch\": \"<string>\",\n  \"commit_sha\": \"<string>\",\n  \"head_branch_details\": {\n    \"name\": \"<string>\",\n    \"sha\": \"<string>\"\n  },\n  \"user\": {\n    \"email\": \"<string>\",\n    \"id\": \"<integer>\",\n    \"first_name\": \"<string>\",\n    \"last_name\": \"<string>\",\n    \"is_active\": false,\n    \"user_role\": \"VIEWER\",\n    \"github_login_id\": \"<string>\",\n    \"google_login_id\": \"<string>\",\n    \"img_url\": \"<string>\",\n    \"phone\": {},\n    \"birthdate\": \"<date>\",\n    \"gender\": \"<string>\",\n    \"address\": \"<string>\",\n    \"zip_code\": \"<string>\",\n    \"city\": \"<string>\",\n    \"country\": \"<string>\",\n    \"lang\": \"<string>\",\n    \"onboarding_channel\": \"<string>\",\n    \"referred_by\": \"<integer>\",\n    \"github_login_name\": \"<string>\",\n    \"count_repo_gen\": 0,\n    \"password\": \"<string>\"\n  },\n  \"commit_message\": \"<string>\",\n  \"repo_access_key\": \"<string>\"\n}' \\\n   '{{baseUrl}}/api/v1/git/unlock/context?contextType=<string>'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"vendor\\\": \\\"GITHUB\\\",\\n  \\\"git_repo\\\": {\\n    \\\"organization_name\\\": \\\"<string>\\\",\\n    \\\"repo_name\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"installation_id\\\": \\\"<string>\\\",\\n    \\\"organization_id\\\": \\\"<string>\\\",\\n    \\\"repo_id\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": \\\"<boolean>\\\",\\n    \\\"is_private\\\": \\\"<boolean>\\\",\\n    \\\"is_installed\\\": \\\"<boolean>\\\",\\n    \\\"is_deleted\\\": \\\"<boolean>\\\",\\n    \\\"time_created\\\": \\\"<dateTime>\\\",\\n    \\\"vendor\\\": \\\"GITHUB\\\",\\n    \\\"time_updated\\\": \\\"<dateTime>\\\",\\n    \\\"user_id\\\": \\\"<integer>\\\",\\n    \\\"token\\\": \\\"<string>\\\",\\n    \\\"plan_type\\\": \\\"FREE\\\",\\n    \\\"netlify\\\": {},\\n    \\\"repo_url_with_token\\\": \\\"<string>\\\"\\n  },\\n  \\\"base_branch\\\": \\\"<string>\\\",\\n  \\\"commit_sha\\\": \\\"<string>\\\",\\n  \\\"head_branch_details\\\": {\\n    \\\"name\\\": \\\"<string>\\\",\\n    \\\"sha\\\": \\\"<string>\\\"\\n  },\\n  \\\"user\\\": {\\n    \\\"email\\\": \\\"<string>\\\",\\n    \\\"id\\\": \\\"<integer>\\\",\\n    \\\"first_name\\\": \\\"<string>\\\",\\n    \\\"last_name\\\": \\\"<string>\\\",\\n    \\\"is_active\\\": false,\\n    \\\"user_role\\\": \\\"VIEWER\\\",\\n    \\\"github_login_id\\\": \\\"<string>\\\",\\n    \\\"google_login_id\\\": \\\"<string>\\\",\\n    \\\"img_url\\\": \\\"<string>\\\",\\n    \\\"phone\\\": {},\\n    \\\"birthdate\\\": \\\"<date>\\\",\\n    \\\"gender\\\": \\\"<string>\\\",\\n    \\\"address\\\": \\\"<string>\\\",\\n    \\\"zip_code\\\": \\\"<string>\\\",\\n    \\\"city\\\": \\\"<string>\\\",\\n    \\\"country\\\": \\\"<string>\\\",\\n    \\\"lang\\\": \\\"<string>\\\",\\n    \\\"onboarding_channel\\\": \\\"<string>\\\",\\n    \\\"referred_by\\\": \\\"<integer>\\\",\\n    \\\"github_login_name\\\": \\\"<string>\\\",\\n    \\\"count_repo_gen\\\": 0,\\n    \\\"password\\\": \\\"<string>\\\"\\n  },\\n  \\\"commit_message\\\": \\\"<string>\\\",\\n  \\\"repo_access_key\\\": \\\"<string>\\\"\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/git/unlock/context?contextType=%3Cstring%3E\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"<string>\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/api/v1/generate/documentation": {
      "post": {
        "tags": [
          "doc_gen"
        ],
        "summary": "Send Message",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "send_message_api_v1_generate_documentation_post",
        "parameters": [
          {
            "name": "api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string",
              "default": "",
              "title": "Api-Key"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChetnaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Post, \"{{baseUrl}}/api/v1/generate/documentation\");\nrequest.Headers.Add(\"api-key\", \"\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar content = new StringContent(\"{\\n  \\\"content\\\": \\\"<string>\\\",\\n  \\\"fileType\\\": \\\"<string>\\\",\\n  \\\"contentList\\\": [\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"USER\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"ASSISTANT\\\"\\n    }\\n  ]\\n}\", null, \"application/json\");\nrequest.Content = content;\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/api/v1/generate/documentation\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Post);\nrequest.AddHeader(\"api-key\", \"\");\nrequest.AddHeader(\"Content-Type\", \"application/json\");\nrequest.AddHeader(\"Accept\", \"application/json\");\nvar body = @\"{\" + \"\\n\" +\n@\"  \"\"content\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"fileType\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"  \"\"contentList\"\": [\" + \"\\n\" +\n@\"    {\" + \"\\n\" +\n@\"      \"\"id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"      \"\"content\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"      \"\"role\"\": \"\"USER\"\"\" + \"\\n\" +\n@\"    },\" + \"\\n\" +\n@\"    {\" + \"\\n\" +\n@\"      \"\"id\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"      \"\"content\"\": \"\"<string>\"\",\" + \"\\n\" +\n@\"      \"\"role\"\": \"\"ASSISTANT\"\"\" + \"\\n\" +\n@\"    }\" + \"\\n\" +\n@\"  ]\" + \"\\n\" +\n@\"}\";\nrequest.AddStringBody(body, DataFormat.Json);\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/api/v1/generate/documentation' \\\n--header 'api-key;' \\\n--header 'Content-Type: application/json' \\\n--header 'Accept: application/json' \\\n--data '{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"POST\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/api/v1/generate/documentation\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"api-key: \");\n  headers = curl_slist_append(headers, \"Content-Type: application/json\");\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  headers = curl_slist_append(headers, \"Content-Length: \");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  const char *data = \"{\\n  \\\"content\\\": \\\"<string>\\\",\\n  \\\"fileType\\\": \\\"<string>\\\",\\n  \\\"contentList\\\": [\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"USER\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"ASSISTANT\\\"\\n    }\\n  ]\\n}\";\n  curl_easy_setopt(curl, CURLOPT_POSTFIELDS, data);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar data = json.encode({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n});\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/api/v1/generate/documentation',\n  options: Options(\n    method: 'POST',\n    headers: headers,\n  ),\n  data: data,\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json'\n};\nvar request = http.Request('POST', Uri.parse('{{baseUrl}}/api/v1/generate/documentation'));\nrequest.body = json.encode({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n});\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"strings\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/api/v1/generate/documentation\"\n  method := \"POST\"\n\n  payload := strings.NewReader(`{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}`)\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, payload)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"api-key\", \"\")\n  req.Header.Add(\"Content-Type\", \"application/json\")\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "POST /api/v1/generate/documentation HTTP/1.1\nHost: {{baseUrl}}\napi-key: \nContent-Type: application/json\nAccept: application/json\nContent-Length: 255\n\n{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"api-key\", \"\");\nmyHeaders.append(\"Content-Type\", \"application/json\");\nmyHeaders.append(\"Accept\", \"application/json\");\nmyHeaders.append(\"Content-Length\", \"\");\n\nconst raw = JSON.stringify({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n});\n\nconst requestOptions = {\n  method: \"POST\",\n  headers: myHeaders,\n  body: raw,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/api/v1/generate/documentation\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For POST requests, body is set to null by browsers.\nvar data = JSON.stringify({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n});\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"POST\", \"{{baseUrl}}/api/v1/generate/documentation\");\nxhr.setRequestHeader(\"api-key\", \"\");\nxhr.setRequestHeader(\"Content-Type\", \"application/json\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\nxhr.setRequestHeader(\"Content-Length\", \"\");\n\nxhr.send(data);",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/api/v1/generate/documentation\",\n  \"method\": \"POST\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"api-key\": \"\",\n    \"Content-Type\": \"application/json\",\n    \"Accept\": \"application/json\",\n    \"Content-Length\": \"\"\n  },\n  \"data\": JSON.stringify({\n    \"content\": \"<string>\",\n    \"fileType\": \"<string>\",\n    \"contentList\": [\n      {\n        \"id\": \"<string>\",\n        \"content\": \"<string>\",\n        \"role\": \"USER\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"content\": \"<string>\",\n        \"role\": \"ASSISTANT\"\n      }\n    ]\n  }),\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"application/json\");\nRequestBody body = RequestBody.create(mediaType, \"{\\n  \\\"content\\\": \\\"<string>\\\",\\n  \\\"fileType\\\": \\\"<string>\\\",\\n  \\\"contentList\\\": [\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"USER\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"ASSISTANT\\\"\\n    }\\n  ]\\n}\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/generate/documentation\")\n  .method(\"POST\", body)\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.post(\"{{baseUrl}}/api/v1/generate/documentation\")\n  .header(\"api-key\", \"\")\n  .header(\"Content-Type\", \"application/json\")\n  .header(\"Accept\", \"application/json\")\n  .header(\"Content-Length\", \"\")\n  .body(\"{\\n  \\\"content\\\": \\\"<string>\\\",\\n  \\\"fileType\\\": \\\"<string>\\\",\\n  \\\"contentList\\\": [\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"USER\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"ASSISTANT\\\"\\n    }\\n  ]\\n}\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval mediaType = \"application/json\".toMediaType()\nval body = \"{\\n  \\\"content\\\": \\\"<string>\\\",\\n  \\\"fileType\\\": \\\"<string>\\\",\\n  \\\"contentList\\\": [\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"USER\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"ASSISTANT\\\"\\n    }\\n  ]\\n}\".toRequestBody(mediaType)\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/api/v1/generate/documentation\")\n  .post(body)\n  .addHeader(\"api-key\", \"\")\n  .addHeader(\"Content-Type\", \"application/json\")\n  .addHeader(\"Accept\", \"application/json\")\n  .addHeader(\"Content-Length\", \"\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\nlet data = JSON.stringify({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n});\n\nlet config = {\n  method: 'post',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/api/v1/generate/documentation',\n  headers: { \n    'api-key': '', \n    'Content-Type': 'application/json', \n    'Accept': 'application/json', \n    'Content-Length': ''\n  },\n  data : data\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'POST',\n  'hostname': '{{baseUrl}}',\n  'path': '/api/v1/generate/documentation',\n  'headers': {\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nvar postData = JSON.stringify({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n});\n\nreq.write(postData);\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'POST',\n  'url': '{{baseUrl}}/api/v1/generate/documentation',\n  'headers': {\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  },\n  body: JSON.stringify({\n    \"content\": \"<string>\",\n    \"fileType\": \"<string>\",\n    \"contentList\": [\n      {\n        \"id\": \"<string>\",\n        \"content\": \"<string>\",\n        \"role\": \"USER\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"content\": \"<string>\",\n        \"role\": \"ASSISTANT\"\n      }\n    ]\n  })\n\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('POST', '{{baseUrl}}/api/v1/generate/documentation')\n  .headers({\n    'api-key': '',\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n    'Content-Length': ''\n  })\n  .send(JSON.stringify({\n    \"content\": \"<string>\",\n    \"fileType\": \"<string>\",\n    \"contentList\": [\n      {\n        \"id\": \"<string>\",\n        \"content\": \"<string>\",\n        \"role\": \"USER\"\n      },\n      {\n        \"id\": \"<string>\",\n        \"content\": \"<string>\",\n        \"role\": \"ASSISTANT\"\n      }\n    ]\n  }))\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/api/v1/generate/documentation\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"api-key\": @\"\",\n  @\"Content-Type\": @\"application/json\",\n  @\"Accept\": @\"application/json\",\n  @\"Content-Length\": @\"\"\n};\n\n[request setAllHTTPHeaderFields:headers];\nNSData *postData = [[NSData alloc] initWithData:[@\"{\\n  \\\"content\\\": \\\"<string>\\\",\\n  \\\"fileType\\\": \\\"<string>\\\",\\n  \\\"contentList\\\": [\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"USER\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"ASSISTANT\\\"\\n    }\\n  ]\\n}\" dataUsingEncoding:NSUTF8StringEncoding]];\n[request setHTTPBody:postData];\n\n[request setHTTPMethod:@\"POST\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet postData = ref \"{\\n  \\\"content\\\": \\\"<string>\\\",\\n  \\\"fileType\\\": \\\"<string>\\\",\\n  \\\"contentList\\\": [\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"USER\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"ASSISTANT\\\"\\n    }\\n  ]\\n}\";;\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/api/v1/generate/documentation\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"api-key\" \"\"\n    |> fun h -> Header.add h \"Content-Type\" \"application/json\"\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n    |> fun h -> Header.add h \"Content-Length\" \"\"\n  in\n  let body = Cohttp_lwt.Body.of_string !postData in\n\n  Client.call ~headers ~body `POST uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => '255'\n];\n$body = '{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}';\n$request = new Request('POST', '{{baseUrl}}/api/v1/generate/documentation', $headers, $body);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/api/v1/generate/documentation');\n$request->setMethod(HTTP_Request2::METHOD_POST);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$request->setBody('{\\n  \"content\": \"<string>\",\\n  \"fileType\": \"<string>\",\\n  \"contentList\": [\\n    {\\n      \"id\": \"<string>\",\\n      \"content\": \"<string>\",\\n      \"role\": \"USER\"\\n    },\\n    {\\n      \"id\": \"<string>\",\\n      \"content\": \"<string>\",\\n      \"role\": \"ASSISTANT\"\\n    }\\n  ]\\n}');\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/api/v1/generate/documentation',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'POST',\n  CURLOPT_POSTFIELDS =>'{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}',\n  CURLOPT_HTTPHEADER => array(\n    'api-key: ',\n    'Content-Type: application/json',\n    'Accept: application/json',\n    'Content-Length: '\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/api/v1/generate/documentation');\n$request->setRequestMethod('POST');\n$body = new http\\Message\\Body;\n$body->append('{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}');\n$request->setBody($body);\n$request->setOptions(array());\n$request->setHeaders(array(\n  'api-key' => '',\n  'Content-Type' => 'application/json',\n  'Accept' => 'application/json',\n  'Content-Length' => ''\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"api-key\", \"\")\n$headers.Add(\"Content-Type\", \"application/json\")\n$headers.Add(\"Accept\", \"application/json\")\n$headers.Add(\"Content-Length\", \"\")\n\n$body = @\"\n{\n  `\"content`\": `\"<string>`\",\n  `\"fileType`\": `\"<string>`\",\n  `\"contentList`\": [\n    {\n      `\"id`\": `\"<string>`\",\n      `\"content`\": `\"<string>`\",\n      `\"role`\": `\"USER`\"\n    },\n    {\n      `\"id`\": `\"<string>`\",\n      `\"content`\": `\"<string>`\",\n      `\"role`\": `\"ASSISTANT`\"\n    }\n  ]\n}\n\"@\n\n$response = Invoke-RestMethod '{{baseUrl}}/api/v1/generate/documentation' -Method 'POST' -Headers $headers -Body $body\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\nimport json\n\nurl = \"{{baseUrl}}/api/v1/generate/documentation\"\n\npayload = json.dumps({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n})\nheaders = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\n\nresponse = requests.request(\"POST\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\nimport json\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = json.dumps({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n})\nheaders = {\n  'api-key': '',\n  'Content-Type': 'application/json',\n  'Accept': 'application/json',\n  'Content-Length': ''\n}\nconn.request(\"POST\", \"/api/v1/generate/documentation\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"json\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/api/v1/generate/documentation\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Post.new(url)\nrequest[\"api-key\"] = \"\"\nrequest[\"Content-Type\"] = \"application/json\"\nrequest[\"Accept\"] = \"application/json\"\nrequest[\"Content-Length\"] = \"\"\nrequest.body = JSON.dump({\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n})\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"api-key\", \"\".parse()?);\n    headers.insert(\"Content-Type\", \"application/json\".parse()?);\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n    headers.insert(\"Content-Length\", \"\".parse()?);\n\n    let data = r#\"{\n    \"content\": \"<string>\",\n    \"fileType\": \"<string>\",\n    \"contentList\": [\n        {\n            \"id\": \"<string>\",\n            \"content\": \"<string>\",\n            \"role\": \"USER\"\n        },\n        {\n            \"id\": \"<string>\",\n            \"content\": \"<string>\",\n            \"role\": \"ASSISTANT\"\n        }\n    ]\n}\"#;\n\n    let json: serde_json::Value = serde_json::from_str(&data)?;\n\n    let request = client.request(reqwest::Method::POST, \"{{baseUrl}}/api/v1/generate/documentation\")\n        .headers(headers)\n        .json(&json);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"api-key\" = \"\",\n  \"Content-Type\" = \"application/json\",\n  \"Accept\" = \"application/json\",\n  \"Content-Length\" = \"255\"\n)\nparams = \"{\n  \\\"content\\\": \\\"<string>\\\",\n  \\\"fileType\\\": \\\"<string>\\\",\n  \\\"contentList\\\": [\n    {\n      \\\"id\\\": \\\"<string>\\\",\n      \\\"content\\\": \\\"<string>\\\",\n      \\\"role\\\": \\\"USER\\\"\n    },\n    {\n      \\\"id\\\": \\\"<string>\\\",\n      \\\"content\\\": \\\"<string>\\\",\n      \\\"role\\\": \\\"ASSISTANT\\\"\n    }\n  ]\n}\"\nres <- postForm(\"{{baseUrl}}/api/v1/generate/documentation\", .opts=list(postfields = params, httpheader = headers, followlocation = TRUE), style = \"httppost\")\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'api-key' = '',\n  'Content-Type' = 'application/json',\n  'Accept' = 'application/json',\n  'Content-Length' = '255'\n)\n\nbody = '{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}';\n\nres <- VERB(\"POST\", url = \"{{baseUrl}}/api/v1/generate/documentation\", body = body, add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "printf '{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}'| http  --follow --timeout 3600 POST '{{baseUrl}}/api/v1/generate/documentation' \\\n api-key: \\\n Content-Type:'application/json' \\\n Accept:'application/json' \\\n Content-Length:",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method POST \\\n  --timeout=0 \\\n  --header 'api-key: ' \\\n  --header 'Content-Type: application/json' \\\n  --header 'Accept: application/json' \\\n  --header 'Content-Length: ' \\\n  --body-data '{\n  \"content\": \"<string>\",\n  \"fileType\": \"<string>\",\n  \"contentList\": [\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"USER\"\n    },\n    {\n      \"id\": \"<string>\",\n      \"content\": \"<string>\",\n      \"role\": \"ASSISTANT\"\n    }\n  ]\n}' \\\n   '{{baseUrl}}/api/v1/generate/documentation'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "let parameters = \"{\\n  \\\"content\\\": \\\"<string>\\\",\\n  \\\"fileType\\\": \\\"<string>\\\",\\n  \\\"contentList\\\": [\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"USER\\\"\\n    },\\n    {\\n      \\\"id\\\": \\\"<string>\\\",\\n      \\\"content\\\": \\\"<string>\\\",\\n      \\\"role\\\": \\\"ASSISTANT\\\"\\n    }\\n  ]\\n}\"\nlet postData = parameters.data(using: .utf8)\n\nvar request = URLRequest(url: URL(string: \"{{baseUrl}}/api/v1/generate/documentation\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"\", forHTTPHeaderField: \"api-key\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\nrequest.addValue(\"\", forHTTPHeaderField: \"Content-Length\")\n\nrequest.httpMethod = \"POST\"\nrequest.httpBody = postData\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    },
    "/.well-known/pki-validation/{filename}": {
      "get": {
        "summary": "Domain Verification",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "domain_verification__well_known_pki_validation__filename__get",
        "parameters": [
          {
            "name": "filename",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Filename"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/metrics": {
      "get": {
        "summary": "Metrics",
        "description": "Retrieve a list of all users. This endpoint allows the retrieval of all user objects available in the system. It requires authentication with OAuth2 Password Bearer token. The response is a JSON array of user objects.",
        "operationId": "metrics_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "csharp",
            "source": "var client = new HttpClient();\nvar request = new HttpRequestMessage(HttpMethod.Get, \"{{baseUrl}}/metrics\");\nrequest.Headers.Add(\"Accept\", \"application/json\");\nvar response = await client.SendAsync(request);\nresponse.EnsureSuccessStatusCode();\nConsole.WriteLine(await response.Content.ReadAsStringAsync());\n",
            "label": "csharp(HttpClient)"
          },
          {
            "lang": "csharp",
            "source": "var options = new RestClientOptions(\"{{baseUrl}}/metrics\")\n{\n  MaxTimeout = -1,\n};\nvar client = new RestClient(options);\nvar request = new RestRequest(\"\", Method.Get);\nrequest.AddHeader(\"Accept\", \"application/json\");\nRestResponse response = await client.ExecuteAsync(request);\nConsole.WriteLine(response.Content);",
            "label": "csharp(RestSharp)"
          },
          {
            "lang": "curl",
            "source": "curl --location --globoff '{{baseUrl}}/metrics' \\\n--header 'Accept: application/json'",
            "label": "curl(cURL)"
          },
          {
            "lang": "c",
            "source": "CURL *curl;\nCURLcode res;\ncurl = curl_easy_init();\nif(curl) {\n  curl_easy_setopt(curl, CURLOPT_CUSTOMREQUEST, \"GET\");\n  curl_easy_setopt(curl, CURLOPT_URL, \"{{baseUrl}}/metrics\");\n  curl_easy_setopt(curl, CURLOPT_FOLLOWLOCATION, 1L);\n  curl_easy_setopt(curl, CURLOPT_DEFAULT_PROTOCOL, \"https\");\n  struct curl_slist *headers = NULL;\n  headers = curl_slist_append(headers, \"Accept: application/json\");\n  curl_easy_setopt(curl, CURLOPT_HTTPHEADER, headers);\n  res = curl_easy_perform(curl);\n  curl_slist_free_all(headers);\n}\ncurl_easy_cleanup(curl);\n",
            "label": "c(libcurl)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar dio = Dio();\nvar response = await dio.request(\n  '{{baseUrl}}/metrics',\n  options: Options(\n    method: 'GET',\n    headers: headers,\n  ),\n);\n\nif (response.statusCode == 200) {\n  print(json.encode(response.data));\n}\nelse {\n  print(response.statusMessage);\n}",
            "label": "dart(dio)"
          },
          {
            "lang": "dart",
            "source": "var headers = {\n  'Accept': 'application/json'\n};\nvar request = http.Request('GET', Uri.parse('{{baseUrl}}/metrics'));\n\nrequest.headers.addAll(headers);\n\nhttp.StreamedResponse response = await request.send();\n\nif (response.statusCode == 200) {\n  print(await response.stream.bytesToString());\n}\nelse {\n  print(response.reasonPhrase);\n}\n",
            "label": "dart(http)"
          },
          {
            "lang": "go",
            "source": "package main\n\nimport (\n  \"fmt\"\n  \"net/http\"\n  \"io/ioutil\"\n)\n\nfunc main() {\n\n  url := \"{{baseUrl}}/metrics\"\n  method := \"GET\"\n\n  client := &http.Client {\n  }\n  req, err := http.NewRequest(method, url, nil)\n\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  req.Header.Add(\"Accept\", \"application/json\")\n\n  res, err := client.Do(req)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  defer res.Body.Close()\n\n  body, err := ioutil.ReadAll(res.Body)\n  if err != nil {\n    fmt.Println(err)\n    return\n  }\n  fmt.Println(string(body))\n}",
            "label": "go(Native)"
          },
          {
            "lang": "http",
            "source": "GET /metrics HTTP/1.1\nHost: {{baseUrl}}\nAccept: application/json",
            "label": "http(HTTP)"
          },
          {
            "lang": "javascript",
            "source": "const myHeaders = new Headers();\nmyHeaders.append(\"Accept\", \"application/json\");\n\nconst requestOptions = {\n  method: \"GET\",\n  headers: myHeaders,\n  redirect: \"follow\"\n};\n\nfetch(\"{{baseUrl}}/metrics\", requestOptions)\n  .then((response) => response.text())\n  .then((result) => console.log(result))\n  .catch((error) => console.error(error));",
            "label": "javascript(Fetch)"
          },
          {
            "lang": "javascript",
            "source": "// WARNING: For GET requests, body is set to null by browsers.\n\nvar xhr = new XMLHttpRequest();\nxhr.withCredentials = true;\n\nxhr.addEventListener(\"readystatechange\", function() {\n  if(this.readyState === 4) {\n    console.log(this.responseText);\n  }\n});\n\nxhr.open(\"GET\", \"{{baseUrl}}/metrics\");\nxhr.setRequestHeader(\"Accept\", \"application/json\");\n\nxhr.send();",
            "label": "javascript(XHR)"
          },
          {
            "lang": "javascript",
            "source": "var settings = {\n  \"url\": \"{{baseUrl}}/metrics\",\n  \"method\": \"GET\",\n  \"timeout\": 0,\n  \"headers\": {\n    \"Accept\": \"application/json\"\n  },\n};\n\n$.ajax(settings).done(function (response) {\n  console.log(response);\n});",
            "label": "javascript(jQuery)"
          },
          {
            "lang": "java",
            "source": "OkHttpClient client = new OkHttpClient().newBuilder()\n  .build();\nMediaType mediaType = MediaType.parse(\"text/plain\");\nRequestBody body = RequestBody.create(mediaType, \"\");\nRequest request = new Request.Builder()\n  .url(\"{{baseUrl}}/metrics\")\n  .method(\"GET\", body)\n  .addHeader(\"Accept\", \"application/json\")\n  .build();\nResponse response = client.newCall(request).execute();",
            "label": "java(OkHttp)"
          },
          {
            "lang": "java",
            "source": "Unirest.setTimeouts(0, 0);\nHttpResponse<String> response = Unirest.get(\"{{baseUrl}}/metrics\")\n  .header(\"Accept\", \"application/json\")\n  .asString();\n",
            "label": "java(Unirest)"
          },
          {
            "lang": "kotlin",
            "source": "val client = OkHttpClient()\nval request = Request.Builder()\n  .url(\"{{baseUrl}}/metrics\")\n  .addHeader(\"Accept\", \"application/json\")\n  .build()\nval response = client.newCall(request).execute()",
            "label": "kotlin(Okhttp)"
          },
          {
            "lang": "nodejs",
            "source": "const axios = require('axios');\n\nlet config = {\n  method: 'get',\n  maxBodyLength: Infinity,\n  url: '{{baseUrl}}/metrics',\n  headers: { \n    'Accept': 'application/json'\n  }\n};\n\naxios.request(config)\n.then((response) => {\n  console.log(JSON.stringify(response.data));\n})\n.catch((error) => {\n  console.log(error);\n});\n",
            "label": "nodejs(Axios)"
          },
          {
            "lang": "nodejs",
            "source": "var https = require('follow-redirects').https;\nvar fs = require('fs');\n\nvar options = {\n  'method': 'GET',\n  'hostname': '{{baseUrl}}',\n  'path': '/metrics',\n  'headers': {\n    'Accept': 'application/json'\n  },\n  'maxRedirects': 20\n};\n\nvar req = https.request(options, function (res) {\n  var chunks = [];\n\n  res.on(\"data\", function (chunk) {\n    chunks.push(chunk);\n  });\n\n  res.on(\"end\", function (chunk) {\n    var body = Buffer.concat(chunks);\n    console.log(body.toString());\n  });\n\n  res.on(\"error\", function (error) {\n    console.error(error);\n  });\n});\n\nreq.end();",
            "label": "nodejs(Native)"
          },
          {
            "lang": "nodejs",
            "source": "var request = require('request');\nvar options = {\n  'method': 'GET',\n  'url': '{{baseUrl}}/metrics',\n  'headers': {\n    'Accept': 'application/json'\n  }\n};\nrequest(options, function (error, response) {\n  if (error) throw new Error(error);\n  console.log(response.body);\n});\n",
            "label": "nodejs(Request)"
          },
          {
            "lang": "nodejs",
            "source": "var unirest = require('unirest');\nvar req = unirest('GET', '{{baseUrl}}/metrics')\n  .headers({\n    'Accept': 'application/json'\n  })\n  .end(function (res) { \n    if (res.error) throw new Error(res.error); \n    console.log(res.raw_body);\n  });\n",
            "label": "nodejs(Unirest)"
          },
          {
            "lang": "objective-c",
            "source": "#import <Foundation/Foundation.h>\n\ndispatch_semaphore_t sema = dispatch_semaphore_create(0);\n\nNSMutableURLRequest *request = [NSMutableURLRequest requestWithURL:[NSURL URLWithString:@\"%7B%7BbaseUrl%7D%7D/metrics\"]\n  cachePolicy:NSURLRequestUseProtocolCachePolicy\n  timeoutInterval:10.0];\nNSDictionary *headers = @{\n  @\"Accept\": @\"application/json\"\n};\n\n[request setAllHTTPHeaderFields:headers];\n\n[request setHTTPMethod:@\"GET\"];\n\nNSURLSession *session = [NSURLSession sharedSession];\nNSURLSessionDataTask *dataTask = [session dataTaskWithRequest:request\ncompletionHandler:^(NSData *data, NSURLResponse *response, NSError *error) {\n  if (error) {\n    NSLog(@\"%@\", error);\n    dispatch_semaphore_signal(sema);\n  } else {\n    NSHTTPURLResponse *httpResponse = (NSHTTPURLResponse *) response;\n    NSError *parseError = nil;\n    NSDictionary *responseDictionary = [NSJSONSerialization JSONObjectWithData:data options:0 error:&parseError];\n    NSLog(@\"%@\",responseDictionary);\n    dispatch_semaphore_signal(sema);\n  }\n}];\n[dataTask resume];\ndispatch_semaphore_wait(sema, DISPATCH_TIME_FOREVER);",
            "label": "objective-c(NSURLSession)"
          },
          {
            "lang": "ocaml",
            "source": "open Lwt\nopen Cohttp\nopen Cohttp_lwt_unix\n\nlet reqBody = \n  let uri = Uri.of_string \"{{baseUrl}}/metrics\" in\n  let headers = Header.init ()\n    |> fun h -> Header.add h \"Accept\" \"application/json\"\n  in\n  Client.call ~headers `GET uri >>= fun (_resp, body) ->\n  body |> Cohttp_lwt.Body.to_string >|= fun body -> body\n\nlet () =\n  let respBody = Lwt_main.run reqBody in\n  print_endline (respBody)",
            "label": "ocaml(Cohttp)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new Client();\n$headers = [\n  'Accept' => 'application/json'\n];\n$request = new Request('GET', '{{baseUrl}}/metrics', $headers);\n$res = $client->sendAsync($request)->wait();\necho $res->getBody();\n",
            "label": "php(Guzzle)"
          },
          {
            "lang": "php",
            "source": "<?php\nrequire_once 'HTTP/Request2.php';\n$request = new HTTP_Request2();\n$request->setUrl('{{baseUrl}}/metrics');\n$request->setMethod(HTTP_Request2::METHOD_GET);\n$request->setConfig(array(\n  'follow_redirects' => TRUE\n));\n$request->setHeader(array(\n  'Accept' => 'application/json'\n));\ntry {\n  $response = $request->send();\n  if ($response->getStatus() == 200) {\n    echo $response->getBody();\n  }\n  else {\n    echo 'Unexpected HTTP status: ' . $response->getStatus() . ' ' .\n    $response->getReasonPhrase();\n  }\n}\ncatch(HTTP_Request2_Exception $e) {\n  echo 'Error: ' . $e->getMessage();\n}",
            "label": "php(HTTP_Request2)"
          },
          {
            "lang": "php",
            "source": "<?php\n\n$curl = curl_init();\n\ncurl_setopt_array($curl, array(\n  CURLOPT_URL => '{{baseUrl}}/metrics',\n  CURLOPT_RETURNTRANSFER => true,\n  CURLOPT_ENCODING => '',\n  CURLOPT_MAXREDIRS => 10,\n  CURLOPT_TIMEOUT => 0,\n  CURLOPT_FOLLOWLOCATION => true,\n  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,\n  CURLOPT_CUSTOMREQUEST => 'GET',\n  CURLOPT_HTTPHEADER => array(\n    'Accept: application/json'\n  ),\n));\n\n$response = curl_exec($curl);\n\ncurl_close($curl);\necho $response;\n",
            "label": "php(cURL)"
          },
          {
            "lang": "php",
            "source": "<?php\n$client = new http\\Client;\n$request = new http\\Client\\Request;\n$request->setRequestUrl('{{baseUrl}}/metrics');\n$request->setRequestMethod('GET');\n$request->setOptions(array());\n$request->setHeaders(array(\n  'Accept' => 'application/json'\n));\n$client->enqueue($request)->send();\n$response = $client->getResponse();\necho $response->getBody();\n",
            "label": "php(pecl_http)"
          },
          {
            "lang": "powershell",
            "source": "$headers = New-Object \"System.Collections.Generic.Dictionary[[String],[String]]\"\n$headers.Add(\"Accept\", \"application/json\")\n\n$response = Invoke-RestMethod '{{baseUrl}}/metrics' -Method 'GET' -Headers $headers\n$response | ConvertTo-Json",
            "label": "powershell(RestMethod)"
          },
          {
            "lang": "python",
            "source": "import requests\n\nurl = \"{{baseUrl}}/metrics\"\n\npayload = {}\nheaders = {\n  'Accept': 'application/json'\n}\n\nresponse = requests.request(\"GET\", url, headers=headers, data=payload)\n\nprint(response.text)\n",
            "label": "python(Requests)"
          },
          {
            "lang": "python",
            "source": "import http.client\n\nconn = http.client.HTTPSConnection(\"{{baseUrl}}\")\npayload = ''\nheaders = {\n  'Accept': 'application/json'\n}\nconn.request(\"GET\", \"/metrics\", payload, headers)\nres = conn.getresponse()\ndata = res.read()\nprint(data.decode(\"utf-8\"))",
            "label": "python(http.client)"
          },
          {
            "lang": "ruby",
            "source": "require \"uri\"\nrequire \"net/http\"\n\nurl = URI(\"{{baseUrl}}/metrics\")\n\nhttp = Net::HTTP.new(url.host, url.port);\nrequest = Net::HTTP::Get.new(url)\nrequest[\"Accept\"] = \"application/json\"\n\nresponse = http.request(request)\nputs response.read_body\n",
            "label": "ruby(Net::HTTP)"
          },
          {
            "lang": "rust",
            "source": "#[tokio::main]\nasync fn main() -> Result<(), Box<dyn std::error::Error>> {\n    let client = reqwest::Client::builder()\n        .build()?;\n\n    let mut headers = reqwest::header::HeaderMap::new();\n    headers.insert(\"Accept\", \"application/json\".parse()?);\n\n    let request = client.request(reqwest::Method::GET, \"{{baseUrl}}/metrics\")\n        .headers(headers);\n\n    let response = request.send().await?;\n    let body = response.text().await?;\n\n    println!(\"{}\", body);\n\n    Ok(())\n}",
            "label": "rust(reqwest)"
          },
          {
            "lang": "r",
            "source": "library(RCurl)\nheaders = c(\n  \"Accept\" = \"application/json\"\n)\nres <- getURL(\"{{baseUrl}}/metrics\", .opts=list(httpheader = headers, followlocation = TRUE))\ncat(res)",
            "label": "r(RCurl)"
          },
          {
            "lang": "r",
            "source": "library(httr)\n\nheaders = c(\n  'Accept' = 'application/json'\n)\n\nres <- VERB(\"GET\", url = \"{{baseUrl}}/metrics\", add_headers(headers))\n\ncat(content(res, 'text'))",
            "label": "r(httr)"
          },
          {
            "lang": "shell",
            "source": "http --follow --timeout 3600 GET '{{baseUrl}}/metrics' \\\n Accept:'application/json'",
            "label": "shell(Httpie)"
          },
          {
            "lang": "shell",
            "source": "wget --no-check-certificate --quiet \\\n  --method GET \\\n  --timeout=0 \\\n  --header 'Accept: application/json' \\\n   '{{baseUrl}}/metrics'",
            "label": "shell(wget)"
          },
          {
            "lang": "swift",
            "source": "var request = URLRequest(url: URL(string: \"{{baseUrl}}/metrics\")!,timeoutInterval: Double.infinity)\nrequest.addValue(\"application/json\", forHTTPHeaderField: \"Accept\")\n\nrequest.httpMethod = \"GET\"\n\nlet task = URLSession.shared.dataTask(with: request) { data, response, error in \n  guard let data = data else {\n    print(String(describing: error))\n    return\n  }\n  print(String(data: data, encoding: .utf8)!)\n}\n\ntask.resume()\n",
            "label": "swift(URLSession)"
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Actor": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type"
          },
          "accountId": {
            "type": "string",
            "title": "Accountid"
          },
          "uuid": {
            "type": "string",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": [
          "type",
          "accountId",
          "uuid"
        ],
        "title": "Actor"
      },
      "BitbucketApp": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "version": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Version"
          }
        },
        "type": "object",
        "required": [
          "id"
        ],
        "title": "BitbucketApp"
      },
      "BitbucketAppInstallation": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "installerAccountId": {
            "type": "string",
            "title": "Installeraccountid",
            "default": ""
          },
          "app": {
            "$ref": "#/components/schemas/BitbucketApp"
          }
        },
        "type": "object",
        "required": [
          "id",
          "app"
        ],
        "title": "BitbucketAppInstallation"
      },
      "BitbucketEvent": {
        "properties": {
          "actor": {
            "$ref": "#/components/schemas/Actor"
          },
          "repository": {
            "$ref": "#/components/schemas/Repository"
          },
          "project": {
            "$ref": "#/components/schemas/Project"
          },
          "workspace": {
            "$ref": "#/components/schemas/Workspace"
          },
          "pullrequest": {
            "$ref": "#/components/schemas/PullRequest"
          },
          "eventType": {
            "type": "string",
            "title": "Eventtype"
          }
        },
        "type": "object",
        "required": [
          "actor",
          "repository",
          "project",
          "workspace",
          "pullrequest",
          "eventType"
        ],
        "title": "BitbucketEvent"
      },
      "Body_login_api_login_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_api_login_post"
      },
      "Body_redeem_api_v1_coupon_redeem_post": {
        "properties": {
          "redeem_type": {
            "type": "string",
            "title": "Redeem Type",
            "description": "Redeem Type of the coupon. Valid values are: AMAZON, INDIA_UPI"
          },
          "redeem_id": {
            "type": "string",
            "title": "Redeem Id",
            "description": "The code of the coupon to be redeemed. Empty for Amazon coupons."
          }
        },
        "type": "object",
        "required": [
          "redeem_type",
          "redeem_id"
        ],
        "title": "Body_redeem_api_v1_coupon_redeem_post"
      },
      "Body_report_errors_api_app_github_report_errors_post": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message",
            "description": "Error Message"
          },
          "repo_details": {
            "type": "object",
            "title": "Repo Details",
            "description": "Repo details"
          }
        },
        "type": "object",
        "required": [
          "message",
          "repo_details"
        ],
        "title": "Body_report_errors_api_app_github_report_errors_post"
      },
      "Branch": {
        "properties": {
          "branch": {
            "type": "string",
            "title": "Branch"
          },
          "commit": {
            "$ref": "#/components/schemas/Commit"
          }
        },
        "type": "object",
        "required": [
          "branch",
          "commit"
        ],
        "title": "Branch"
      },
      "ChetnaRequest": {
        "properties": {
          "content": {
            "type": "string",
            "title": "Content"
          },
          "fileType": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Filetype"
          },
          "contentList": {
            "anyOf": [
              {
                "items": {
                  "$ref": "#/components/schemas/Context"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Contentlist",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "content"
        ],
        "title": "ChetnaRequest"
      },
      "Commit": {
        "properties": {
          "hash": {
            "type": "string",
            "title": "Hash"
          }
        },
        "type": "object",
        "required": [
          "hash"
        ],
        "title": "Commit"
      },
      "ContactUsRequest": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email",
            "default": ""
          },
          "name": {
            "type": "string",
            "title": "Name",
            "default": ""
          },
          "message": {
            "type": "string",
            "title": "Message",
            "default": ""
          }
        },
        "type": "object",
        "title": "ContactUsRequest"
      },
      "Context": {
        "properties": {
          "id": {
            "type": "string",
            "title": "Id"
          },
          "content": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ],
            "title": "Content"
          },
          "role": {
            "$ref": "#/components/schemas/Role"
          }
        },
        "type": "object",
        "required": [
          "id",
          "content",
          "role"
        ],
        "title": "Context"
      },
      "Coupon": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "user_id": {
            "type": "integer",
            "title": "User Id"
          },
          "coupon_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Coupon Code"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": true
          },
          "is_deleted": {
            "type": "boolean",
            "title": "Is Deleted",
            "default": false
          },
          "is_used": {
            "type": "boolean",
            "title": "Is Used",
            "default": false
          },
          "used_at": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Used At"
          },
          "amount": {
            "type": "number",
            "title": "Amount",
            "default": 0
          },
          "used_source": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Used Source"
          },
          "currency": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currency",
            "default": "USD"
          },
          "coupon_type": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CouponType"
              }
            ],
            "default": "JOINING"
          },
          "coupon_state": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/CouponState"
              },
              {
                "type": "null"
              }
            ],
            "default": "PAYMENT_ACTIVE"
          }
        },
        "type": "object",
        "required": [
          "user_id"
        ],
        "title": "Coupon"
      },
      "CouponState": {
        "type": "string",
        "enum": [
          "PAYMENT_ACTIVE",
          "PAYMENT_PENDING",
          "PAYMENT_COMPLETE",
          "PAYMENT_FAILED"
        ],
        "title": "CouponState"
      },
      "CouponType": {
        "type": "string",
        "enum": [
          "REFERRAL",
          "PROMOTIONAL",
          "JOINING"
        ],
        "title": "CouponType"
      },
      "DocGenRequest": {
        "properties": {
          "base_branch": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Base Branch"
          },
          "commit_sha": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Sha"
          },
          "head_branch_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GitBranchDetails"
              },
              {
                "type": "null"
              }
            ]
          },
          "vendor": {
            "$ref": "#/components/schemas/GitVendor"
          },
          "git_repo": {
            "$ref": "#/components/schemas/GitRepo"
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ]
          },
          "commit_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Message"
          },
          "repo_access_key": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repo Access Key"
          },
          "style_guides": {
            "items": {
              "$ref": "#/components/schemas/StyleGuide"
            },
            "type": "array",
            "title": "Style Guides",
            "default": []
          }
        },
        "type": "object",
        "required": [
          "vendor",
          "git_repo"
        ],
        "title": "DocGenRequest"
      },
      "EmailResponseSchema": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "verified": {
            "type": "boolean",
            "title": "Verified"
          }
        },
        "type": "object",
        "required": [
          "name",
          "verified"
        ],
        "title": "EmailResponseSchema"
      },
      "FF": {
        "type": "string",
        "enum": [
          "EMPTY_REPO_CHECK",
          "FETCH_GITHUB_TOKEN_FROM_REDIS",
          "INSTALL_FROM_PULL_REQUEST",
          "INSTALL_ATTEMPT_COUNT_CHECK"
        ],
        "title": "FF"
      },
      "FlagSchema": {
        "properties": {
          "key": {
            "$ref": "#/components/schemas/FF"
          },
          "value": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "ttl": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ttl",
            "default": 525600
          }
        },
        "type": "object",
        "required": [
          "key"
        ],
        "title": "FlagSchema"
      },
      "ForgotPasswordSchema": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "ForgotPasswordSchema"
      },
      "GitBranchDetails": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name"
          },
          "sha": {
            "type": "string",
            "title": "Sha"
          }
        },
        "type": "object",
        "required": [
          "name",
          "sha"
        ],
        "title": "GitBranchDetails"
      },
      "GitRepo": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "github_login_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Login Id"
          },
          "installation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Installation Id"
          },
          "organization_name": {
            "type": "string",
            "title": "Organization Name"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "repo_name": {
            "type": "string",
            "title": "Repo Name"
          },
          "repo_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repo Id"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_private": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Private"
          },
          "is_installed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Installed"
          },
          "is_deleted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Deleted"
          },
          "time_created": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Created"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitVendor"
              }
            ],
            "default": "GITHUB"
          },
          "time_updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Updated"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token",
            "default": ""
          },
          "plan_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlanType"
              },
              {
                "type": "null"
              }
            ],
            "default": "FREE"
          },
          "netlify": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Netlify"
          },
          "repo_url_with_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repo Url With Token"
          }
        },
        "type": "object",
        "required": [
          "organization_name",
          "repo_name"
        ],
        "title": "GitRepo"
      },
      "GitVendor": {
        "type": "string",
        "enum": [
          "GITHUB",
          "GITLAB",
          "BITBUCKET",
          "AZUREDEVOPS"
        ],
        "title": "GitVendor"
      },
      "GithubApp": {
        "properties": {
          "id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Id"
          },
          "github_login_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Login Id"
          },
          "installation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Installation Id"
          },
          "organization_name": {
            "type": "string",
            "title": "Organization Name"
          },
          "organization_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Id"
          },
          "repo_name": {
            "type": "string",
            "title": "Repo Name"
          },
          "repo_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repo Id"
          },
          "is_active": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Active"
          },
          "is_private": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Private"
          },
          "is_installed": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Installed",
            "default": true
          },
          "is_deleted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Is Deleted",
            "default": false
          },
          "time_created": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Created"
          },
          "vendor": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GitVendor"
              }
            ],
            "default": "GITHUB"
          },
          "time_updated": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Time Updated"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Token",
            "default": ""
          },
          "plan_type": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PlanType"
              },
              {
                "type": "null"
              }
            ],
            "default": "FREE"
          },
          "netlify": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Netlify"
          }
        },
        "type": "object",
        "required": [
          "organization_name",
          "repo_name"
        ],
        "title": "GithubApp"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "JavaScriptDocstringStyle": {
        "const": "JSDoc",
        "title": "JavaScriptDocstringStyle"
      },
      "MergedPullRequest": {
        "properties": {
          "base_branch": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Base Branch"
          },
          "commit_sha": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Sha"
          },
          "head_branch": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Head Branch"
          },
          "head_branch_details": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GitBranchDetails"
              },
              {
                "type": "null"
              }
            ]
          },
          "api_token": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Api Token"
          },
          "git_repo": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GitRepo"
              },
              {
                "type": "null"
              }
            ]
          },
          "installation_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Installation Id"
          },
          "organization_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Organization Name"
          },
          "repo_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Repo Name"
          },
          "full_repo_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Full Repo Name"
          },
          "user": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "null"
              }
            ]
          },
          "commit_message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Commit Message"
          },
          "vendor": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GitVendor"
              },
              {
                "type": "null"
              }
            ],
            "default": "GITHUB"
          },
          "git_app": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/GithubApp"
              },
              {
                "type": "null"
              }
            ]
          },
          "style_guides": {
            "items": {
              "$ref": "#/components/schemas/StyleGuide"
            },
            "type": "array",
            "title": "Style Guides",
            "default": []
          }
        },
        "type": "object",
        "title": "MergedPullRequest"
      },
      "PaymentInfo": {
        "properties": {
          "user_id": {
            "type": "string",
            "title": "User Id"
          },
          "order_id": {
            "type": "string",
            "title": "Order Id"
          },
          "payment_id": {
            "type": "string",
            "title": "Payment Id"
          },
          "signature": {
            "type": "string",
            "title": "Signature"
          },
          "vendor": {
            "type": "string",
            "title": "Vendor"
          },
          "status": {
            "type": "string",
            "title": "Status"
          }
        },
        "type": "object",
        "title": "PaymentInfo"
      },
      "PlanType": {
        "type": "string",
        "enum": [
          "FREE",
          "PREMIUM"
        ],
        "title": "PlanType"
      },
      "ProgrammingLanguage": {
        "type": "string",
        "enum": [
          "py",
          "ts",
          "js",
          "kt",
          "java",
          "cs"
        ],
        "title": "ProgrammingLanguage"
      },
      "Project": {
        "properties": {
          "uuid": {
            "type": "string",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": [
          "uuid"
        ],
        "title": "Project"
      },
      "PullRequest": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "state": {
            "type": "string",
            "title": "State"
          },
          "source": {
            "$ref": "#/components/schemas/Branch"
          },
          "destination": {
            "$ref": "#/components/schemas/Branch"
          },
          "mergeCommit": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Commit"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "id",
          "state",
          "source",
          "destination"
        ],
        "title": "PullRequest"
      },
      "PythonDocstringStyle": {
        "type": "string",
        "enum": [
          "GOOGLE",
          "EPYDOC",
          "NUMPYDOC",
          "REST"
        ],
        "title": "PythonDocstringStyle"
      },
      "RedisSchema": {
        "properties": {
          "key": {
            "type": "string",
            "title": "Key"
          },
          "value": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "integer"
              },
              {
                "type": "number"
              },
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Value"
          },
          "ttl": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ttl"
          }
        },
        "type": "object",
        "required": [
          "key"
        ],
        "title": "RedisSchema"
      },
      "Repository": {
        "properties": {
          "uuid": {
            "type": "string",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": [
          "uuid"
        ],
        "title": "Repository"
      },
      "Role": {
        "type": "string",
        "enum": [
          "USER",
          "ASSISTANT"
        ],
        "title": "Role"
      },
      "StyleGuide": {
        "properties": {
          "language": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ProgrammingLanguage"
              },
              {
                "type": "null"
              }
            ]
          },
          "docstring_format": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/PythonDocstringStyle"
              },
              {
                "$ref": "#/components/schemas/JavaScriptDocstringStyle"
              },
              {
                "type": "null"
              }
            ],
            "title": "Docstring Format"
          }
        },
        "type": "object",
        "title": "StyleGuide"
      },
      "TokenResponseSchema": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          },
          "user": {
            "$ref": "#/components/schemas/UserSingupResponseSchema"
          }
        },
        "type": "object",
        "required": [
          "token",
          "user"
        ],
        "title": "TokenResponseSchema"
      },
      "UpdateEmailSchema": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "email"
        ],
        "title": "UpdateEmailSchema"
      },
      "User": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": false
          },
          "user_role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ],
            "default": "VIEWER"
          },
          "github_login_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Login Id"
          },
          "google_login_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Google Login Id"
          },
          "img_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Img Url"
          },
          "phone": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "birthdate": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthdate"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "zip_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zip Code"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "lang": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lang"
          },
          "onboarding_channel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Onboarding Channel"
          },
          "referred_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referred By"
          },
          "github_login_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Login Name"
          },
          "count_repo_gen": {
            "type": "integer",
            "title": "Count Repo Gen",
            "default": 0
          },
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "password": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "id"
        ],
        "title": "User"
      },
      "UserApiKeyResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "key": {
            "type": "string",
            "title": "Key"
          },
          "isActive": {
            "type": "boolean",
            "title": "Isactive"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "keyRole": {
            "type": "string",
            "title": "Keyrole"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "key",
          "isActive",
          "createdAt",
          "keyRole"
        ],
        "title": "UserApiKeyResponseSchema"
      },
      "UserCreate": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "first_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "First Name"
          },
          "last_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Name"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": false
          },
          "user_role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ],
            "default": "VIEWER"
          },
          "github_login_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Login Id"
          },
          "google_login_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Google Login Id"
          },
          "img_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Img Url"
          },
          "phone": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "birthdate": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthdate"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "zip_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zip Code"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "lang": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lang"
          },
          "onboarding_channel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Onboarding Channel"
          },
          "referred_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referred By"
          },
          "github_login_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Login Name"
          },
          "count_repo_gen": {
            "type": "integer",
            "title": "Count Repo Gen",
            "default": 0
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "UserCreate"
      },
      "UserRole": {
        "type": "string",
        "enum": [
          "SUPERUSER",
          "ADMIN",
          "VIEWER"
        ],
        "title": "UserRole"
      },
      "UserSignupRequestSchema": {
        "properties": {
          "email": {
            "type": "string",
            "title": "Email"
          },
          "firstName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firstname"
          },
          "lastName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastname"
          },
          "is_active": {
            "type": "boolean",
            "title": "Is Active",
            "default": false
          },
          "user_role": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserRole"
              }
            ],
            "default": "VIEWER"
          },
          "github_login_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Login Id"
          },
          "google_login_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Google Login Id"
          },
          "img_url": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Img Url"
          },
          "phone": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "birthdate": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthdate"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "zip_code": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zip Code"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "lang": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lang"
          },
          "onboarding_channel": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Onboarding Channel"
          },
          "referred_by": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referred By"
          },
          "github_login_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Github Login Name"
          },
          "count_repo_gen": {
            "type": "integer",
            "title": "Count Repo Gen",
            "default": 0
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "firstName",
          "lastName",
          "password"
        ],
        "title": "UserSignupRequestSchema"
      },
      "UserSingupResponseSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "email": {
            "$ref": "#/components/schemas/EmailResponseSchema"
          },
          "firstName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firstname"
          },
          "lastName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastname"
          },
          "phone": {
            "anyOf": [
              {
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Phone"
          },
          "birthday": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthday"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "zipcode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zipcode"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "lang": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lang"
          },
          "imgUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Imgurl"
          },
          "userRole": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Userrole"
          },
          "githubLoginId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Githubloginid"
          },
          "googleLoginId": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Googleloginid"
          },
          "referredBy": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Referredby"
          },
          "countRepoGen": {
            "type": "integer",
            "title": "Countrepogen"
          },
          "isVerified": {
            "type": "boolean",
            "title": "Isverified",
            "default": false
          }
        },
        "type": "object",
        "required": [
          "id",
          "email",
          "firstName",
          "lastName",
          "phone"
        ],
        "title": "UserSingupResponseSchema"
      },
      "UserUpdateSchema": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "firstName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Firstname"
          },
          "lastName": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lastname"
          },
          "birthday": {
            "anyOf": [
              {
                "type": "string",
                "format": "date"
              },
              {
                "type": "null"
              }
            ],
            "title": "Birthday"
          },
          "gender": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Gender"
          },
          "address": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Address"
          },
          "zipcode": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Zipcode"
          },
          "city": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "City"
          },
          "country": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Country"
          },
          "lang": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Lang"
          },
          "imgUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Imgurl"
          }
        },
        "type": "object",
        "required": [
          "id",
          "email"
        ],
        "title": "UserUpdateSchema"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "VerifyNewPasswordSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "newPassword": {
            "type": "string",
            "title": "Newpassword"
          }
        },
        "type": "object",
        "required": [
          "code",
          "email",
          "newPassword"
        ],
        "title": "VerifyNewPasswordSchema"
      },
      "VerifyNewPasswordWithOldPasswordSchema": {
        "properties": {
          "password": {
            "type": "string",
            "title": "Password"
          },
          "email": {
            "type": "string",
            "title": "Email"
          },
          "newPassword": {
            "type": "string",
            "title": "Newpassword"
          }
        },
        "type": "object",
        "required": [
          "password",
          "email",
          "newPassword"
        ],
        "title": "VerifyNewPasswordWithOldPasswordSchema"
      },
      "VerifySecurityCodeSchema": {
        "properties": {
          "code": {
            "type": "string",
            "title": "Code"
          },
          "email": {
            "type": "string",
            "title": "Email"
          }
        },
        "type": "object",
        "required": [
          "code",
          "email"
        ],
        "title": "VerifySecurityCodeSchema"
      },
      "Workspace": {
        "properties": {
          "uuid": {
            "type": "string",
            "title": "Uuid"
          }
        },
        "type": "object",
        "required": [
          "uuid"
        ],
        "title": "Workspace"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/token"
          }
        }
      }
    }
  }
}