{"openapi": "3.1.0", "info": {"title": "Snorkell-Backend", "description": "This is a very custom OpenAPI schema", "version": "1.0.0"}, "paths": {"/api/v1/users": {"get": {"tags": ["users"], "summary": "Users List", "description": "Get all users.\n\nThis function retrieves a list of all user objects.\n\nArgs:\n    response (Response): The response object.\n    current_user (User?): The current user object. Defaults to the result of get_current_active_superuser.\n\nReturns:\n    List[User]: A list of user objects.", "operationId": "users_list_api_v1_users_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/User"}, "type": "array", "title": "Response Users List Api V1 Users Get"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "put": {"tags": ["users"], "summary": "User Edit", "description": "Update an existing user.\n\nIt updates the existing user with the provided user object. If the current user is a superuser, it retrieves the user data and updates it.\nIf the current user is not a superuser, it checks for sufficient privileges before updating the user.\n\nArgs:\n    user (UserUpdateSchema): The updated user object.\n    current_user (User?): The current user object. Defaults to Depends(get_current_active_user).\n\nReturns:\n    UserSingupResponseSchema: The updated user signup response schema.\n\nRaises:\n    HTTPException: If the user doesn't exist or if the current user doesn't have enough privileges.", "operationId": "user_edit_api_v1_users_put", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserUpdateSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserSingupResponseSchema"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}, "post": {"tags": ["users"], "summary": "User Create", "description": "Create a new user.\n\nIt creates a new user with the provided user object and assigns the current user object if available.\n\nArgs:\n    user (UserCreate): The user object.\n    current_user: The current user object.\n\nReturns:\n    User: The created user object.", "operationId": "user_create_api_v1_users_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserCreate"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/user": {"get": {"tags": ["users"], "summary": "User Me", "description": "Get own user.\n\nArgs:\n    current_user (User?): The current user object. Defaults to Depends(get_current_active_user).\n    blob (bool?): A boolean indicating whether to include blob data. Defaults to False.\n\nReturns:\n    UserSingupResponseSchema: The user signup response schema.", "operationId": "user_me_api_v1_user_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "blob", "in": "query", "required": false, "schema": {"type": "boolean", "default": false, "title": "Blob"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/{user_id}": {"get": {"tags": ["users"], "summary": "User Details", "description": "Get any user details.\n\nThis function retrieves the details of a specific user identified by the user_id parameter.\n\nArgs:\n    user_id (int): The ID of the user.\n    current_user: The current user object.\n\nReturns:\n    User: The user object.", "operationId": "user_details_api_v1_users__user_id__get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "delete": {"tags": ["users"], "summary": "User Delete", "description": "Delete existing user.\n\nIt deletes the user with the given user_id after checking the privileges of the current_user.\n\nArgs:\n    user_id (int): The ID of the user to delete.\n    current_user (User?): The current user object. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    dict: A dictionary with a success message.\n\nRaises:\n    HTTPException: If the current user doesn't have enough privileges to delete the user.", "operationId": "user_delete_api_v1_users__user_id__delete", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response User Delete Api V1 Users  User Id  Delete"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/admin": {"put": {"tags": ["users"], "summary": "User Update Admin", "description": "Update an existing user.\n\nThis function updates an existing user with the provided updated user object. It first checks if the user exists and if the update request may corrupt the database.\n\nArgs:\n    updated_user (User): The updated user object.\n    current_user (User?): The current user object. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    UserSingupResponseSchema: The updated user signup response schema.\n\nRaises:\n    HTTPException: If the user doesn't exist or if the update request may corrupt the database.", "operationId": "user_update_admin_api_v1_users_admin_put", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/User"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/users/{user_id}/redis/reset": {"get": {"tags": ["users"], "summary": "Reset Openai Usage", "description": "Reset user consumption.\n\nIt resets the usage of the specified user in the system.\n\nArgs:\n    user_id (int): The ID of the user.\n    current_user: The current user object.\n\nReturns:\n    dict: A dictionary indicating success.", "operationId": "reset_openai_usage_api_v1_users__user_id__redis_reset_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/{user_id}/redis/ttl": {"get": {"tags": ["users"], "summary": "User Ttl", "description": "Get user TTL.\n\nThis function retrieves the time to live (TTL) value for a specific user from the Redis cache.\n\nArgs:\n    user_id (int): The ID of the user.\n    current_user (User?): The current user object. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    dict: A dictionary with the user ID and TTL value.", "operationId": "user_ttl_api_v1_users__user_id__redis_ttl_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response User Ttl Api V1 Users  User Id  Redis Ttl Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/{user_id}/redis/get": {"get": {"tags": ["users"], "summary": "Redis Get", "description": "Get Redis data for a user.\n\nIt retrieves the usage count and TTL value for the specified user from Redis.\n\nArgs:\n    user_id (int): The ID of the user.\n    current_user (User?): The current user object. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    dict: A dictionary with the user ID, usage count, and TTL value.", "operationId": "redis_get_api_v1_users__user_id__redis_get_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "path", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "object", "title": "Response Redis Get Api V1 Users  User Id  Redis Get Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/redis/get": {"get": {"tags": ["users"], "summary": "Redis Get All", "description": "Get Redis data for all users.\n\nIt retrieves Redis data for all users, including their usage count, email, and name.\n\nArgs:\n    current_user (User): The current user object.\n\nReturns:\n    List[dict]: A list of dictionaries with user ID, usage count, email, and name.", "operationId": "redis_get_all_api_v1_users_redis_get_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/apiToken/create": {"get": {"tags": ["users"], "summary": "Generate Api Token", "description": "Generate API token for the current user.\n\nIt generates an API token for the current user and returns a dictionary containing the response schema for the generated API token.\n\nArgs:\n    current_user (User?): The current user. Defaults to Depends(get_current_active_user).\n\nReturns:\n    dict: A dictionary containing the response schema for the generated API token.", "operationId": "generate_api_token_api_v1_apiToken_create_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserApiKeyResponseSchema"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/apiToken/get/all": {"get": {"tags": ["users"], "summary": "Get Api Token", "description": "Get API token for the current user.\n\nIt retrieves the API tokens for the current user based on their role. If the current user is a superuser, it retrieves all API tokens, otherwise it retrieves API tokens associated with the user's email.\n\nArgs:\n    current_user (User?): The current user. Defaults to Depends(get_current_active_user).\n\nReturns:\n    List: A list of API tokens for the current user.\n\nRaises:\n    Exception: If there is an error while retrieving the API tokens.\n\nExamples:\n    Example usage:\n    ```\n    api_tokens = get_api_token()\n    print(api_tokens)\n    ```", "operationId": "get_api_token_api_v1_apiToken_get_all_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"items": {"$ref": "#/components/schemas/UserApiKeyResponseSchema"}, "type": "array", "title": "Response Get Api Token Api V1 Apitoken Get All Get"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/apiToken/{id}/delete": {"get": {"tags": ["users"], "summary": "Delete Api Token", "description": "Delete API token for the given user.\n\nIt deletes the API token for the specified user and returns the response schema for the deleted API token.\n\nArgs:\n    id (int): The ID of the API token to be deleted.\n    current_user (User?): The current active user. Defaults to Depends(get_current_active_user).\n\nReturns:\n    dict: Response schema for the deleted API token.\n\nRaises:\n    Exception: If there is an error while deleting the API token.\n\nExamples:\n    resp = delete_api_token(123, current_user)", "operationId": "delete_api_token_api_v1_apiToken__id__delete_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserApiKeyResponseSchema"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/apiToken/{id}/toggle": {"get": {"tags": ["users"], "summary": "Toggle Api Token", "description": "Toggle the API token for the given user.\n\nIt toggles the API token for the user with the given ID and returns the response schema.\n\nArgs:\n    id (int): The ID of the user.\n    current_user (User?): The current active user. Defaults to Depends(get_current_active_user).\n\nReturns:\n    dict: The response schema.\n\nRaises:\n    Exception: If an error occurs while toggling the API token.\n\nExamples:\n    resp = toggle_api_token(123, current_user)", "operationId": "toggle_api_token_api_v1_apiToken__id__toggle_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/users/{id}/requestLog": {"get": {"tags": ["users"], "summary": "Request Log Api Token", "description": "Requests log API token for the given user ID.\n\nIt sends a request to Firebase to retrieve all requests made by the user identified by the given ID.\n\nArgs:\n    id (int): The user ID for which the log API token is requested.\n    current_user (User?): The current user. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    dict: The response containing all requests of the user from Firebase.", "operationId": "request_log_api_token_api_v1_users__id__requestLog_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "path", "required": true, "schema": {"type": "integer", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/user/referred": {"get": {"tags": ["users"], "summary": "Referred By", "description": "Update the current user's referral information.\n\nArgs:\n    user_id (int): The ID of the user who referred the current user.\n    current_user (User?): The current active user. Defaults to the result of get_current_active_user.\n\nReturns:\n    dict: A dictionary containing the updated user signup response schema.\n\nRaises:\n    HTTPException: If the current user is already referred by someone.\n\nExamples:\n    referred_by(123, current_user)", "operationId": "referred_by_api_v1_user_referred_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "query", "required": true, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/user/email/update/request": {"post": {"tags": ["users"], "summary": "Update Email", "description": "Update the current user's email.\n\nArgs:\n    email_details (UpdateEmailSchema): The new email details.\n    current_user (User?): The current active user. Defaults to the result of get_current_active_user.\n\nReturns:\n    dict: A dictionary containing the updated user signup response schema.\n\nRaises:\n    HTTPException: If the new email address is already in use.\n\nExamples:\n    {\n        \"success\": \"true\",\n        \"message\": f\"OTP sent to your email - {email_details.email}. Please verify to update your email.\"\n    }", "operationId": "update_email_api_v1_user_email_update_request_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UpdateEmailSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/user/email/update/verify": {"post": {"tags": ["users"], "summary": "Update Email Verify", "description": "Update the current user's email.\n\nArgs:\n    securityCode (VerifySecurityCodeSchema): The security code schema containing the new email address and verification code.\n    current_user (User?): The current active user. Defaults to the result of get_current_active_user.\n\nReturns:\n    dict: A dictionary containing the updated user signup response schema.\n\nRaises:\n    HTTPException: If the new email address is already in use.\n\nExamples:\n    ```\n    response = await update_email(securityCode, current_user)\n    ```", "operationId": "update_email_verify_api_v1_user_email_update_verify_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifySecurityCodeSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/health": {"get": {"tags": ["test"], "summary": "Basic", "description": "This function returns a dictionary with a message \"Hello World\".\n\nArgs:\n    request (Request): The request object containing headers.\n\nReturns:\n    dict: A dictionary with a message \"Hello World\", account_id, email, and picture.\n\nExamples:\n    >>> root()\n    {'message': 'Hello World', 'account_id': 'dummy', 'email': 'dummy@gmail.com', 'picture': 'https://production-gateway.snorkell.ai/api/v1'}", "operationId": "basic_api_v1_health_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}, "post": {"tags": ["test"], "summary": "Root", "description": "This function returns a dictionary with a message \"Hello World\".\n\nArgs:\n    request (Request): The request object containing headers.\n\nReturns:\n    dict: A dictionary with a message \"Hello World\", account_id, email, and picture.\n\nExamples:\n    >>> root()\n    {'message': 'Hello World', 'account_id': 'dummy', 'email': 'dummy@gmail.com', 'picture': 'https://production-gateway.snorkell.ai/api/v1'}", "operationId": "root_api_v1_health_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/v1/health/all": {"get": {"tags": ["test"], "summary": "Health All", "description": "Returns a dictionary with the health status of various services.\n\nIt checks the health status of different services and returns a dictionary containing their status.\n\nReturns:\n    dict: A dictionary containing the health status of various services.\n\nRaises:\n    HTTPException: If there is an error while checking the health status of any service.", "operationId": "health_all_api_v1_health_all_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/v2/db/init": {"get": {"tags": ["test"], "summary": "Db Init", "description": "Initialize the database and data and return a dictionary with a message.\n\nReturns:\n    dict: A dictionary with a message.\n\nRaises:\n    Exception: If there is an error initializing the database or data.\n\nExamples:\n    >>> root()\n    {'message': 'DB initialized'}", "operationId": "db_init_api_v2_db_init_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/contact": {"post": {"tags": ["test"], "summary": "Contact Us", "description": "Create a new user.\n\nArgs:\n    contactUs (ContactUsRequest): The contact information provided by the user.\n\nReturns:\n    dict: A dictionary indicating the success of the operation.\n\nExamples:\n    contact_info = ContactUsRequest(name=\"John Doe\", email=\"johndoe@example.com\", message=\"Hello\")\n    result = contact_us(contact_info)", "operationId": "contact_us_api_contact_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ContactUsRequest"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/privacy-policy": {"get": {"tags": ["test"], "summary": "Privacy Policy", "description": "Generates the privacy policy content.\n\nReturns:\n    str: The privacy policy content.\n\nRaises:\n    Exception: If there is an error while building the privacy policy.", "operationId": "privacy_policy_api_privacy_policy_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/api/toc": {"get": {"tags": ["test"], "summary": "Toc", "description": "Generates the table of contents for the terms and conditions.\n\n    Returns:\n        str: The generated table of contents.\n\n    Raises:\n        Exception: If there is an error while building the terms and conditions.\n\n    Examples:\n        >>> toc()\n        'Table of Contents:\n1. Introduction\n2. Terms of Service\n3. Privacy Policy\n...'", "operationId": "toc_api_toc_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/api/refund-policy": {"get": {"tags": ["test"], "summary": "Refund", "description": "Generates a table of contents (TOC) for a refund policy.\n\n    Returns:\n        str: The generated table of contents.\n\n    Examples:\n        >>> toc()\n        '1. Introduction\n2. Refund Policy\n   2.1. Eligibility\n   2.2. Process\n   2.3. Timeframe\n3. Conclusion'", "operationId": "refund_api_refund_policy_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/api/login": {"post": {"tags": ["auth"], "summary": "Login", "operationId": "login_api_login_post", "requestBody": {"content": {"application/x-www-form-urlencoded": {"schema": {"$ref": "#/components/schemas/Body_login_api_login_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/refreshToken": {"get": {"tags": ["auth"], "summary": "Refresh Token", "description": "Refresh the access token for the given user.\n\nArgs:\n    user (User?): The user for whom the access token needs to be refreshed. Defaults to Depends(validate_old_token).\n\nReturns:\n    Response: The refreshed access token for the user.\n\nRaises:\n    HTTPException: If the user is not authenticated, raises HTTP 401 Unauthorized exception with details.\n\nExamples:\n    user = User(username=\"example_user\", password=\"example_password\")\n    try:\n        refreshed_token = refresh_token(user)\n        print(refreshed_token)\n    except HTTPException as e:\n        print(f\"Error: {e.status_code} - {e.detail}\")", "operationId": "refresh_token_api_refreshToken_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/apiKey/get/token": {"get": {"tags": ["auth"], "summary": "Get Token From Api Key", "description": "Get token from API key.\n\nThis function retrieves a token from the API key for the given user.\n\nArgs:\n    user (User?): The user obtained from the API key. Defaults to Depends(get_current_user_from_api_key).\n\nReturns:\n    str: The generated response token.\n\nRaises:\n    HTTPException: If the user is not found or the API key is incorrect.\n\nExamples:\n    >>> get_token_from_api_key(user)\n    'generated_response_token'", "operationId": "get_token_from_api_key_api_apiKey_get_token_get", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "default": "", "title": "Api-Key"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/signup": {"post": {"tags": ["auth"], "summary": "Signup", "description": "Sign up a new user.\n\nIt signs up a new user using the provided signup data and returns the token response for the signed up user.\n\nArgs:\n    signup_data (UserSignupRequestSchema): The user signup data.\n\nReturns:\n    TokenResponseSchema: The token response for the signed up user.\n\nExamples:\n    signup_data = UserSignupRequestSchema(...)\n    token_response = signup(signup_data)", "operationId": "signup_api_signup_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/UserSignupRequestSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenResponseSchema"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/forgotPassword": {"post": {"tags": ["auth"], "summary": "Forgot Password", "description": "Sign up a user and generate a forgot password token.\n\nIt signs up a user and generates a forgot password token using the provided schema containing the user's email.\n\nArgs:\n    forgotPasswordSchema (ForgotPasswordSchema): The schema containing user's email for forgot password.\n\nReturns:\n    str: The generated forgot password token.\n\nExamples:\n    token = await signup(forgotPasswordSchema)", "operationId": "forgot_password_api_forgotPassword_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/ForgotPasswordSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/verifySecurityCode": {"post": {"tags": ["auth"], "summary": "Verify Security Code Request", "description": "Sign up a user after verifying the security code.\n\nArgs:\n    securityCode (VerifySecurityCodeSchema): The security code schema containing email and code.\n\nReturns:\n    dict: A dictionary containing the status of the security code verification and a message.\n\nExamples:\n    Example usage:\n    ```\n    result = signup(VerifySecurityCodeSchema(email=\"example@example.com\", code=\"123456\"))\n    print(result)\n    ```", "operationId": "verify_security_code_request_api_verifySecurityCode_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifySecurityCodeSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/setNewPassword": {"post": {"tags": ["auth"], "summary": "Set New Password", "description": "Sign up a user with a new password.\n\nArgs:\n    newPasswordSchema (VerifyNewPasswordSchema): An instance of VerifyNewPasswordSchema containing user's email, security code, and new password.\n\nReturns:\n    The result of the verification and password update process.\n\nExamples:\n    # Create an instance of VerifyNewPasswordSchema\n    new_password_schema = VerifyNewPasswordSchema(email='user@example.com', code='123456', new_password='new_password')\n\n    # Call the signup function\n    result = signup(new_password_schema)", "operationId": "set_new_password_api_setNewPassword_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifyNewPasswordSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/setNewPasswordFromOldPassword": {"post": {"tags": ["auth"], "summary": "Set New Password From Old Password", "description": "Sign up a user with a new password.\n\nIt updates the user's password with a new password provided in the schema.\n\nArgs:\n    newPasswordSchema (VerifyNewPasswordWithOldPasswordSchema): The schema containing the new password and old password for verification.\n\nReturns:\n    Awaitable: The result of updating the password with the new password.", "operationId": "set_new_password_from_old_password_api_setNewPasswordFromOldPassword_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/VerifyNewPasswordWithOldPasswordSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/TokenResponseSchema"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/activate": {"get": {"tags": ["auth"], "summary": "Activate", "description": "Activate a user account using the provided token.\n\nThis function activates a user account by using the provided token and redirects to the frontend login page with a success message.\n\nArgs:\n    token (str): The activation token for the user account.\n\nReturns:\n    RedirectResponse: A redirect response to the frontend login page with the activation success message.", "operationId": "activate_api_activate_get", "parameters": [{"name": "token", "in": "query", "required": true, "schema": {"type": "string", "title": "Token"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/generateActivationLink": {"get": {"tags": ["auth"], "summary": "Generateactivationlink", "operationId": "generateActivationLink_api_generateActivationLink_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/oauth/google/login": {"get": {"tags": ["google_auth"], "summary": "Login", "description": "This function handles the login process by preparing the authorization\nURL and redirecting the user to it.\n\nArgs:\n    request (Request): The request object containing query parameters.\n\nReturns:\n    RedirectResponse: Redirects the user to the authorization URL.\n\nExamples:\n    Example usage:\n    ```\n    from fastapi import Request\n    from fastapi.responses import RedirectResponse\n\n    request = Request(...)\n    response = login(request)\n    ```", "operationId": "login_api_oauth_google_login_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/oauth/google/callback": {"get": {"tags": ["google_auth"], "summary": "Callback", "description": "Handle the callback from Google OAuth.\n\nThis function handles the callback from Google OAuth by retrieving the state and code from the request query parameters,\nobtaining the access token from Google using the code and redirect URI, fetching user data from Google OAuth, and then\ncreating or retrieving the user based on the user data.\n\nArgs:\n    request (Request): The request object containing query parameters.\n\nReturns:\n    RedirectResponse: If the 'state' query parameter contains 'vscode', a RedirectResponse object with the URL containing the token and state.\n    RedirectResponse: If the 'state' query parameter does not contain 'vscode', a RedirectResponse object with the URL containing only the token.", "operationId": "callback_api_oauth_google_callback_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/oauth/google/connect": {"get": {"tags": ["google_auth"], "summary": "Connect", "description": "Connect to Google OAuth for user authentication.\n\nThis function handles the process of connecting to Google OAuth for user authentication.\nIt retrieves the access token from Google using the provided code and then fetches user data from Google OAuth.\nIf the user does not exist, it creates a new user using the retrieved data.\n\nArgs:\n    request (Request): The request object containing query parameters.\n\nReturns:\n    RedirectResponse: A redirect response to the frontend with the generated token for user authentication.\n\nRaises:\n    HTTPException: If the token is invalid or the user is already connected with a different account.", "operationId": "connect_api_oauth_google_connect_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/oauth/github/login": {"get": {"tags": ["github_auth"], "summary": "Auth", "operationId": "auth_api_oauth_github_login_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/oauth/github/callback": {"get": {"tags": ["github_auth"], "summary": "Callback", "description": "Process the callback from the OAuth provider and handle user authentication.\n\nThis function processes the callback from the OAuth provider, retrieves user data, and handles user authentication.\n\nArgs:\n    request (Request): The incoming request object.\n    code (str?): The authorization code from the OAuth provider. Defaults to None.\n    state (str?): The state parameter from the OAuth provider. Defaults to None.\n\nReturns:\n    RedirectResponse: If the state contains 'vscode', a RedirectResponse with the token appended to the URL.\n    RedirectResponse: If the state does not contain 'vscode', a RedirectResponse with the token appended to the URL.\n\nRaises:\n    HTTPException: If the authorization code is not found in the request.", "operationId": "callback_api_oauth_github_callback_get", "parameters": [{"name": "code", "in": "query", "required": false, "schema": {"type": "string", "title": "Code"}}, {"name": "state", "in": "query", "required": false, "schema": {"type": "string", "title": "State"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/oauth/github/connect": {"get": {"tags": ["github_auth"], "summary": "Connect", "description": "Connects the user with their GitHub account and generates a response token for authentication.\n\nThis function connects the user with their GitHub account by validating the provided code and state in the request.\nIt then retrieves the user data from GitHub and checks if the user is already connected with a different account.\nIf not, it updates the user's GitHub login ID and generates a response token for authentication.\n\nArgs:\n    request (Request): The request object containing query parameters 'code' and 'state'.\n\nReturns:\n    RedirectResponse: A redirect response to the frontend URL for authentication.\n\nRaises:\n    HTTPException: If the provided code or user data is invalid, or if the user is already connected with a different account.", "operationId": "connect_api_oauth_github_connect_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/oauth/github/install": {"get": {"tags": ["github_auth"], "summary": "Install", "description": "Handle GitHub webhook request.\n\nArgs:\n    request (Request): The incoming request object.\n    code (str?): The authorization code. Defaults to None.\n    installation_id (str?): The installation ID. Defaults to None.\n\nReturns:\n    Union[RedirectResponse, HTTPException]: If successful, returns a RedirectResponse with a token;\n    otherwise, raises an HTTPException with an appropriate error message.\n\nRaises:\n    HTTPException: If the authorization code is not found or if something goes wrong during the process.\n\nExamples:\n    An example of using this function:\n    ```\n    response = github_webhook(request, code=\"example_code\", installation_id=\"example_id\")\n    ```", "operationId": "install_api_oauth_github_install_get", "parameters": [{"name": "code", "in": "query", "required": false, "schema": {"type": "string", "title": "Code"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/oauth/github/user/create/admin": {"get": {"tags": ["github_auth"], "summary": "Create Admin", "description": "Process GitHub webhook and return user data.\n\nThis function processes a GitHub webhook and returns user data obtained from GitHub.\nIt first checks if the required parameters, github_login_name and installation_id, are provided.\nIf not, it raises an HTTPException with a status code of 400 and a detail message indicating the missing authorization code.\nIt then retrieves user data from GitHub using the provided installation ID and GitHub login name.\nIf the user does not exist in the database, it creates a new user with the obtained GitHub data and sets the onboarding channel as 'GITHUB'.\nIf the user's GitHub login name is not already set, it updates the user's GitHub login name.\n\nArgs:\n    github_login_name (str): The GitHub login name.\n    installation_id (str): The installation ID.\n    super_user: The super user.\n\nReturns:\n    dict: User data obtained from GitHub.\n\nRaises:\n    HTTPException: If github_login_name or installation_id is not provided.", "operationId": "create_admin_api_oauth_github_user_create_admin_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "github_login_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Github Login Name"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/oauth/github/user/repo": {"get": {"tags": ["github_auth"], "summary": "Get User Repo", "description": "Process GitHub webhook and return user data.\n\nArgs:\n    github_login_name (str): The GitHub login name of the user.\n    installation_id (str): The installation ID.\n    super_user: The super user.\n\nReturns:\n    dict: User data obtained from GitHub.\n\nRaises:\n    HTTPException: If github_login_name or installation_id is not provided.", "operationId": "get_user_repo_api_oauth_github_user_repo_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "github_login_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Github Login Name"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/oauth/github/experiment": {"get": {"tags": ["github_auth"], "summary": "Experiment", "description": "Process the GitHub webhook request and publish a message to RabbitMQ.\n\nArgs:\n    request (Request): The request object containing the GitHub webhook data.\n\nReturns:\n    dict: A dictionary indicating the success of the operation.\n\nExamples:\n    The function can be called as follows:\n    ```\n    result = experiment(request)\n    print(result)\n    ```", "operationId": "experiment_api_oauth_github_experiment_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/bitbucket/registration": {"post": {"tags": ["grouped_auth", "bibucket_auth"], "summary": "Install Bitbucket", "operationId": "install_bitbucket_api_bitbucket_registration_post", "parameters": [{"name": "x-forge-oauth-system", "in": "header", "required": false, "schema": {"type": "string", "default": "", "title": "X-Forge-Oauth-System"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BitbucketAppInstallation"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/bitbucket/generate/diff/doc": {"post": {"tags": ["grouped_auth", "bibucket_auth"], "summary": "Root", "operationId": "root_api_bitbucket_generate_diff_doc_post", "parameters": [{"name": "x-forge-oauth-system", "in": "header", "required": false, "schema": {"type": "string", "default": "", "title": "X-Forge-Oauth-System"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/BitbucketEvent"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/transactions": {"get": {"tags": ["grouped_payment", "common_payment"], "summary": "Get All Transactions", "description": "Get all transactions for the requested user.\n\nThis function retrieves all transactions associated with the requested user's email address.\n\nArgs:\n    requested_user (models.User): The user for whom transactions are requested.\n\nReturns:\n    List[schemas.PaymentInfo]: A list of payment information objects associated with the requested user.", "operationId": "get_all_transactions_api_transactions_get", "parameters": [{"name": "token", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Token"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {"type": "array", "items": {"$ref": "#/components/schemas/PaymentInfo"}, "title": "Response Get All Transactions Api Transactions Get"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/payment": {"get": {"tags": ["grouped_payment", "stripe_payment"], "summary": "Initiate Payment", "description": "Initiates a payment using Razorpay integration.\n\nArgs:\n    request (Request): The request object containing information about the payment.\n\nReturns:\n    TemplateResponse: A template response containing the pay.html template, request object, order ID, and amount.", "operationId": "initiate_payment_api_payment_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/api/payment/callback": {"post": {"tags": ["grouped_payment", "stripe_payment"], "summary": "Handle Payment Callback", "description": "Handle payment callback from Razorpay.\n\nThis function handles the payment callback from Razorpay by verifying the payment signature,\nretrieving user information, creating user payment information, updating user plan type,\nand handling successful or failed payment logic.\n\nArgs:\n    request (Request): The request object containing payment information.\n\nReturns:\n    dict: A dictionary containing the status and message of the payment handling process.\n\nRaises:\n    Exception: If an error occurs during the payment handling process.", "operationId": "handle_payment_callback_api_payment_callback_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/stripe/create-checkout-session": {"get": {"tags": ["grouped_payment", "stripe_payment"], "summary": "Create Checkout Session", "description": "Create a checkout session for the given user and product price ID.\n\nThis function creates a checkout session using the Stripe API for the specified user and product price ID.\n\nArgs:\n    requested_user (models.User): The user for whom the checkout session is being created.\n    product_price_id (str): The ID of the product price.\n\nReturns:\n    RedirectResponse: A redirect response to the checkout session URL.\n\nRaises:\n    Exception: If an error occurs during the creation of the checkout session.", "operationId": "create_checkout_session_api_stripe_create_checkout_session_get", "parameters": [{"name": "product_price_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Product Price Id"}}, {"name": "token", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Token"}}], "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/stripe/checkout": {"get": {"tags": ["grouped_payment", "stripe_payment"], "summary": "Strip Checkout", "description": "Render the Stripe checkout template.\n\nArgs:\n    request (Request): The request object.\n\nReturns:\n    TemplateResponse: The rendered Stripe checkout template.", "operationId": "strip_checkout_api_stripe_checkout_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/api/stripe/success": {"get": {"tags": ["grouped_payment", "stripe_payment"], "summary": "Strip Success", "operationId": "strip_success_api_stripe_success_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/api/stripe/cancel": {"get": {"tags": ["grouped_payment", "stripe_payment"], "summary": "Strip Cancel", "operationId": "strip_cancel_api_stripe_cancel_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/api/stripe/fail": {"get": {"tags": ["grouped_payment", "stripe_payment"], "summary": "Strip Fail", "description": "Redirect to the payments page on the frontend in case of failure.\n\nArgs:\n    request (Request): The request object.\n\nReturns:\n    RedirectResponse: Redirects to the payments page on the frontend.", "operationId": "strip_fail_api_stripe_fail_get", "responses": {"200": {"description": "Successful Response", "content": {"text/html": {"schema": {"type": "string"}}}}}}}, "/api/stripe/webhook": {"post": {"tags": ["grouped_payment", "stripe_payment"], "summary": "Webhook", "description": "Handle the incoming webhook request from Stripe and fulfill the purchase.\n\nThis function processes the incoming webhook request from Stripe, validates the signature, and handles the checkout.session.completed event to fulfill the purchase.\n\nArgs:\n    request (Request): The incoming request object containing the payload and signature.\n\nReturns:\n    JSONResponse: A JSON response indicating the success of the webhook handling.\n\nRaises:\n    ValueError: If the payload is invalid.\n    stripe.error.SignatureVerificationError: If the signature is invalid.", "operationId": "webhook_api_stripe_webhook_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/cashfree/checkout": {"get": {"tags": ["grouped_payment", "cashfree_payment"], "summary": "Create Cashfree Checkout Session", "description": "Create a cashfree checkout session for the specified user and product.\nThis function creates a cashfree checkout session for the specified user and product, and optionally for a list of repository IDs.\n\nArgs:\n    user (models.User): The user for whom the checkout session is being created.\n    product_id (str?): The ID of the product for which the checkout session is being created.\n    repo_ids (List[str]?): A list of repository IDs.\n\nReturns:\n    dict: A dictionary containing the cashfree session ID.", "operationId": "create_cashfree_checkout_session_api_cashfree_checkout_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "product_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Product Id"}}, {"name": "repo_ids", "in": "query", "required": false, "schema": {"type": "array", "items": {"type": "string"}, "default": [], "title": "Repo Ids"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/cashfree/subscription": {"get": {"tags": ["grouped_payment", "cashfree_payment"], "summary": "Create Cashfree Subscription Session", "description": "Create a cashfree checkout session for a user.\n\nThis function creates a cashfree checkout session for a user by processing the payment request for a specific product and user.\n\nArgs:\n    user (models.User): The user for whom the checkout session is being created.\n    product_id (str?): The ID of the product for which the checkout session is being created. Defaults to None.\n    repo_ids (List[str]?): A list of repository IDs. Defaults to an empty list.\n\nReturns:\n    dict: A dictionary containing the message and redirect link to the created checkout session.", "operationId": "create_cashfree_subscription_session_api_cashfree_subscription_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "product_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Product Id"}}, {"name": "repo_ids", "in": "query", "required": false, "schema": {"type": "array", "items": {"type": "string"}, "default": [], "title": "Repo Ids"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/cashfree/callback": {"get": {"tags": ["grouped_payment", "cashfree_payment"], "summary": "Create Cashfree Callback", "description": "Callback URL for Cashfree payment gateway.\n\nThis endpoint is called by Cashfree after the payment is processed.\n\nArgs:\n    cashfree_signature (schemas.CashfreeSignature): An instance of CashfreeSignature model.\n    signature (str): The signature string. Defaults to None.\n\nReturns:\n    RedirectResponse: Redirects to the profile payments page on the frontend.", "operationId": "create_cashfree_callback_api_cashfree_callback_get", "parameters": [{"name": "signature", "in": "query", "required": false, "schema": {"type": "string", "title": "Signature"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/cashfree/sub/callback": {"get": {"tags": ["grouped_payment", "cashfree_payment"], "summary": "Create Cashfree Sub Callback", "description": "Callback URL for Cashfree payment gateway.\n\nThis function handles the callback from Cashfree after the payment is processed. It updates the order on subscription payment and redirects to the profile payments page.\n\nArgs:\n    cashfree_order_signature (schemas.CashfreeOrderSignature): The signature of the Cashfree order.\n\nReturns:\n    RedirectResponse: Redirects to the profile payments page.", "operationId": "create_cashfree_sub_callback_api_cashfree_sub_callback_get", "parameters": [{"name": "signature", "in": "query", "required": false, "schema": {"type": "string", "title": "Signature"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}, "post": {"tags": ["grouped_payment", "cashfree_payment"], "summary": "Create Cashfree Sub Callback", "description": "Callback URL for Cashfree payment gateway.\n\nThis function handles the callback from Cashfree after the payment is processed. It updates the order on subscription payment and redirects to the profile payments page.\n\nArgs:\n    cashfree_order_signature (schemas.CashfreeOrderSignature): The signature of the Cashfree order.\n\nReturns:\n    RedirectResponse: Redirects to the profile payments page.", "operationId": "create_cashfree_sub_callback_api_cashfree_sub_callback_post", "parameters": [{"name": "signature", "in": "query", "required": false, "schema": {"type": "string", "title": "Signature"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/analytics/conversionRates": {"get": {"tags": ["analytics"], "summary": "Conversionrates", "description": "Get the conversion rates for the current user.\n\nArgs:\n    current_user (User?): The current user. Defaults to Depends(get_current_active_user).\n\nReturns:\n    dict: A dictionary containing the conversion rates.", "operationId": "conversionRates_api_v1_analytics_conversionRates_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/v1/analytics/usage": {"get": {"tags": ["analytics"], "summary": "Usage", "description": "Get usage information for the current user.\n\nThis function retrieves the usage information for the current user by\nfetching data from the Redis database.\n\nArgs:\n    current_user (User?): The current user. Defaults to Depends(get_current_active_user).\n\nReturns:\n    dict: A dictionary containing the usage information.\n\nExamples:\n    usage = await usage(current_user)", "operationId": "usage_api_v1_analytics_usage_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/usage/doc/gen": {"get": {"tags": ["analytics"], "summary": "Usage Doc Gen", "description": "Generate usage documentation for GitHub apps.\n\nThis function retrieves all GitHub apps associated with the current user\nand their respective repositories. It then retrieves the usage\ninformation for each app from the Redis database and returns a\ndictionary containing the usage information for each repository.\n\nArgs:\n    current_user (User?): The current active user. Defaults to the result of the\n        get_current_active_user function.\n\nReturns:\n    dict: A dictionary containing the usage information for each repository, where\n        the keys are the full repository names and the values are the respective\n        usage information.", "operationId": "usage_doc_gen_api_v1_analytics_usage_doc_gen_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/usage/admin/doc/gen": {"get": {"tags": ["analytics"], "summary": "Usage Doc Gen Admin", "description": "Retrieve usage information for a user.\n\nArgs:\n    user_id (int): The ID of the user for whom the usage information is to be retrieved.\n        Defaults to None.\n    current_user (User): The current active superuser.\n\nReturns:\n    Dict[str, Union[str, int, Dict[str, Any]]]: A dictionary containing the user's email, name, id, and usage\n        information.", "operationId": "usage_doc_gen_admin_api_v1_analytics_usage_admin_doc_gen_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "query", "required": false, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/analytics/usage/admin": {"get": {"tags": ["analytics"], "summary": "Usage Admin", "description": "Retrieve usage information for a specific user.\n\nThis function retrieves the usage information for a specific user\nidentified by the user_id. If user_id is not provided, it returns an\nerror message indicating that user_id is required.\n\nArgs:\n    user_id (int): The ID of the user for whom the usage information is to be retrieved.\n    super_user (User): The super user object obtained by depending on\n        get_current_active_superuser.\n\nReturns:\n    dict: A dictionary containing the email, name, id, and usage information of\n        the user.", "operationId": "usage_admin_api_v1_analytics_usage_admin_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "user_id", "in": "query", "required": false, "schema": {"type": "integer", "title": "User Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/analytics/openai/toggle": {"get": {"tags": ["analytics"], "summary": "Open Ai Toggle", "description": "Toggle the OpenAI service for the current user.\n\nThis function toggles the OpenAI service for the current user by calling\nthe 'toogle_openai_usage' function.\n\nArgs:\n    current_user (User): The current active superuser.\n\nReturns:\n    dict: A dictionary containing the status of OpenAI service after toggling.", "operationId": "open_ai_toggle_api_v1_analytics_openai_toggle_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/report": {"post": {"tags": ["analytics"], "summary": "Report", "description": "Report the usage value to Firebase.\n\nThis function reports the usage value to Firebase by posting an error\nmessage.\n\nArgs:\n    current_user (User): The current active user.\n    data (dict): The data to be reported.\n\nReturns:\n    dict: A dictionary with the status of the report.", "operationId": "report_api_v1_analytics_report_post", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "title": "Data"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/redis/get": {"post": {"tags": ["analytics"], "summary": "Redis Get", "description": "Retrieve a value from the Redis database using the provided key.\n\nArgs:\n    data (RedisSchema): The schema representing the data to be used for retrieving the value.\n    current_user (User?): The current user. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    Any: The value retrieved from the Redis database.\n\nExamples:\n    # Example usage of the redis_get function\n    value = redis_get(data=some_redis_schema, current_user=some_user)", "operationId": "redis_get_api_v1_analytics_redis_get_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RedisSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/redis/set": {"post": {"tags": ["analytics"], "summary": "Redis Set", "description": "Reports the data to the system.\n\nIt reports the given data to the system and handles the expiration of\nthe data based on the time-to-live (TTL) value.\n\nArgs:\n    data (RedisSchema): The data to be reported.\n    current_user (User?): The current user. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    dict: A dictionary containing the status of the report.\n\nExamples:\n    data = FlagSchema(key=\"example_key\", value=\"example_value\", ttl=60)\n    current_user = User(username=\"admin\", is_superuser=True)\n    report(data, current_user)", "operationId": "redis_set_api_v1_analytics_redis_set_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/RedisSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/flag/get": {"post": {"tags": ["analytics"], "summary": "Flag Get", "description": "Retrieve a value from the Redis database using the provided key.\n\nArgs:\n    data (FlagSchema): The schema representing the data to be used for retrieving the value.\n    current_user (User?): The current user. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    Any: The value retrieved from the Redis database.\n\nExamples:\n    # Example usage of the flag_get function\n    value = flag_get(data=some_flag_schema, current_user=some_user)", "operationId": "flag_get_api_v1_analytics_flag_get_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FlagSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/flag/set": {"post": {"tags": ["analytics"], "summary": "Flag Set", "description": "Reports the data to the system.\n\nArgs:\n    data (FlagSchema): The data to be reported.\n    current_user (User?): The current user. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    dict: A dictionary containing the status of the report.", "operationId": "flag_set_api_v1_analytics_flag_set_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/FlagSchema"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/flag/get/all": {"get": {"tags": ["analytics"], "summary": "Flag Get All", "description": "Reports the data to the system.\n\nArgs:\n    current_user (User): The current user. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    dict: A dictionary containing the status of the report.", "operationId": "flag_get_all_api_v1_analytics_flag_get_all_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/usage/count": {"get": {"tags": ["analytics"], "summary": "Get User Count", "description": "Get the total count of users and repositories.\n\nThis function retrieves the total count of users and repositories from\nthe data access layer. If the count is not available in the Redis cache,\nit fetches the count from the respective services and stores it in the\ncache with a TTL of 60 minutes.\n\nReturns:\n    dict: A dictionary containing the count of users and repositories.\n\nExamples:\n    Usage of get_user_count():\n    >>> result = get_user_count()\n    >>> print(result)\n    {'users': 100, 'repos': 50}", "operationId": "get_user_count_api_v1_analytics_usage_count_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/v1/analytics/usage/reset": {"get": {"tags": ["analytics"], "summary": "Reset User Count", "description": "Get the total count of users and repositories.\n\nThis function retrieves the total count of users and repositories from\nthe data access layer. If the count is not available in the Redis cache,\nit fetches the count from the respective services and stores it in the\ncache with a TTL of 60 minutes.\n\nArgs:\n    current_user (User?): The current active superuser. Defaults to\n        Depends(get_current_active_superuser).\n\nReturns:\n    dict: A dictionary containing the count of users and repositories.\n\nExamples:\n    Usage of get_user_count():\n    >>> result = get_user_count()\n    >>> print(result)\n    {'users': 100, 'repos': 50}", "operationId": "reset_user_count_api_v1_analytics_usage_reset_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/analytics/usage/githubApp": {"get": {"tags": ["analytics"], "summary": "Get Github Stats", "description": "Get GitHub statistics for a specific repository.\n\nThis function retrieves GitHub statistics for a specific repository\nbased on the organization name, repository name, installation ID, and\nthe current user's GitHub login ID.\n\nArgs:\n    org_name (str?): The name of the organization. Defaults to the result of\n        validate_org_name.\n    repo_name (str?): The name of the repository. Defaults to the result of\n        validate_repo_name.\n    installation_id (int): The installation ID. Defaults to the result of validate_installation_id.\n    current_user (User): The current active user. Defaults to the result of\n        get_current_active_user.\n\nReturns:\n    list: A list containing the GitHub statistics for the specified repository.", "operationId": "get_github_stats_api_v1_analytics_usage_githubApp_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "orgName", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Orgname"}}, {"name": "repoName", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Reponame"}}, {"name": "id", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/analytics/redis/toggle/set": {"get": {"tags": ["analytics"], "summary": "Update Toggle Set", "description": "Get the list of blacklisted users.\n\nThis function retrieves the list of blacklisted users from the data\naccess layer.", "operationId": "update_toggle_set_api_v1_analytics_redis_toggle_set_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "userId", "in": "query", "required": false, "schema": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Userid"}}, {"name": "setType", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Settype"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/analytics/redis/get/set": {"get": {"tags": ["analytics"], "summary": "Get Toggle Set", "operationId": "get_toggle_set_api_v1_analytics_redis_get_set_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "setType", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Settype"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/analytics/unsub/user": {"get": {"tags": ["analytics"], "summary": "Add Unsub User", "operationId": "add_unsub_user_api_v1_analytics_unsub_user_get", "parameters": [{"name": "email", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Email"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/analytics/unsub/list": {"get": {"tags": ["analytics"], "summary": "Unsub List", "operationId": "unsub_list_api_v1_analytics_unsub_list_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/app/github/webhook": {"post": {"tags": ["github_app"], "summary": "Handle Webhook", "description": "Handles the webhook event from GitHub.\n\nArgs:\n    request (Request): The HTTP request object containing the payload and headers.\n\nReturns:\n    dict: A dictionary indicating the success of the operation.\n\nRaises:\n    HTTPException: If the 'X-GitHub-Event' header is not found in the request.", "operationId": "handle_webhook_api_app_github_webhook_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/app/github/get/experimental": {"post": {"tags": ["github_app"], "summary": "Run Pubsub Experiment", "description": "Runs a pub/sub experiment.\n\nThis function runs a pub/sub experiment by setting the user and API token to the provided merged pull request\nand then starts a document generation process using the specified vendor strategy.\n\nArgs:\n    merged_pull_request (MergedPullRequest): The merged pull request object.\n    current_user (schemas.User?): The current active user. Defaults to Depends(get_current_user_from_api_key).\n    snorkell_api_key (str?): The snorkell API key. Defaults to Header(default=None).", "operationId": "run_pubsub_experiment_api_app_github_get_experimental_post", "parameters": [{"name": "snorkell-api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Snorkell-Api-Key"}}, {"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "default": "", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MergedPullRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/get/repositories": {"get": {"tags": ["github_app"], "summary": "Get All Repositories", "description": "Retrieves all repositories for the current user.\n\nArgs:\n    current_user (schemas.User): The current user object obtained from the authentication.\n\nReturns:\n    list: A list of repositories for the current user.\n\nExamples:\n    Example usage of get_all_repositories:\n\n    repositories = get_all_repositories()", "operationId": "get_all_repositories_api_app_github_get_repositories_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/app/github/get/repositories/admin": {"get": {"tags": ["github_app"], "summary": "Get All Repositories Admin", "description": "Retrieves all repositories for the current user.\n\nIt retrieves all the repositories associated with the current user using the provided login ID, if available.\n\nArgs:\n    current_user (schemas.User): The current user object obtained from the authentication.\n    login_id (str?): The login ID of the user. Defaults to None.\n\nReturns:\n    List[Repository]: A list of repositories for the current user.\n\nRaises:\n    Exception: If there is an error retrieving the repositories.\n\nExamples:\n    repositories = get_all_repositories(current_user, login_id)", "operationId": "get_all_repositories_admin_api_app_github_get_repositories_admin_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "login_id", "in": "query", "required": false, "schema": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Login Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/migrate/repositories/admin": {"post": {"tags": ["github_app"], "summary": "Migrate All Repositories", "description": "Retrieves all repositories for the current user.\n\nIt retrieves all repositories for the current user by calling the `get_all_repositories` method from the `github_app_service` and sets the `is_active` attribute of each repository to True before updating them.\n\nArgs:\n    super_user (schemas.User?): The super user object obtained from the current active superuser. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    List: A list of repositories for the current user.", "operationId": "migrate_all_repositories_api_app_github_migrate_repositories_admin_post", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/app/github/install/repositories/admin": {"get": {"tags": ["github_app"], "summary": "Install All Repositories", "description": "Retrieves all repositories for the current user.\n\nIt retrieves all the repositories for the current user and optionally installs them if specified.\n\nArgs:\n    current_user (schemas.User): The current user object obtained from the authentication.\n    login_id (str): The login ID of the user.\n    should_install (bool): A flag indicating whether to install the repositories.\n\nReturns:\n    List[Repository]: A list of repositories for the current user.\n\nRaises:\n    Exception: If an error occurs during the repository retrieval process.\n\nExamples:\n    Example usage of get_all_repositories:\n    ```python\n    repositories = get_all_repositories(current_user, login_id, should_install)\n    for repository in repositories:\n        print(repository.name)\n    ```", "operationId": "install_all_repositories_api_app_github_install_repositories_admin_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "login_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Login Id"}}, {"name": "should_install", "in": "query", "required": false, "schema": {"type": "boolean", "default": false, "title": "Should Install"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/install/selected/repository/admin": {"get": {"tags": ["github_app"], "summary": "Install All Repositories Admin", "description": "Retrieves all repositories for the current user.\n\nThis function retrieves all repositories for the current user based on the provided parameters such as organization name, installation ID,\nrepository name, user's GitHub login ID, and the current user object obtained from the authentication.\n\nArgs:\n    org_name (str): Name of the organization.\n    installation_id (str): The installation ID.\n    repo_name (str): Name of the repository.\n    user_github_login_id (str): The login ID of the user.\n    current_user (schemas.User): The current user object obtained from the authentication. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    List[Repository]: A list of repositories for the current user.\n\nRaises:\n    HTTPException: If mandatory parameters are not present or if an error occurs during the repository retrieval or installation process.", "operationId": "install_all_repositories_admin_api_app_github_install_selected_repository_admin_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "org_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Org Name"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}, {"name": "repo_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Repo Name"}}, {"name": "user_github_login_id", "in": "query", "required": false, "schema": {"type": "string", "title": "User Github Login Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/delete/repository": {"delete": {"tags": ["github_app"], "summary": "Delete All Repositories", "description": "Retrieves all repositories for the current user.\n\nIt retrieves all the repositories for the current user using the provided user object and repository id.\n\nArgs:\n    current_user (schemas.User): The current user object obtained from the authentication.\n    id (int): The id of the repository to retrieve.\n\nReturns:\n    List: A list of repositories for the current user.\n\nRaises:\n    Exception: If there is an error while retrieving the repositories.\n\nExamples:\n    # Example usage of get_all_repositories\n    repositories = get_all_repositories(current_user, 123)", "operationId": "delete_all_repositories_api_app_github_delete_repository_delete", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "id", "in": "query", "required": false, "schema": {"type": "integer", "title": "Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/delete/repository/admin": {"delete": {"tags": ["github_app"], "summary": "Delete All Repositories Admin", "description": "Retrieves all repositories for the current user.\n\nArgs:\n    current_user (schemas.User): The current user object obtained from the authentication.\n    org_name (str): The name of the organization.\n    installation_id (str): The installation id of the repository.\n    repo_name (str): The name of the repository.\n\nReturns:\n    List: A list of repositories for the current user.\n\nRaises:\n    Exception: If there is an error while retrieving the repositories.", "operationId": "delete_all_repositories_admin_api_app_github_delete_repository_admin_delete", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "org_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Org Name"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}, {"name": "repo_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Repo Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/generate/documentation/status": {"post": {"tags": ["github_app"], "summary": "Get Status Of Documentation Gen", "description": "Get the status of the documentation generation for a merged pull request.\n\nThis function retrieves the status of the documentation generation for a merged pull request\nby calling the document_generator.get_doc_run_status method.\n\nArgs:\n    merged_pull_request (MergedPullRequest): The merged pull request for which the documentation generation status is to be retrieved.\n    current_user (schemas.User?): The current user. Defaults to Depends(get_current_user_from_api_key).\n\nReturns:\n    The status of the documentation generation for the specified merged pull request.", "operationId": "get_status_of_documentation_gen_api_app_github_generate_documentation_status_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "default": "", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MergedPullRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/generate/documentation": {"post": {"tags": ["github_app"], "summary": "Generate Documentation", "description": "Generates documentation for a merged pull request.\n\nIt generates documentation for a merged pull request by validating the request, publishing a message, and notifying about the documentation generation process.\n\nArgs:\n    merged_pull_request (MergedPullRequest): The merged pull request object.\n    current_user (schemas.User?): The current user object obtained from the API key. Defaults to Depends(get_current_user_from_api_key).\n    response_class: The response class for streaming the generated documentation.\n\nReturns:\n    StreamingResponse: A streaming response containing the generated documentation.\n\nRaises:\n    Exception: If an error occurs during the documentation generation process.", "operationId": "generate_documentation_api_app_github_generate_documentation_post", "parameters": [{"name": "response_class", "in": "query", "required": false, "schema": {"title": "Response Class"}}, {"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "default": "", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/MergedPullRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/modified-functions": {"get": {"tags": ["github_app"], "summary": "Get Modified Functions", "description": "Get modified functions.\n\nReturns:\n    Awaitable: A coroutine that returns modified lines.\n\nExamples:\n    The following example demonstrates how to use get_modified_functions:\n\n    ```python\n    modified_lines = await get_modified_functions()\n    ```", "operationId": "get_modified_functions_api_app_github_modified_functions_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}, "/api/app/github/report/errors": {"post": {"tags": ["github_app"], "summary": "Report Errors", "description": "Get modified functions.\n\nArgs:\n    message (str): Error Message.\n    repo_details (dict): Repo details.\n\nReturns:\n    dict: A dictionary containing the message \"ok\".\n\nExamples:\n    get_modified_functions(\"Sample error message\", {\"repo_name\": \"example_repo\"})\n\n    This function reports errors from the client and processes the repository by setting secrets for GitHub apps and handling exceptions.\n\n    When the repo_full_name is not empty, it processes the repository by setting secrets for GitHub apps and handling exceptions.\n    If any exception occurs during the process, it is caught and a message indicating the status of the configuration auto-healing is returned.\n\n    The function then sends a message to Slack containing the error message and repo details, and finally returns a dictionary containing the message \"ok\".", "operationId": "report_errors_api_app_github_report_errors_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_report_errors_api_app_github_report_errors_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/list": {"get": {"tags": ["github_app"], "summary": "Get User Count", "description": "Get the total count of users and repositories.\n\nThis function retrieves the total count of users and repositories from the data access layer.\nIf the count is not available in the Redis cache, it fetches the count from the respective services\nand stores it in the cache with a TTL of 60 minutes.\n\nArgs:\n    org_name (str?): The name of the organization. Defaults to None.\n    current_user (schemas.User): The current active user.\n\nReturns:\n    dict: A dictionary containing the count of users and repositories.", "operationId": "get_user_count_api_app_github_list_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "orgName", "in": "query", "required": false, "schema": {"type": "string", "title": "Orgname"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/get/repo": {"get": {"tags": ["github_app"], "summary": "Get Single Repo", "description": "Retrieves all repositories for the current user.\n\nArgs:\n    current_user (schemas.User): The current user object obtained from the authentication.\n\nReturns:\n    list: A list of repositories for the current user.\n\nExamples:\n    Example usage of get_all_repositories:\n\n    repositories = get_all_repositories()", "operationId": "get_single_repo_api_app_github_get_repo_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "orgName", "in": "query", "required": true, "schema": {"type": "string", "minLength": 1, "title": "Orgname"}}, {"name": "repoName", "in": "query", "required": true, "schema": {"type": "string", "minLength": 1, "title": "Reponame"}}, {"name": "vendor", "in": "query", "required": true, "schema": {"$ref": "#/components/schemas/GitVendor"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/start/repo/documentation/admin": {"get": {"tags": ["github_app"], "summary": "Start Repo Documentation Admin", "description": "Retrieves all repositories for the current user.\n\nIt retrieves all repositories for the current user based on the provided organization name, installation ID, repository name, user's GitHub login ID, and a boolean indicating if the request is from a VPC.\n\nArgs:\n    org_name (str): Name of the organization.\n    installation_id (str): The installation ID.\n    repo_name (str): Name of the repository.\n    user_github_login_id (str): The login ID of the user.\n    is_vpc_request (bool): A boolean indicating if the request is from a VPC.\n\nReturns:\n    dict: A dictionary with a message indicating the status of the operation.\n\nRaises:\n    HTTPException: If mandatory parameters are not present or if an error occurs during the repository retrieval or installation process.", "operationId": "start_repo_documentation_admin_api_app_github_start_repo_documentation_admin_get", "parameters": [{"name": "org_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Org Name"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}, {"name": "repo_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Repo Name"}}, {"name": "user_github_login_id", "in": "query", "required": false, "schema": {"type": "string", "title": "User Github Login Id"}}, {"name": "request-source", "in": "header", "required": false, "schema": {"type": "string", "default": "", "title": "Request-Source"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/start/repo/documentation": {"get": {"tags": ["github_app"], "summary": "Start Repo Documentation", "description": "Retrieves all repositories for the current user.\n\nArgs:\n    org_name (str): Name of the organization.\n    installation_id (str): The installation ID.\n    repo_name (str): Name of the repository.\n    current_user (schemas.User?): The current user object obtained from the authentication. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    List[Repository]: A list of repositories for the current user.\n\nRaises:\n    HTTPException: If mandatory parameters are not present or if an error occurs during the repository retrieval or installation process.", "operationId": "start_repo_documentation_api_app_github_start_repo_documentation_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "org_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Org Name"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}, {"name": "repo_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Repo Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/status/repo/documentation": {"get": {"tags": ["github_app"], "summary": "Status Repo Documentation", "description": "Retrieves all repositories for the current user.\n\nRetrieves all repositories for the current user and returns a list of repositories for the current user.\n\nArgs:\n    org_name (str): Name of the organization.\n    installation_id (str): The installation ID.\n    repo_name (str): Name of the repository.\n    current_user (schemas.User?): The current user object obtained from the authentication. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    List[Repository]: A list of repositories for the current user.\n\nRaises:\n    HTTPException: If mandatory parameters are not present or if an error occurs during the repository retrieval or installation process.", "operationId": "status_repo_documentation_api_app_github_status_repo_documentation_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "org_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Org Name"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}, {"name": "repo_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Repo Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/upgrade/premium": {"get": {"tags": ["github_app"], "summary": "Upgrade Premium", "description": "Upgrade the plan type of a repository to premium.\n\nThis function upgrades the plan type of a repository to premium by setting the plan_type attribute of the repository details.\n\nArgs:\n    org_name (str): The name of the organization.\n    installation_id (str): The installation ID of the repository.\n    repo_name (str): The name of the repository.\n    current_user (schemas.User): The current user making the request.\n\nReturns:\n    GithubApp: The updated repository details after the plan type upgrade.\n\nRaises:\n    HTTPException: If the repository is not found or if there are issues with the repository details such as being deleted, inactive, or not installed.", "operationId": "upgrade_premium_api_app_github_upgrade_premium_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "org_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Org Name"}}, {"name": "installation_id", "in": "query", "required": false, "schema": {"type": "string", "title": "Installation Id"}}, {"name": "repo_name", "in": "query", "required": false, "schema": {"type": "string", "title": "Repo Name"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/reconcile/user": {"get": {"tags": ["github_app"], "summary": "Reconcile Github User Id", "description": "Reconcile the GitHub user ID.\n\nThis function reconciles the GitHub user ID by calling the `reconcile_github_user_id` method from the `github_app_service`.\n\nReturns:\n    StreamingResponse: A streaming response containing the updated user_id for repositories.", "operationId": "reconcile_github_user_id_api_app_github_reconcile_user_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/app/github/fetch-token": {"get": {"tags": ["github_app"], "summary": " Fetch Token", "operationId": "_fetch_token_api_app_github_fetch_token_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "installation_id", "in": "query", "required": true, "schema": {"type": "string", "title": "Installation Id"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/app/github/raise_pr": {"get": {"tags": ["github_app"], "summary": "Raise Pr", "operationId": "raise_pr_api_app_github_raise_pr_get", "security": [{"OAuth2PasswordBearer": []}], "parameters": [{"name": "installation_id", "in": "query", "required": true, "schema": {"type": "string", "title": "Installation Id"}}, {"name": "owner", "in": "query", "required": true, "schema": {"type": "string", "title": "Owner"}}, {"name": "repo", "in": "query", "required": true, "schema": {"type": "string", "title": "Repo"}}, {"name": "main", "in": "query", "required": true, "schema": {"type": "string", "title": "Main"}}, {"name": "target_branch", "in": "query", "required": true, "schema": {"type": "string", "title": "Target Branch"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/coupon/get/all": {"get": {"tags": ["coupon"], "summary": "Get Coupon", "description": "Get usage information for the current user.\n\nArgs:\n    current_user (User?): The current user. Defaults to Depends(get_current_active_user).\n\nReturns:\n    dict: A dictionary containing the usage information.", "operationId": "get_coupon_api_v1_coupon_get_all_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/coupon/get/all/admin": {"get": {"tags": ["coupon"], "summary": "Get Coupon All Admin", "description": "Get usage information for the current user.\n\nArgs:\n    super_user (User?): The super user. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    dict: A dictionary containing the usage information.", "operationId": "get_coupon_all_admin_api_v1_coupon_get_all_admin_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/coupon/create": {"post": {"tags": ["coupon"], "summary": "Create", "description": "Create a new coupon.\n\nArgs:\n    coupon_data (Coupon): The data for the new coupon.\n    super_user (User?): The super user creating the coupon. Defaults to Depends(get_current_active_superuser).\n\nReturns:\n    Coupon: The newly created coupon.\n\nRaises:\n    Exception: If an error occurs while creating the coupon.", "operationId": "create_api_v1_coupon_create_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Coupon"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/coupon/update": {"post": {"tags": ["coupon"], "summary": "Update", "description": "Update the coupon data.\n\nIt updates the data for the coupon and returns the updated coupon data.\n\nArgs:\n    coupon_data (Coupon): The data for the coupon to be updated.\n    current_user (User?): The current user. Defaults to the result of get_current_active_superuser.\n\nReturns:\n    Coupon: The updated coupon data.\n\nRaises:\n    Exception: If an error occurs during the update process.\n\nExamples:\n    updated_coupon = create(coupon_data, current_user)", "operationId": "update_api_v1_coupon_update_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Coupon"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/coupon/redeem": {"post": {"tags": ["coupon"], "summary": "Redeem", "description": "Creates a coupon for the current user and sends a notification to Slack.\n\nIt retrieves the unused coupons for the user, converts them to a string representation,\nand sends the redeemed coupon details to Slack. Finally, it returns a dictionary with\nthe status and a success message.\n\nArgs:\n    current_user (User): The current active user.\n    redeem_type (str): Redeem Type of the coupon. Valid values are: AMAZON, INDIA_UPI.\n    redeem_id (str): The code of the coupon to be redeemed. Empty for Amazon coupons.\n\nReturns:\n    dict: A dictionary containing the status and message of the operation.\n\nRaises:\n    Exception: If there is an error in getting or redeeming the coupon.\n\nExamples:\n    create(current_user)", "operationId": "redeem_api_v1_coupon_redeem_post", "requestBody": {"content": {"application/json": {"schema": {"$ref": "#/components/schemas/Body_redeem_api_v1_coupon_redeem_post"}}}, "required": true}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"OAuth2PasswordBearer": []}]}}, "/api/v1/git/generate/diff/doc": {"post": {"tags": ["git_doc_gen_new"], "summary": "Generate Diff Docs", "description": "Generate documentation for the merged pull request.\n\nThis function generates documentation for the merged pull request by setting the user and vendor, encoding the API token, and creating and validating the repository.\nIt then starts the documentation generation process and returns a dictionary containing a message about the documentation generation and the validity of the request.\n\nArgs:\n    doc_gen_request (DocGenRequest): The merged pull request for which documentation needs to be generated.\n        current_user (schemas.User?): The current user. Defaults to Depends(get_current_user_from_api_key).\n\nReturns:\n    Dict[str, Union[str, bool]]: A dictionary containing the message about documentation generation and the validity of the request.", "operationId": "generate_diff_docs_api_v1_git_generate_diff_doc_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/git/generate/diff/doc/status": {"post": {"tags": ["git_doc_gen_new"], "summary": "Status Diff Docs", "description": "Generate documentation for the merged pull request.\n\nThis function generates documentation for the merged pull request by\nutilizing the DocumentationGenerator class.\n\nArgs:\n    doc_gen_request (DocGenRequest): The merged pull request for which documentation needs to be generated.\n\nReturns:\n    DocRunStatus: The status of the documentation run.", "operationId": "status_diff_docs_api_v1_git_generate_diff_doc_status_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/git/generate/arch/doc": {"post": {"tags": ["git_doc_gen_new"], "summary": "Generate Arch Docs", "description": "Generate Architecture documentation for the merged pull request.\n\nThis function generates documentation for the merged pull request by setting the user and vendor, encoding the API token,\nand creating and validating the repository. It then starts the documentation generation process and returns a dictionary containing a\nmessage about the documentation generation and the validity of the request.\n\nArgs:\n    doc_gen_request (DocGenRequest): The merged pull request for which documentation needs to be generated.\n\nReturns:\n    Dict[str, Union[str, bool]]: A dictionary containing the message about documentation generation and the validity of the request.", "operationId": "generate_arch_docs_api_v1_git_generate_arch_doc_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/git/generate/arch/doc/status": {"post": {"tags": ["git_doc_gen_new"], "summary": "Status Html Docs", "description": "Generate Architecture documentation for the merged pull request.\n\nThis function generates documentation for the merged pull request by\nsetting the user and vendor, encoding the API token, and creating and\nvalidating the repository. It then starts the documentation generation\nprocess and returns a dictionary containing a message about the\ndocumentation generation and the validity of the request.\n\nArgs:\n    doc_gen_request (DocGenRequest): The merged pull request for which documentation needs to be generated.\n\nReturns:\n    Dict[str, Union[str, bool]]: A dictionary containing the message about documentation generation and\n        the validity of the request.", "operationId": "status_html_docs_api_v1_git_generate_arch_doc_status_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/git/generate/repo/doc": {"post": {"tags": ["git_doc_gen_new"], "summary": "Generate Docs", "description": "Generate documentation for the merged pull request.\n\nThis function generates documentation for the merged pull request. It sets the current user and vendor, retrieves the git repository and app, validates the request, and triggers the repository documentation generation.\n\nArgs:\n    doc_gen_request (DocGenRequest): The merged pull request for which documentation needs to be generated.\n        It is an instance of the `DocGenRequest` model.\n\nReturns:\n    Dict[str, Union[str, bool]]: A dictionary containing the message about documentation generation and the validity of the request.\n        The dictionary has the following keys:\n        - \"message\" (str): A message indicating the status of the documentation generation.\n        - \"in_progress\" (bool): A boolean indicating whether the documentation generation is in progress.\n\nRaises:\n    HTTPException: If the Git App is not found for the repository, if the Git App token is not found for the repository, or if the Git App is not active, not installed, or deleted.", "operationId": "generate_docs_api_v1_git_generate_repo_doc_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/git/generate/repo/doc/status": {"post": {"tags": ["git_doc_gen_new"], "summary": "Status Docs", "description": "Generate documentation for the merged pull request.\n\nIt sets the current user and vendor for the request and then retrieves\nthe repository run status.\n\nArgs:\n    doc_gen_request (DocGenRequest): The merged pull request for which documentation needs to be generated.\n\nReturns:\n    Dict[str, Union[str, bool]]: A dictionary containing the message about documentation generation and\n        the validity of the request.", "operationId": "status_docs_api_v1_git_generate_repo_doc_status_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/git/generate/api/doc": {"post": {"tags": ["git_doc_gen_new"], "summary": "Generate Api Doc", "description": "Generate documentation for the merged pull request.\n\nThis function generates documentation for the merged pull request. It sets the current user and vendor, retrieves the git repository and app, validates the request, and triggers the repository documentation generation.\n\nArgs:\n    doc_gen_request (DocGenRequest): The merged pull request for which documentation needs to be generated.\n        It is an instance of the `DocGenRequest` model.\n\nReturns:\n    Dict[str, Union[str, bool]]: A dictionary containing the message about documentation generation and the validity of the request.\n        The dictionary has the following keys:\n        - \"message\" (str): A message indicating the status of the documentation generation.\n        - \"in_progress\" (bool): A boolean indicating whether the documentation generation is in progress.\n\nRaises:\n    HTTPException: If the Git App is not found for the repository, if the Git App token is not found for the repository, or if the Git App is not active, not installed, or deleted.", "operationId": "generate_api_doc_api_v1_git_generate_api_doc_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/git/generate/api/doc/status": {"post": {"tags": ["git_doc_gen_new"], "summary": "Status Api Docs", "description": "Generate documentation for the merged pull request.\n\nIt sets the current user and vendor for the request and then retrieves\nthe repository run status.\n\nArgs:\n    doc_gen_request (DocGenRequest): The merged pull request for which documentation needs to be generated.\n\nReturns:\n    Dict[str, Union[str, bool]]: A dictionary containing the message about documentation generation and\n        the validity of the request.", "operationId": "status_api_docs_api_v1_git_generate_api_doc_status_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/git/unlock/context": {"post": {"tags": ["git_doc_gen_new"], "summary": "Unlock Context", "description": "Unlock a specific type of context.\n\nThis function unlocks a context based on the provided context type. It\nchecks if the user is authorized to perform this action, validates the\ncontext type, initializes the context based on the type, and unlocks the\ncontext.\n\nArgs:\n    context_type (str): The type of context to unlock.\n    doc_gen_request (DocGenRequest): The request object containing user information.\n\nReturns:\n    dict: A dictionary containing a success message upon unlocking the context.\n\nRaises:\n    HTTPException: If the user is not authorized, context type is missing, or an invalid\n        context type is provided.", "operationId": "unlock_context_api_v1_git_unlock_context_post", "parameters": [{"name": "contextType", "in": "query", "required": true, "schema": {"type": "string", "description": "The type of context to unlock.", "title": "Contexttype"}, "description": "The type of context to unlock."}, {"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/DocGenRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/api/v1/generate/documentation": {"post": {"tags": ["doc_gen"], "summary": "Send Message", "description": "Send a message to the user.\n\nIt sends a message to the user and returns a streaming response containing the message.\n\nArgs:\n    chetnaRequest (ChetnaRequest): The request object containing the message to be sent.\n    current_user (User?): The current user sending the message. Defaults to Depends(get_current_user_from_api_key).\n\nReturns:\n    StreamingResponse: A streaming response containing the message.\n\nExamples:\n    Example usage of the send_message function:\n\n    send_message(chetnaRequest, current_user)", "operationId": "send_message_api_v1_generate_documentation_post", "parameters": [{"name": "api-key", "in": "header", "required": false, "schema": {"type": "string", "default": "", "title": "Api-Key"}}], "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "#/components/schemas/ChetnaRequest"}}}}, "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/.well-known/pki-validation/{filename}": {"get": {"summary": "Domain Verification", "description": "Performs domain verification.\n\nArgs:\n        filename (str): The name of the file to be verified.\n\n    Returns:\n        PlainTextResponse: A response object containing the content of the file.\n\n    Raises:\n        None: This function does not raise any exceptions.\n\n    Example:\n        >>> domain_verification('example.txt')\n        PlainTextResponse(content='''C22A9052AAB5D5F5F21D2286C4A7A73990498E1D8781CA3555977221E87C246C\ncomodoca.com\ne78b59daef60d35\n''')\n\n    Note:\n        - This function assumes that the file exists and is accessible.\n        - The content of the file should be in plain text format.", "operationId": "domain_verification__well_known_pki_validation__filename__get", "parameters": [{"name": "filename", "in": "path", "required": true, "schema": {"type": "string", "title": "Filename"}}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/metrics": {"get": {"summary": "Metrics", "description": "Endpoint that serves Prometheus metrics.", "operationId": "metrics_metrics_get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}}}}, "components": {"schemas": {"Actor": {"properties": {"type": {"type": "string", "title": "Type"}, "accountId": {"type": "string", "title": "Accountid"}, "uuid": {"type": "string", "title": "Uuid"}}, "type": "object", "required": ["type", "accountId", "uuid"], "title": "Actor"}, "BitbucketApp": {"properties": {"id": {"type": "string", "title": "Id"}, "version": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Version"}}, "type": "object", "required": ["id"], "title": "BitbucketApp"}, "BitbucketAppInstallation": {"properties": {"id": {"type": "string", "title": "Id"}, "installerAccountId": {"type": "string", "title": "Installeraccountid", "default": ""}, "app": {"$ref": "#/components/schemas/BitbucketApp"}}, "type": "object", "required": ["id", "app"], "title": "BitbucketAppInstallation"}, "BitbucketEvent": {"properties": {"actor": {"$ref": "#/components/schemas/Actor"}, "repository": {"$ref": "#/components/schemas/Repository"}, "project": {"$ref": "#/components/schemas/Project"}, "workspace": {"$ref": "#/components/schemas/Workspace"}, "pullrequest": {"$ref": "#/components/schemas/PullRequest"}, "eventType": {"type": "string", "title": "Eventtype"}}, "type": "object", "required": ["actor", "repository", "project", "workspace", "pullrequest", "eventType"], "title": "BitbucketEvent"}, "Body_login_api_login_post": {"properties": {"grant_type": {"anyOf": [{"type": "string", "pattern": "password"}, {"type": "null"}], "title": "Grant Type"}, "username": {"type": "string", "title": "Username"}, "password": {"type": "string", "title": "Password"}, "scope": {"type": "string", "title": "Scope", "default": ""}, "client_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Client Id"}, "client_secret": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Client Secret"}}, "type": "object", "required": ["username", "password"], "title": "Body_login_api_login_post"}, "Body_redeem_api_v1_coupon_redeem_post": {"properties": {"redeem_type": {"type": "string", "title": "Redeem Type", "description": "Redeem Type of the coupon. Valid values are: AMAZON, INDIA_UPI"}, "redeem_id": {"type": "string", "title": "Redeem Id", "description": "The code of the coupon to be redeemed. Empty for Amazon coupons."}}, "type": "object", "required": ["redeem_type", "redeem_id"], "title": "Body_redeem_api_v1_coupon_redeem_post"}, "Body_report_errors_api_app_github_report_errors_post": {"properties": {"message": {"type": "string", "title": "Message", "description": "Error Message"}, "repo_details": {"type": "object", "title": "Repo Details", "description": "Repo details"}}, "type": "object", "required": ["message", "repo_details"], "title": "Body_report_errors_api_app_github_report_errors_post"}, "Branch": {"properties": {"branch": {"type": "string", "title": "Branch"}, "commit": {"$ref": "#/components/schemas/Commit"}}, "type": "object", "required": ["branch", "commit"], "title": "Branch"}, "ChetnaRequest": {"properties": {"content": {"type": "string", "title": "Content"}, "fileType": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Filetype"}, "contentList": {"anyOf": [{"items": {"$ref": "#/components/schemas/Context"}, "type": "array"}, {"type": "null"}], "title": "Contentlist", "default": []}}, "type": "object", "required": ["content"], "title": "ChetnaRequest"}, "Commit": {"properties": {"hash": {"type": "string", "title": "Hash"}}, "type": "object", "required": ["hash"], "title": "Commit"}, "ContactUsRequest": {"properties": {"email": {"type": "string", "title": "Email", "default": ""}, "name": {"type": "string", "title": "Name", "default": ""}, "message": {"type": "string", "title": "Message", "default": ""}}, "type": "object", "title": "ContactUsRequest"}, "Context": {"properties": {"id": {"type": "string", "title": "Id"}, "content": {"anyOf": [{"type": "string"}, {"type": "object"}], "title": "Content"}, "role": {"$ref": "#/components/schemas/Role"}}, "type": "object", "required": ["id", "content", "role"], "title": "Context"}, "Coupon": {"properties": {"id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Id"}, "user_id": {"type": "integer", "title": "User Id"}, "coupon_code": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Coupon Code"}, "is_active": {"type": "boolean", "title": "Is Active", "default": true}, "is_deleted": {"type": "boolean", "title": "Is Deleted", "default": false}, "is_used": {"type": "boolean", "title": "Is Used", "default": false}, "used_at": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Used At"}, "amount": {"type": "number", "title": "Amount", "default": 0.0}, "used_source": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Used Source"}, "currency": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Currency", "default": "USD"}, "coupon_type": {"allOf": [{"$ref": "#/components/schemas/CouponType"}], "default": "JOINING"}, "coupon_state": {"anyOf": [{"$ref": "#/components/schemas/CouponState"}, {"type": "null"}], "default": "PAYMENT_ACTIVE"}}, "type": "object", "required": ["user_id"], "title": "Coupon"}, "CouponState": {"type": "string", "enum": ["PAYMENT_ACTIVE", "PAYMENT_PENDING", "PAYMENT_COMPLETE", "PAYMENT_FAILED"], "title": "CouponState"}, "CouponType": {"type": "string", "enum": ["REFERRAL", "PROMOTIONAL", "JOINING"], "title": "CouponType"}, "DocGenRequest": {"properties": {"base_branch": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Branch"}, "commit_sha": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Commit Sha"}, "head_branch_details": {"anyOf": [{"$ref": "#/components/schemas/GitBranchDetails"}, {"type": "null"}]}, "vendor": {"$ref": "#/components/schemas/GitVendor"}, "git_repo": {"$ref": "#/components/schemas/GitRepo"}, "user": {"anyOf": [{"$ref": "#/components/schemas/User"}, {"type": "null"}]}, "commit_message": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Commit Message"}, "repo_access_key": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Repo Access Key"}, "style_guides": {"items": {"$ref": "#/components/schemas/StyleGuide"}, "type": "array", "title": "Style Guides", "default": []}}, "type": "object", "required": ["vendor", "git_repo"], "title": "DocGenRequest"}, "EmailResponseSchema": {"properties": {"name": {"type": "string", "title": "Name"}, "verified": {"type": "boolean", "title": "Verified"}}, "type": "object", "required": ["name", "verified"], "title": "EmailResponseSchema"}, "FF": {"type": "string", "enum": ["EMPTY_REPO_CHECK", "FETCH_GITHUB_TOKEN_FROM_REDIS", "INSTALL_FROM_PULL_REQUEST", "INSTALL_ATTEMPT_COUNT_CHECK"], "title": "FF"}, "FlagSchema": {"properties": {"key": {"$ref": "#/components/schemas/FF"}, "value": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Value"}, "ttl": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Ttl", "default": 525600}}, "type": "object", "required": ["key"], "title": "FlagSchema"}, "ForgotPasswordSchema": {"properties": {"email": {"type": "string", "title": "Email"}}, "type": "object", "required": ["email"], "title": "ForgotPasswordSchema"}, "GitBranchDetails": {"properties": {"name": {"type": "string", "title": "Name"}, "sha": {"type": "string", "title": "Sha"}}, "type": "object", "required": ["name", "sha"], "title": "GitBranchDetails"}, "GitRepo": {"properties": {"id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Id"}, "github_login_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github Login Id"}, "installation_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Installation Id"}, "organization_name": {"type": "string", "title": "Organization Name"}, "organization_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Organization Id"}, "repo_name": {"type": "string", "title": "Repo Name"}, "repo_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Repo Id"}, "is_active": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Active"}, "is_private": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Private"}, "is_installed": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Installed"}, "is_deleted": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Deleted"}, "time_created": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Time Created"}, "vendor": {"allOf": [{"$ref": "#/components/schemas/GitVendor"}], "default": "GITHUB"}, "time_updated": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Time Updated"}, "user_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "User Id"}, "token": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Token", "default": ""}, "plan_type": {"anyOf": [{"$ref": "#/components/schemas/PlanType"}, {"type": "null"}], "default": "FREE"}, "netlify": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Netlify"}, "repo_url_with_token": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Repo Url With Token"}}, "type": "object", "required": ["organization_name", "repo_name"], "title": "GitRepo"}, "GitVendor": {"type": "string", "enum": ["GITHUB", "GITLAB", "BITBUCKET", "AZUREDEVOPS"], "title": "GitVendor"}, "GithubApp": {"properties": {"id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Id"}, "github_login_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github Login Id"}, "installation_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Installation Id"}, "organization_name": {"type": "string", "title": "Organization Name"}, "organization_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Organization Id"}, "repo_name": {"type": "string", "title": "Repo Name"}, "repo_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Repo Id"}, "is_active": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Active"}, "is_private": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Private"}, "is_installed": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Installed", "default": true}, "is_deleted": {"anyOf": [{"type": "boolean"}, {"type": "null"}], "title": "Is Deleted", "default": false}, "time_created": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Time Created"}, "vendor": {"allOf": [{"$ref": "#/components/schemas/GitVendor"}], "default": "GITHUB"}, "time_updated": {"anyOf": [{"type": "string", "format": "date-time"}, {"type": "null"}], "title": "Time Updated"}, "user_id": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "User Id"}, "token": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Token", "default": ""}, "plan_type": {"anyOf": [{"$ref": "#/components/schemas/PlanType"}, {"type": "null"}], "default": "FREE"}, "netlify": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Netlify"}}, "type": "object", "required": ["organization_name", "repo_name"], "title": "GithubApp"}, "HTTPValidationError": {"properties": {"detail": {"items": {"$ref": "#/components/schemas/ValidationError"}, "type": "array", "title": "Detail"}}, "type": "object", "title": "HTTPValidationError"}, "JavaScriptDocstringStyle": {"const": "JSDoc", "title": "JavaScriptDocstringStyle"}, "MergedPullRequest": {"properties": {"base_branch": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Base Branch"}, "commit_sha": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Commit Sha"}, "head_branch": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Head Branch"}, "head_branch_details": {"anyOf": [{"$ref": "#/components/schemas/GitBranchDetails"}, {"type": "null"}]}, "api_token": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Api Token"}, "git_repo": {"anyOf": [{"$ref": "#/components/schemas/GitRepo"}, {"type": "null"}]}, "installation_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Installation Id"}, "organization_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Organization Name"}, "repo_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Repo Name"}, "full_repo_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Full Repo Name"}, "user": {"anyOf": [{"$ref": "#/components/schemas/User"}, {"type": "null"}]}, "commit_message": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Commit Message"}, "vendor": {"anyOf": [{"$ref": "#/components/schemas/GitVendor"}, {"type": "null"}], "default": "GITHUB"}, "git_app": {"anyOf": [{"$ref": "#/components/schemas/GithubApp"}, {"type": "null"}]}, "style_guides": {"items": {"$ref": "#/components/schemas/StyleGuide"}, "type": "array", "title": "Style Guides", "default": []}}, "type": "object", "title": "MergedPullRequest"}, "PaymentInfo": {"properties": {"user_id": {"type": "string", "title": "User Id"}, "order_id": {"type": "string", "title": "Order Id"}, "payment_id": {"type": "string", "title": "Payment Id"}, "signature": {"type": "string", "title": "Signature"}, "vendor": {"type": "string", "title": "Vendor"}, "status": {"type": "string", "title": "Status"}}, "type": "object", "title": "PaymentInfo"}, "PlanType": {"type": "string", "enum": ["FREE", "PREMIUM"], "title": "PlanType"}, "ProgrammingLanguage": {"type": "string", "enum": ["py", "ts", "js", "kt", "java", "cs"], "title": "ProgrammingLanguage"}, "Project": {"properties": {"uuid": {"type": "string", "title": "Uuid"}}, "type": "object", "required": ["uuid"], "title": "Project"}, "PullRequest": {"properties": {"id": {"type": "integer", "title": "Id"}, "state": {"type": "string", "title": "State"}, "source": {"$ref": "#/components/schemas/Branch"}, "destination": {"$ref": "#/components/schemas/Branch"}, "mergeCommit": {"anyOf": [{"$ref": "#/components/schemas/Commit"}, {"type": "null"}]}}, "type": "object", "required": ["id", "state", "source", "destination"], "title": "PullRequest"}, "PythonDocstringStyle": {"type": "string", "enum": ["GOOGLE", "EPYDOC", "NUMPYDOC", "REST"], "title": "PythonDocstringStyle"}, "RedisSchema": {"properties": {"key": {"type": "string", "title": "Key"}, "value": {"anyOf": [{"type": "string"}, {"type": "integer"}, {"type": "number"}, {"type": "boolean"}, {"type": "null"}], "title": "Value"}, "ttl": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Ttl"}}, "type": "object", "required": ["key"], "title": "RedisSchema"}, "Repository": {"properties": {"uuid": {"type": "string", "title": "Uuid"}}, "type": "object", "required": ["uuid"], "title": "Repository"}, "Role": {"type": "string", "enum": ["USER", "ASSISTANT"], "title": "Role"}, "StyleGuide": {"properties": {"language": {"anyOf": [{"$ref": "#/components/schemas/ProgrammingLanguage"}, {"type": "null"}]}, "docstring_format": {"anyOf": [{"$ref": "#/components/schemas/PythonDocstringStyle"}, {"$ref": "#/components/schemas/JavaScriptDocstringStyle"}, {"type": "null"}], "title": "Docstring Format"}}, "type": "object", "title": "StyleGuide"}, "TokenResponseSchema": {"properties": {"token": {"type": "string", "title": "Token"}, "token_type": {"type": "string", "title": "Token Type", "default": "bearer"}, "user": {"$ref": "#/components/schemas/UserSingupResponseSchema"}}, "type": "object", "required": ["token", "user"], "title": "TokenResponseSchema"}, "UpdateEmailSchema": {"properties": {"email": {"type": "string", "title": "Email"}}, "type": "object", "required": ["email"], "title": "UpdateEmailSchema"}, "User": {"properties": {"email": {"type": "string", "title": "Email"}, "first_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "First Name"}, "last_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Last Name"}, "is_active": {"type": "boolean", "title": "Is Active", "default": false}, "user_role": {"allOf": [{"$ref": "#/components/schemas/UserRole"}], "default": "VIEWER"}, "github_login_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github Login Id"}, "google_login_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Google Login Id"}, "img_url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Img Url"}, "phone": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Phone"}, "birthdate": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Birthdate"}, "gender": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Gender"}, "address": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Address"}, "zip_code": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Zip Code"}, "city": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "City"}, "country": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Country"}, "lang": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lang"}, "onboarding_channel": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Onboarding Channel"}, "referred_by": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Referred By"}, "github_login_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github Login Name"}, "count_repo_gen": {"type": "integer", "title": "Count Repo Gen", "default": 0}, "id": {"type": "integer", "title": "Id"}, "password": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Password"}}, "type": "object", "required": ["email", "id"], "title": "User"}, "UserApiKeyResponseSchema": {"properties": {"id": {"type": "integer", "title": "Id"}, "email": {"type": "string", "title": "Email"}, "key": {"type": "string", "title": "Key"}, "isActive": {"type": "boolean", "title": "Isactive"}, "createdAt": {"type": "string", "format": "date-time", "title": "Createdat"}, "keyRole": {"type": "string", "title": "Keyrole"}}, "type": "object", "required": ["id", "email", "key", "isActive", "createdAt", "keyRole"], "title": "UserApiKeyResponseSchema"}, "UserCreate": {"properties": {"email": {"type": "string", "title": "Email"}, "first_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "First Name"}, "last_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Last Name"}, "is_active": {"type": "boolean", "title": "Is Active", "default": false}, "user_role": {"allOf": [{"$ref": "#/components/schemas/UserRole"}], "default": "VIEWER"}, "github_login_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github Login Id"}, "google_login_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Google Login Id"}, "img_url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Img Url"}, "phone": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Phone"}, "birthdate": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Birthdate"}, "gender": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Gender"}, "address": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Address"}, "zip_code": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Zip Code"}, "city": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "City"}, "country": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Country"}, "lang": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lang"}, "onboarding_channel": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Onboarding Channel"}, "referred_by": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Referred By"}, "github_login_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github Login Name"}, "count_repo_gen": {"type": "integer", "title": "Count Repo Gen", "default": 0}, "password": {"type": "string", "title": "Password"}}, "type": "object", "required": ["email", "password"], "title": "UserCreate"}, "UserRole": {"type": "string", "enum": ["SUPERUSER", "ADMIN", "VIEWER"], "title": "UserRole"}, "UserSignupRequestSchema": {"properties": {"email": {"type": "string", "title": "Email"}, "firstName": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Firstname"}, "lastName": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lastname"}, "is_active": {"type": "boolean", "title": "Is Active", "default": false}, "user_role": {"allOf": [{"$ref": "#/components/schemas/UserRole"}], "default": "VIEWER"}, "github_login_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github Login Id"}, "google_login_id": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Google Login Id"}, "img_url": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Img Url"}, "phone": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Phone"}, "birthdate": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Birthdate"}, "gender": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Gender"}, "address": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Address"}, "zip_code": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Zip Code"}, "city": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "City"}, "country": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Country"}, "lang": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lang"}, "onboarding_channel": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Onboarding Channel"}, "referred_by": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Referred By"}, "github_login_name": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Github Login Name"}, "count_repo_gen": {"type": "integer", "title": "Count Repo Gen", "default": 0}, "password": {"type": "string", "title": "Password"}}, "type": "object", "required": ["email", "firstName", "lastName", "password"], "title": "UserSignupRequestSchema"}, "UserSingupResponseSchema": {"properties": {"id": {"type": "integer", "title": "Id"}, "email": {"$ref": "#/components/schemas/EmailResponseSchema"}, "firstName": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Firstname"}, "lastName": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lastname"}, "phone": {"anyOf": [{"type": "object"}, {"type": "null"}], "title": "Phone"}, "birthday": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Birthday"}, "gender": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Gender"}, "address": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Address"}, "zipcode": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Zipcode"}, "city": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "City"}, "country": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Country"}, "lang": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lang"}, "imgUrl": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Imgurl"}, "userRole": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Userrole"}, "githubLoginId": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Githubloginid"}, "googleLoginId": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Googleloginid"}, "referredBy": {"anyOf": [{"type": "integer"}, {"type": "null"}], "title": "Referredby"}, "countRepoGen": {"type": "integer", "title": "Countrepogen"}, "isVerified": {"type": "boolean", "title": "Isverified", "default": false}}, "type": "object", "required": ["id", "email", "firstName", "lastName", "phone"], "title": "UserSingupResponseSchema"}, "UserUpdateSchema": {"properties": {"id": {"type": "integer", "title": "Id"}, "email": {"type": "string", "title": "Email"}, "firstName": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Firstname"}, "lastName": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lastname"}, "birthday": {"anyOf": [{"type": "string", "format": "date"}, {"type": "null"}], "title": "Birthday"}, "gender": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Gender"}, "address": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Address"}, "zipcode": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Zipcode"}, "city": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "City"}, "country": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Country"}, "lang": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Lang"}, "imgUrl": {"anyOf": [{"type": "string"}, {"type": "null"}], "title": "Imgurl"}}, "type": "object", "required": ["id", "email"], "title": "UserUpdateSchema"}, "ValidationError": {"properties": {"loc": {"items": {"anyOf": [{"type": "string"}, {"type": "integer"}]}, "type": "array", "title": "Location"}, "msg": {"type": "string", "title": "Message"}, "type": {"type": "string", "title": "Error Type"}}, "type": "object", "required": ["loc", "msg", "type"], "title": "ValidationError"}, "VerifyNewPasswordSchema": {"properties": {"code": {"type": "string", "title": "Code"}, "email": {"type": "string", "title": "Email"}, "newPassword": {"type": "string", "title": "Newpassword"}}, "type": "object", "required": ["code", "email", "newPassword"], "title": "VerifyNewPasswordSchema"}, "VerifyNewPasswordWithOldPasswordSchema": {"properties": {"password": {"type": "string", "title": "Password"}, "email": {"type": "string", "title": "Email"}, "newPassword": {"type": "string", "title": "Newpassword"}}, "type": "object", "required": ["password", "email", "newPassword"], "title": "VerifyNewPasswordWithOldPasswordSchema"}, "VerifySecurityCodeSchema": {"properties": {"code": {"type": "string", "title": "Code"}, "email": {"type": "string", "title": "Email"}}, "type": "object", "required": ["code", "email"], "title": "VerifySecurityCodeSchema"}, "Workspace": {"properties": {"uuid": {"type": "string", "title": "Uuid"}}, "type": "object", "required": ["uuid"], "title": "Workspace"}}, "securitySchemes": {"OAuth2PasswordBearer": {"type": "oauth2", "flows": {"password": {"scopes": {}, "tokenUrl": "/api/token"}}}}}}
